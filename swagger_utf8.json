{
  "openapi": "3.1.0",
  "info": {
    "title": "Open API ",
    "summary": "Подключая API, вы соглашаетесь на условия [оферты](https://tochka.com/links/offer-open-api)\n\n[Скачать](https://enter.tochka.com/doc/openapi/swagger.json) OpenAPI спецификацию",
    "description": "# Про API\n\n**Tochka OpenApi** — продукт, который поможет вам автоматизировать бизнес-процессы.\nС API вы сможете объединить сервисы Точки со своими приложениями и сервисами.\n\nС помощью API Точки можно:\n\n - получать список счетов, подключённых к аккаунту;\n - получать выписку по счёту;\n - создавать черновики платёжек на подпись;\n - получать вебхуки о входящих и исходящих платежах;\n - подписывать платежи из интегрированного сервиса;\n - регистрироваться в СБП (Системе быстрых платежей), создавать QR-коды, отслеживать оплаты по ним и делать возвраты;\n - получать балансы счетов;\n - создавать счета и закрывающие документы;\n - создавать платёжные ссылки для приёма оплаты по карте и/или СБП.\n\n\n# Терминология\n\n**Access Token Client** — токен, дающий доступ к методам Tochka OpenApi. С токеном можно вызывать методы в течение 24 часов, потом его нужно будет получить заново.\n\n**Access Token Hybrid** — токен доступа, полученный после прохождения гибридного потока. Применяется для доступа к счетам, балансу, выпискам и так далее. Срок действия также 24 часа.\n\n**Refresh Token Hybrid** — токен, который отправляет новый Access Token Hybrid, если предыдущий устарел. Refresh Token активен 30 дней.\n\n**Redirect Uri** — uri для перехода, который указывали при регистрации в API в интернет-банке. На него будет произведён редирект для получения Access и Refresh токенов.\n\n**Code** — код авторизации, полученный через редирект браузера пользователя приложения. Срок действия — 5 минут.\n\n**Id Token** — токен безопасности, который содержит параметры аутентификации конечного пользователя сервером авторизации. Id token представляется в виде структуры JWT.\n\n**Client Id** — идентификатор приложения.\n\n**Client Secret** — пароль приложения.\n\n**Consent ID** — идентификатор списка разрешений.\n\n**Customer Code** — идентификатор компании в запросе.\n\n**AccountId** — номер расчётного счёта и БИК банка.\n\n**JWT** — веб-токен, который дает долгоживущий доступ к методам Tochka OpenApi. Токену можно задать произвольное время жизни вручную или сделать бессрочным, не указывая дату окончания срока жизни.\n\n\n# Алгоритм работы по OAuth 2.0\n\n## Принцип работы\n\n1. [Зарегистрируйте своё приложение](/doc/v2/redoc/section/Algoritm-raboty-po-OAuth-2.0#Zaregistrirujte-svoyo-prilozhenie). В ответ вы получите `client_id` и `client_secret`, с которыми и будете запрашивать данные;\n\n2. [Получите токен для работы с разрешениями](/doc/v2/redoc/section/Algoritm-raboty-po-OAuth-2.0#Poluchite-token-dlya-raboty-s-razresheniyami);\n\n3. [Задайте разрешения](/doc/v2/redoc/section/Algoritm-raboty-po-OAuth-2.0#Zadajte-razresheniya);\n\n4. [Сформируйте запрос на подписание списка разрешений и попросите пользователя подтвердить список](/doc/v2/redoc/section/Algoritm-raboty-po-OAuth-2.0#Sformirujte-zapros-na-podpisanie-spiska-razreshenij-i-poprosite-polzovatelya-podtverdit-spisok);\n\n5. [Обменяйте код на токен для доступа к API](/doc/v2/redoc/section/Algoritm-raboty-po-OAuth-2.0#Obmenyajte-kod-na-token-dlya-dostupa-k-API);\n\n6. [Обменяйте refresh токен на новую пару access/refresh токенов](/doc/v2/redoc/section/Algoritm-raboty-po-OAuth-2.0#Obmenyajte-refresh-token-na-novuyu-paru-accessrefresh-tokenov);\n\n7. [При необходимости проверьте Access Token Hybrid](/doc/v2/redoc/section/Algoritm-raboty-po-OAuth-2.0#Kak-proverit-Access-Token-Hybrid).\n\nТакже можно настроить интеграцию упрощённым методом с помощью [веб-токена](/doc/v2/redoc/section/Algoritm-raboty-s-JWT-tokenom)\n\n### Простая схема\n\nНа схеме представлен общий флоу работы от первого запроса разрешений до получения результата. Пройти этот путь нужно только один раз, чтобы создать токен oAuth.\n\n```mermaid\nsequenceDiagram\n    participant C as Клиент (владелец счёта)\n    participant P as Партнёр (приложение)\n    participant T as Точка\n    C->>+P: Хочу подключить Точку в твоём приложении\n    P-->>+T: Получение токена для работы с разрешениями\n    T-->>-P: Успех, получен токен для работы с разрешениями\n    Note over P,T: полученный токен подходит только для работы с разрешениями\n    P-->>+T: Создай ресурс на доступ\n    Note over P,T: в теле запроса передаём модель разрешения\n    T-->>-P: Успех, получен id разрешения\n    P->>P: Подписываем запрос, в котором содержится информация о разрешениях\n    P->>-C: Получена ссылка, перейдите по ней и подтвердите разрешения\n    C->>+T: Переходим на страницу подтверждения разрешений\n    T->>T: Проверяем авторизацию\n    T->>T: Генерируем страницу с разрешениями\n    T->>-C: Показываем страницу с разрешениями и ждём подтверждения\n    C-->>+T: Подтверждение разрешений\n    T-->>-C: Успех, получена ссылка, по которой вернутся обратно\n    C->>+P: Переходим по ссылке и передаём все необходимые данные\n    Note over C,P: Ждем получения `code` на `redirect_uri`\n    P-->>+T: Меняем `code` на `Access Token Hybrid``\n    T-->>-P: И снова успех, получен токен для дальнейших запросов\n```\n\nДалее добавляйте `Access Token Hybrid` в заголовок `Authorization: Bearer <Access Token Hybrid>` при совершении запросов.\n\n\n### Модель запросов\n\nПри совершении запросов всегда нужно добавлять токен в заголовок авторизации.\nЕсли вы создаёте запрос по компании, обязательно указывайте идентификатор этой компании в заголовке `CustomerCode`.\nЗапросить список компаний клиента можно вот [так](/doc/v2/redoc/tag/Rabota-s-klientami#get_customers_list_open_banking__apiVersion__customers_get).\n\n## Зарегистрируйте своё приложение\n\nЕсли у вашей компании ещё нет счёта в Точке, оставьте заявку на нашем [сайте](https://tochka.com/public-api/).\nМы свяжемся с вами в течение 2 рабочих дней, а затем отправим необходимые данные на вашу электронную почту.\n\nЕсли вы уже работаете в Точке, зарегистрируйте приложение в интернет-банке: раздел «Интеграции и API» — [«Подключить»](https://i.tochka.com/bank/services/m/integration/new).  \nНажмите на кнопку «Зарегистрировать oAuth 2.0 приложение» и выберите необходимые разрешения для приложения.\n\n\n## Получите токен для работы с разрешениями\n\nПройти oAuth авторизацию по принципу `client_credentials`.\n\n### Примеры запросов\n\nПример запроса Партнёр -> Точка:\n```\ncurl --request POST 'https://enter.tochka.com/connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=test_app' \\\n--data-urlencode 'client_secret=test_secret' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode 'scope=accounts balances customers statements sbp payments' \n```\n\nПример ответа:\n```\n{\n    \"token_type\": \"bearer\",\n    \"access_token\": \"p6awaKAleytQh6mKc61vXd22YniDerme\",\n    \"expires_in\": 86400\n}\n```\n\n## Задайте разрешения\n\n`expirationDateTime` — это срок действия разрешений. Если нужны бессрочные, не передавайте этот параметр.\n\n### Примеры запросов\n\nПример запроса Партнёр -> Точка:\n```\ncurl --request POST 'https://enter.tochka.com/uapi/v1.0/consents' \\\n--header 'Authorization: Bearer p6awaKAleytQh6mKc61vXd22YniDerme' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"Data\": {\n    \"permissions\": [\n      \"ReadAccountsBasic\",\n      \"ReadAccountsDetail\",\n      \"MakeAcquiringOperation\",\n      \"ReadAcquiringData\",\n      \"ReadBalances\",\n      \"ReadStatements\",\n      \"ReadCustomerData\",\n      \"ReadSBPData\",\n      \"EditSBPData\",\n      \"CreatePaymentForSign\",\n      \"CreatePaymentOrder\",\n      \"ManageWebhookData\",\n      \"ManageInvoiceData\"\n    ],\n    \"expirationDateTime\": \"2030-10-03T00:00:00+00:00\"\n  }\n}\n'\n```\n\nПример ответа:\n```\n{\n    \"Data\": {\n        \"status\": \"AwaitingAuthorisation\",\n        \"creationDateTime\": \"2024-01-10T11:40:16.941480+00:00\",\n        \"statusUpdateDateTime\": \"2024-01-10T11:40:16.941498+00:00\",\n        \"permissions\": [\n            \"ReadAccountsBasic\",\n            \"ReadAccountsDetail\",\n            \"MakeAcquiringOperation\",\n            \"ReadAcquiringData\",\n            \"ReadBalances\",\n            \"ReadStatements\",\n            \"ReadCustomerData\",\n            \"ReadSBPData\",\n            \"EditSBPData\",\n            \"CreatePaymentForSign\",\n            \"CreatePaymentOrder\",\n            \"ManageWebhookData\",\n            \"ManageInvoiceData\"\n        ],\n        \"expirationDateTime\": null,\n        \"consentId\": \"705ba15f-a109-4156-bb7f-50c21413c158\",\n        \"customerCode\": null,\n        \"applicationName\": null,\n        \"consumerId\": \"0b5efd83-2f20-4350-b777-c2525efc68bc\",\n        \"clientId\": null\n    },\n    \"Links\": {\n        \"self\": \"https://enter.tochka.com/uapi/v1.0/consents\"\n    },\n    \"Meta\": {\n        \"totalPages\": 1\n    }\n}\n```\n\n## Сформируйте запрос на подписание списка разрешений и попросите пользователя подтвердить список\n\nСформируйте ссылку для подтверждения списка разрешений и перенаправьте пользователя на неё. В параметрах нужно передать следующий набор:\n - client_id — идентификатор клиента;\n - response_type — код авторизации;\n - state — произвольная строка (подойдёт для связи запроса и ответа, то есть идентификации клиента);\n - redirect_uri — URI, предварительно зарегистрированный на авторизационном сервере. На него перенаправим пользователя;\n - scope — `accounts balances customers statements sbp payments acquiring` то есть запрашиваемая область действия токена доступа;\n - consent_id — id разрешения из ответа с предыдущего шага.\n\n\nПример URL, куда направляем пользователя:\n```\nhttps://enter.tochka.com/connect/authorize?client_id=test_app&response_type=code&state=Vuihvsds&redirect_uri=http://localhost:8000/&scope=accounts%20balances%20customers%20statements%20sbp%20payments&consent_id=705ba15f-a109-4156-bb7f-50c21413c158\n```\n\n## Обменяйте код на токен для доступа к API\n\nПодхватываем пользователя на `redirect_url` и меняем код на токен запросом:\n\n```\ncurl --request POST 'https://enter.tochka.com/connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=test_app' \\\n--data-urlencode 'client_secret=test_secret' \\\n--data-urlencode 'grant_type=authorization_code' \\\n--data-urlencode 'scope=accounts balances customers statements sbp payments' \\\n--data-urlencode 'code=' \\\n--data-urlencode 'redirect_uri=http://localhost:8000/'\n```\n\nОтвет:\n```\n{\n    \"refresh_token\": \"ViYnf8sDILwKpvUMcIQJEqCYy88zW1ys\",\n    \"access_token\": \"JlvB7rgB0Q9vuuh0YNVQ4hBkGChIqovR\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 86400,\n    \"state\": \"Vuihvsds\",\n    \"user_id\": \"b5fb8f68-10b3-48cd-a3e9-642162432724\" \n}\n```\n\n\n## Обменяйте refresh токен на новую пару access/refresh токенов\n\nДля обмена токена выполните запрос:\n\n```\ncurl --request POST 'https://enter.tochka.com/connect/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'client_id=test_app' \\\n--data-urlencode 'client_secret=test_secret' \\\n--data-urlencode 'grant_type=refresh_token' \\\n--data-urlencode 'refresh_token=ViYnf8sDILwKpvUMcIQJEqCYy88zW1ys'\n```\n\nОтвет:\n```\n{\n    \"refresh_token\": \"7lsLqrr2ug3j4KPPWgkUC8zPQ9W2HKH6\",\n    \"token_type\": \"bearer\",\n    \"access_token\": \"scD56TmsyrCV9kpExKlY2p61BrCY0tNj\",\n    \"expires_in\": 86400\n}\n```\n\n## Как проверить Access Token Hybrid\nДля этого проверьте аутентификацию клиента по полученному токену. В ответе будет [jwt](https://jwt.io/introduction), в котором зашифрован Customer Code (sub) и Client ID (aud). Этот метод — не обязательный для работы с API.\n```\ncurl --request POST 'https://enter.tochka.com/connect/introspect' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'access_token=dnjsndamklcmda8n3m2jkndsa76'\n```\nОтвет:\n```\n\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.ewogICJpc3MiOiAiZW50ZXIudG9jaGthLmNvbSIsCiAgInN1YiI6ICIzMDk4NzY1NDMiLAogICJhdWQiOiAiQU1KanMzbmFkamFuMjFqa2Exc211NyIKfQ.vPOLUlTzMm3HJz4D76JfO3Y8dJHf57v2oMMhbWJowVqAIhs2wAAOGouORzoo2Az28bbEYxaHeITDpMWg035UVwGQYskL7qeFBO2m5bFlPoAnt1RyFMblhjG8iLb5yAFWtJUD1tyJDR1FYAdJshVMddY4_ZDyMUIK3fJElbr2xAWuk_cX9Y5hoGe1plB0JpWLEgPaFuB9TjCjvpz9sWbMBvczC3bx_07-t0I8Jodh82THaz7o63IctEwlJ3vqNyr4l01JA6cZidmpAgQJ-448wQbOWBT_WOHMHWwc2EuQy1vDni3jHm6AvWlnnXJyKGBXClMqpj67m2lpuPfIoqyC_g\"\n```\n\n# Алгоритм работы с JWT-токеном\n\nЭто упрощённый метод авторизации — в нём не используется _redirect_uri_.  \n\nЧтобы получить токен в интернет-банке Точки перейдите в раздел «Интеграции и API» — [«Подключить»](https://i.tochka.com/bank/services/m/integration/new).  \nНажмите на кнопку «Сгенерировать JWT-ключ» и выберите необходимые разрешения для приложения.  \n\nКогда JWT сгенерируется, поместите ключ в заголовок `Authorization: Bearer <jwt_token>`, а также скопируйте `client_id` — он понадобится для некоторых запросов в будущем.\n```mermaid\nsequenceDiagram\n    participant C as Клиент (владелец счёта)\n    participant T as Точка\n    C-->+T: Хотим подключить Точку в своём приложении\n    C->>+T: Вводим название токена, указываем срок его жизни, выбираем необходимые разрешения и подтверждаем\n    T-->>-C: Высылаем смс с кодом\n    C-->>+T: Вводим смс-код\n    T->>-C: Успех! Показываем сгенерированный JWT-токен и client_id, используйте их для дальнейших запросов\n```\n\n# Коллекция запросов\n\n## Ссылки\n\n- [Коллекция запросов](/doc/openapi/static/postman/OpenAPI.postman_collection.json)\n- [Настройка окружения](/doc/openapi/static/postman/Setting.postman_environment.json)\n- [Настройка окружения для песочницы](/doc/openapi/static/postman/Sandbox.postman_environment.json)\n\n## Как использовать коллекцию\n\nПоставьте Postman не ниже версии 2.1. на свой компьютер. Затем импортируйте коллекцию и набор необходимых переменных с помощью кнопки `Import`.\n\n![Import](/doc/openapi/static/image/import.png)\n\nВыберите `Upload files`\n\n![Upload file](/doc/openapi/static/image/import-2.png)\n\nДругой вариант: сначала выберите вариант `Link`, в нём укажите сначала ссылку на коллекцию, а затем — на настройку окружения.\n\n## Как настроить окружение\n\nТеперь осталось лишь указать `client_id` и `client_secret` своего приложения в настройках переменных.\n\n![Set env](/doc/openapi/static/image/env.png)\n\n## Как выполнять запросы\n\nЧтобы получить полноценный токен, нужно пройти авторизацию. Для этого сделайте три следующих запроса:\n - Получите токен работы с разрешениями с помощью первого POST запроса;\n - Создайте разрешение — клиенту нужно будет позднее его подтвердить. В ответ вы получите `consent_id`, который надо передать в ссылке и перенаправить клиента для подтверждения.\n\n> **Алгоритм уже готов: выполните запрос, откройте в Postman консоль из нижнего левого края и скопируйте автоматически сформированную ссылку в браузер.**\n\n - Когда клиент пройдёт авторизацию в браузере и подтвердит все настройки, он перенаправится на `redirect_uri` вашего приложения.\nВы получите `code`, который далее меняется на полноценный `Access Token Hybrid` для выполнения запросов.\n\n\n# Описание методов\n\n## Баланс счёта\nДля работы с балансами счетов должно быть выдано разрешение `ReadBalances`.\n\nС помощью методов: [Get Balance Info](/doc/v2/redoc/tag/Rabota-s-balansami-schetov#get_balance_info_open_banking__apiVersion__accounts__accountId__balances_get) и [Get Balances List](/doc/v2/redoc/tag/Rabota-s-balansami-schetov#get_balances_list_open_banking__apiVersion__balances_get), можно получать информацию о банковском остатке по счетам.  \n\nОбратите внимание: доступный остаток по счёту может отличаться от банковского.  \nДоступный остаток может быть меньше, например, из-за блокировок на сумму или резерва по карточным операциям.\n\n### Описание типов балансов\n\n- **OpeningAvailable** — начальный баланс счёта без учёта овердрафта и блокировок;  \n- **ClosingAvailable** — доступный баланс счёта без учёта овердрафта и за вычетом всех блокировок, сумма свободных к использованию денег;  \n- **Expected** — сумма заблокированных на счёте денег;  \n- **OverdraftAvailable** — сумма доступного лимита овердрафта на счёте. Отображается, только если на счёте есть выданный овердрафт.\n\nМетод [Get Authorized Card Transactions](/doc/v2/redoc/tag/Rabota-s-balansami-schetov#get_authorized_card_transactions_open_banking__apiVersion__accounts__accountId__authorized_card_transactions_get) позволяет получать информацию об авторизованных карточных транзакциях по конкретному счёту.  \nОн поможет отслеживать операции по банковской карте, и это удобно, ведь в выписку карточные операции попадают совсем не моментально.\n\nАвторизованная карточная операция встаёт в резерв. Резерв — это деньги, которые блокируются на вашем счету после покупки по карте или снятия наличных.  \nСумма становится недоступной для использования и «ждёт» окончательного списания со счёта. Пока деньги стоят в резерве, использовать их нельзя, рекомендуем учитывать это при планировании расходов.\n\nСписание происходит, когда банк получает окончательное требование от платёжной системы. Обычно это занимает 3-5 рабочих дней, но иногда — и до 30. В банковскую выписку операция попадёт именно с датой списания, а не самой покупки.\n\n## Вебхуки\n\nДля работы с вебхуками должно быть выдано разрешение `ManageWebhookData`.\n\nВебхуки нужны для того, чтобы получать уведомления о важных событиях в вашем сервисе или телеграм-каналах, связанных с вашими счетами.\n \nВебхук — это POST запрос на указанный url, в теле которого находится jwt токен в виде строки.  \nЭтот jwt объект нужно расшифровать — алгоритм шифрования тела вебхука `RS256`.  \n\nДля того чтобы убедиться, что вебхук пришёл от Точки, используйте наш [публичный ключ OpenAPI](/doc/openapi/static/keys/public).\n\nСейчас доступны четыре вида событий: `incomingPayment`, `incomingSbpPayment`, `outgoingPayment` и `acquiringInternetPayment`.\n\n<details>\n    <summary>incomingPayment — о входящих платежах</summary>\n\nВебхук нужен для отправки информации о входящих платежах.\n\nВ течение 20 секунд после каждого входящего платежа будет отправлено уведомление с основными данными: \n- реквизиты получателя и отправителя платежа,  \n- **purpose** — назначение,  \n- **amount** — сумма,  \n- **webhookType** — incomingPayment,  \n- **customerCode** - уникальный идентификатор клиента,  \n- **paymentId** — уникальный идентификатор платежа, который также содержится в выписке.\n\n**Пример с телом вебхука по событию incomingPayment:**\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJTaWRlUGF5ZXIiOiB7ImJhbmtDb2RlIjogIjAwMDAwMDAwMCIsICJiYW5rTmFtZSI6ICJcdTA0MWVcdTA0MWVcdTA0MWUgXHUwNDExXHUwNDMwXHUwNDNkXHUwNDNhIFx1MDQyMlx1MDQzZVx1MDQ0N1x1MDQzYVx1MDQzMCIsICJiYW5rQ29ycmVzcG9uZGVudEFjY291bnQiOiAiMDAwMDAwMDAwMDAwMDAwMDAwMDAiLCAiYWNjb3VudCI6ICIwMDAwMDAwMDAwMDAwMDAwMDAwMCIsICJuYW1lIjogIlx1MDQxOFx1MDQxZiBcdTA0MjJcdTA0MzVcdTA0NDFcdTA0NDIiLCAiYW1vdW50IjogIjQwLjAiLCAiY3VycmVuY3kiOiAiUlVCIiwgImlubiI6ICIwMDAwMDAwMDAwIiwgImtwcCI6ICIwMDAwMDAwMDAwIn0sICJTaWRlUmVjaXBpZW50IjogeyJiYW5rQ29kZSI6ICIwMDAwMDAwMDAiLCAiYmFua05hbWUiOiAiXHUwNDFlXHUwNDFlXHUwNDFlIFx1MDQxMVx1MDQzMFx1MDQzZFx1MDQzYSBcdTA0MjJcdTA0M2VcdTA0NDdcdTA0M2FcdTA0MzAiLCAiYmFua0NvcnJlc3BvbmRlbnRBY2NvdW50IjogIjAwMDAwMDAwMDAwMDAwMDAwMDAwIiwgImFjY291bnQiOiAiMDAwMDAwMDAwMDAwMDAwMDAwMDAiLCAibmFtZSI6ICJcdTA0MThcdTA0MWYgXHUwNDIyXHUwNDM1XHUwNDQxXHUwNDQyIiwgImFtb3VudCI6ICI0MC4wIiwgImN1cnJlbmN5IjogIlJVQiIsICJpbm4iOiAiMDAwMDAwMDAwMCIsICJrcHAiOiAiMDAwMDAwMDAwMCJ9LCAicHVycG9zZSI6ICJcdTA0MjJcdTA0MzVcdTA0NDFcdTA0NDJcdTA0M2VcdTA0MzJcdTA0M2VcdTA0MzUgXHUwNDNkXHUwNDMwXHUwNDM3XHUwNDNkXHUwNDMwXHUwNDQ3XHUwNDM1XHUwNDNkXHUwNDM4XHUwNDM1IFx1MDQzZlx1MDQzYlx1MDQzMFx1MDQ0Mlx1MDQzNVx1MDQzNlx1MDQzMCIsICJkb2N1bWVudE51bWJlciI6ICIwMDAwMCIsICJwYXltZW50SWQiOiAiMDAwMDAwMDAwMCIsICJkYXRlIjogIjIwMTgtMTAtMDEiLCAid2ViaG9va1R5cGUiOiAiaW5jb21pbmdQYXltZW50IiwgImN1c3RvbWVyQ29kZSI6ICIzMDAxMjMxMjMifQ.j7FCYrHL6pmR7m8TZxtBPBdsHG3uOu6bBl7HZq-VaK_LDj7Lyjb_B0L6zWZjVTRWvyfi6CZ-T-yT8IWzXdN5csoIEiwSuzLeC17oW-9c359Z5AYbL9x4SHSlYd3Q_hPM4DQVxPnPKb_IYpZGDCTovU_wtlAxiBdXQbY3qWEzzDzCuqZNjlVQalu7XipuSt7nNDBuwcDWJAC8Ry0U7UwRH6wboufhL7WcrQgsEn-2ZV--sKzinhUyfyYMw8_cFt9MNX3x_x3Fhu56708MDviu57O5u9t-diWrw2X75QKjnlf-PAamb0idK_8bJ5XbLXymnaBuYgSZSd-HZMHYLWiMHDL-z1OIsLgPKanUPJeKsSlmiVA1VJH2oZVRMv9Pf05O_cbN26d-LIjqn9z_m8XeZ1w0I9sfGP96IfT7xONsTLdbTCiKAJ-he4nzscxpzQc3tYnaeqETTZiyjB1U_chh88bG2n_0tNlQEtRT3j0sPyCWX3qLSFlkp6kKmQkIfeBn\n```\n</details>\n\n<details>\n    <summary>outgoingPayment — об исходящих платежах</summary>\n\nВебхук нужен для отправки информации об исходящих платежах.\n    \nВ течение 20 секунд после каждого исходящего платежа будет отправлено уведомление с основными данными:  \n- реквизиты получателя и отправителя платежа,  \n- **purpose** — назначение,  \n- **amount** — сумма,  \n- **webhookType** — outgoingPayment,  \n- **customerCode** - уникальный идентификатор клиента,  \n- **paymentId** — уникальный идентификатор платежа, который также содержится в выписке.\n\n**Пример с телом вебхука по событию outgoingPayment:**\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJTaWRlUGF5ZXIiOiB7ImJhbmtDb2RlIjogIjAwMDAwMDAwMCIsICJiYW5rTmFtZSI6ICJcdTA0MWVcdTA0MWVcdTA0MWUgXHUwNDExXHUwNDMwXHUwNDNkXHUwNDNhIFx1MDQyMlx1MDQzZVx1MDQ0N1x1MDQzYVx1MDQzMCIsICJiYW5rQ29ycmVzcG9uZGVudEFjY291bnQiOiAiMDAwMDAwMDAwMDAwMDAwMDAwMDAiLCAiYWNjb3VudCI6ICIwMDAwMDAwMDAwMDAwMDAwMDAwMCIsICJuYW1lIjogIlx1MDQxOFx1MDQxZiBcdTA0MjJcdTA0MzVcdTA0NDFcdTA0NDIiLCAiYW1vdW50IjogIjQwLjAiLCAiY3VycmVuY3kiOiAiUlVCIiwgImlubiI6ICIwMDAwMDAwMDAwIiwgImtwcCI6ICIwMDAwMDAwMDAwIn0sICJTaWRlUmVjaXBpZW50IjogeyJiYW5rQ29kZSI6ICIwMDAwMDAwMDAiLCAiYmFua05hbWUiOiAiXHUwNDFlXHUwNDFlXHUwNDFlIFx1MDQxMVx1MDQzMFx1MDQzZFx1MDQzYSBcdTA0MjJcdTA0M2VcdTA0NDdcdTA0M2FcdTA0MzAiLCAiYmFua0NvcnJlc3BvbmRlbnRBY2NvdW50IjogIjAwMDAwMDAwMDAwMDAwMDAwMDAwIiwgImFjY291bnQiOiAiMDAwMDAwMDAwMDAwMDAwMDAwMDAiLCAibmFtZSI6ICJcdTA0MThcdTA0MWYgXHUwNDIyXHUwNDM1XHUwNDQxXHUwNDQyIiwgImFtb3VudCI6ICI0MC4wIiwgImN1cnJlbmN5IjogIlJVQiIsICJpbm4iOiAiMDAwMDAwMDAwMCIsICJrcHAiOiAiMDAwMDAwMDAwMCJ9LCAicHVycG9zZSI6ICJcdTA0MjJcdTA0MzVcdTA0NDFcdTA0NDJcdTA0M2VcdTA0MzJcdTA0M2VcdTA0MzUgXHUwNDNkXHUwNDMwXHUwNDM3XHUwNDNkXHUwNDMwXHUwNDQ3XHUwNDM1XHUwNDNkXHUwNDM4XHUwNDM1IFx1MDQzZlx1MDQzYlx1MDQzMFx1MDQ0Mlx1MDQzNVx1MDQzNlx1MDQzMCIsICJkb2N1bWVudE51bWJlciI6ICIwMDAwMCIsICJwYXltZW50SWQiOiAiMDAwMDAwMDAwMCIsICJkYXRlIjogIjIwMTgtMTAtMDEiLCAid2ViaG9va1R5cGUiOiAib3V0Z29pbmdQYXltZW50IiwgImN1c3RvbWVyQ29kZSI6ICIzMDAxMjMxMjMifQ.UCRqWxMHocDG83NeHxL9DdaZuLdnvWKC-zcbQL80PM3LAauP9H98tC80krR_jfGP7aXa8kOKrP2Qq5JSy4_lITViSuJKhQW9tHxQA0zJwwHmUOGIU6RNDmPVKQScoh2LlTcCpu-94v8O2GSa5nssVVj4_3mZT8VdjagpxMCuISYFRaUTnvjskkNOSmrXZIuoUHHL9h5sc6o7E8i6mMI0tMHRArgsM2Ge7de4ajkEsGQsJNBXEJV9rA4Ba5a4XdPlo1wE5nMLziKh5w-CVkotO2KyKCTLgIlg6tNwmBs0saRMJU3kJfiBrLsuPoW34ZKPoqvgQEP8q9AayjC-eTrtsC94cNoiwz2I8-KLhnZmIXKahO_p-6kCBzQfJyz-H0sfJQjDBC1zFQieP79sarBPqYmCJ7eNNttyoGdJz2xDoLFStBRU2ua198PYSHsuBsdoBQ_6FO6BWCnnL66mzMKXPRpQ-uOIa-t73wTuzCre3HZVUpFKlzrfts4BxuG4Yy6o\n```\n</details>\n\n<details>\n    <summary>incomingSbpPayment — о входящих платежах через СБП</summary>\n\nПо этому типу вебхука мы отправляем уведомление только, если деньги зачисляются через Систему быстрых платежей. В нём указываются:  \n- **operationId** — идентификатор операции,  \n- **qrcId** — идентификатор QR-кода,  \n- **payerName** — данные покупателя: имя, отчество и первая буква фамилии,  \n- **payerMobileNumber** — номер телефона,  \n- **amount** — сумма операции,  \n- **brandName** — наименование ТСП,  \n- **webhookType** — incomingSbpPayment,  \n- **customerCode** — уникальный идентификатор клиента,  \n- **merchantId** — идентификатор ТСП,  \n- **refTransactionId** — идентификатор транзакции, по которой осуществляется возврат,  \n- **purpose** — назначение платежа.\n    \nУведомление обычно приходит в течение 5 секунд с момента зачисления денег по QR-коду.\n    \n**Пример с телом вебхука по событию incomingSbpPayment:**\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJvcGVyYXRpb25JZCI6ICJBMjIwMDExMDAyNjM4MjAxMDAwMDA1MzNFNjI1RkNCMyIsICJxcmNJZCI6ICJBUzEwMDA2RFBSVEVGUEZTOUhKOVNRU0RTVlJISkQzTCIsICJhbW91bnQiOiAiMC4zMyIsICJwYXllck1vYmlsZU51bWJlciI6ICIrOTk5OTEyMzQ1NjciLCAicGF5ZXJOYW1lIjogIlx1MDQxOFx1MDQzMlx1MDQzMFx1MDQzZCBcdTA0MThcdTA0MzJcdTA0MzBcdTA0M2RcdTA0M2VcdTA0MzJcdTA0MzhcdTA0NDcgXHUwNDE4LiIsICJicmFuZE5hbWUiOiAiXHUwNDFhXHUwNDNlXHUwNDQ0XHUwNDM1XHUwNDM5XHUwNDNkXHUwNDRmIFx1MDQ0MyBcdTA0MTBcdTA0NDBcdTA0NDJcdTA0MzVcdTA0M2NcdTA0MzAiLCAibWVyY2hhbnRJZCI6ICJNRjAwMDAwMDAwMDEiLCAicHVycG9zZSI6ICJcdTA0MWVcdTA0M2ZcdTA0M2JcdTA0MzBcdTA0NDJcdTA0MzAgXHUwNDNmXHUwNDNlIFx1MDQ0MVx1MDQ0N1x1MDQzNVx1MDQ0Mlx1MDQ0MyBcdTIxMTYgMSBcdTA0M2VcdTA0NDIgMDEuMDEuMjAyMS4gXHUwNDExXHUwNDM1XHUwNDM3IFx1MDQxZFx1MDQxNFx1MDQyMSIsICJ3ZWJob29rVHlwZSI6ICJpbmNvbWluZ1NicFBheW1lbnQiLCAiY3VzdG9tZXJDb2RlIjogIjMwMDEyMzEyMyIsICJyZWZUcmFuc2FjdGlvbklkIjogImNiMWVmMTBiLTM5ZTktNGU1NS1hZWY5LWQ2YmNjMzk2ZmYwZiJ9.QroEOEYw-fxniFzvjcrgihSeYOhE9GLVuMwI9Uuc0ubuwc-wYP2pHRYF4Lu2-bqHZk2jP5QHn2aDYWFVWi3vBi6sbVTa_n3Y9qZ1ROjbRaF-Uuah5XyzijwNG0I--0jj-vvn3D3caC1mw6dOCP1Ehkd5ipZWtcsrzu0wPxni8bsiqDIBVcA4hg3a6Iu5AORANwy4whiFo295bzf1Y_fdBhZO1QjZqv3-Cc_fF9liKd56UMfljm3ChqVwCdNF85e69PXAjkeicp-pH12kkgeflA2zLq_LFurAZj9_JkrOS9qSpfDqYf0m-ciHYFVYJNGH4PZnIPOa7iYNlGi0WjVbxE6uJX2EDHnYCZ1qXAkdGlm3K1CNvmBzjIUEowWOmD9bkq4INGsd9MMmRRSo-K3fqqjPNXkVGw2-_ZbIgemG9TD4bGeZCWN4shXpzrWGcyfQ7mrhRW0XiECGxTy8K4QuK-WsijGBlkYGd-bZuBa9qyZXLnsX4FhTIdEHYDc_eW6v\n```\n</details>\n\n<details>\n    <summary>incomingSbpB2BPayment — о входящих платежах через B2B QR-код по СБП</summary>\n\nПо этому типу вебхука мы отправляем уведомление только при зачислении денег через B2B QR-коды, созданные через Систему быстрых платежей. \nВ вебхуке указываются:\n- **qrcId** — идентификатор QR-кода,\n- **customerCode** — уникальный идентификатор клиента,\n- **webhookType** — incomingSbpB2BPayment,\n- **amount** — сумма операции,\n- **purpose** — назначение платежа.\n\nУведомление обычно приходит в течение 10 секунд с момента зачисления денег по QR-коду.\n\n    \n**Пример с телом вебхука по событию incomingSbpB2BPayment:**\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJxcmNJZCI6ICJBUzEwMDA2RFBSVEVGUEZTOUhKOVNRU0RTVlJISkQzTCIsICJhbW91bnQiOiAiMC4zMyIsICJwdXJwb3NlIjogIlx1MDQxZVx1MDQzZlx1MDQzYlx1MDQzMFx1MDQ0Mlx1MDQzMCBcdTA0M2ZcdTA0M2UgXHUwNDQxXHUwNDQ3XHUwNDM1XHUwNDQyXHUwNDQzIFx1MjExNiAxIFx1MDQzZVx1MDQ0MiAwMS4wMS4yMDIxLiBcdTA0MTFcdTA0MzVcdTA0MzcgXHUwNDFkXHUwNDE0XHUwNDIxIiwgIndlYmhvb2tUeXBlIjogImluY29taW5nU2JwQjJCUGF5bWVudCIsICJjdXN0b21lckNvZGUiOiAiMzAwMTIzMTIzIn0.dty4QICBwDnglK9VKFchdKxG_QbOPHKHmqxSan5uDUadMT61391lNiRj7cKGiH35heZc7GEKp3rwmuqLIEwLcUQts2t90Baw7gVeHQSQMyeBjIEFoBXgkDCNsRwqJISmW8NfEv6xX87IEjLp6wKJi3VmfF_sffW6EpaXzyScA9DPIKjtUA9U-W5t8JmjgWMbXK41ghfiSlYiCOpOVOleod3R-jjzsGI3nEYExDqWWz3VgjsFGwHLGKoWBzhqtSL-NBTp5rE82N5eZrWF_4n8tkAmPzShQY9Rh2VxFVwAyqIezqYHYAcBBW_6vbZvA_XFVB8UkjOqJKRWSFHEOsmu7o3JYOq0WnI1iJ_Hfsi0W1HjjgaZuMhyezqNsGWib6u_g-86ekEPxXGFFlKglHg52t8iU-YE8dt7e7s890l_4_C2tRBbOuLrdnITrHzepiby6A74Qdt29j2Ffo0Vkd8qRNWx7RmWjy1X7NN0h595imLbBFWeYPYNOdG0M7CBQUox\n```\n</details>\n\n<details>\n    <summary>acquiringInternetPayment — о входящих платежах только по платёжным ссылкам</summary>\n\nПо этому типу вебхука мы отправляем уведомление, только если по ссылке платят с карты или через Систему быстрых платежей.  \nДоставляется он обычно за 5-10 секунд с момента оплаты.\n    \nПри платеже по номеру карты мы передадим следующую информацию: \n- **amount** — сумма платежа,  \n- **paymentType** — card,  \n- **operationId** — идентификатор платежа,  \n- **webhookType** — acquiringInternetPayment,  \n- **customerCode** — уникальный идентификатор клиента,  \n- **merchantId** — идентификатор торговой точки в интернет-эквайринге,  \n- **consumerId** — идентификатор покупателя,  \n- **purpose** — назначение платежа.\n    \n**Пример с телом вебхука по событию acquiringInternetPayment при оплате картой:**\n    \n```\n eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJjdXN0b21lckNvZGUiOiAiMzAwMTIzMTIzIiwgImFtb3VudCI6ICIwLjMzIiwgInBheW1lbnRUeXBlIjogImNhcmQiLCAib3BlcmF0aW9uSWQiOiAiYmVlYWM4YTQtNjA0Ny0zZjM4LTg5MjItYTY2NGU2YjVjNDNiIiwgInB1cnBvc2UiOiAiXHUwNDFlXHUwNDNmXHUwNDNiXHUwNDMwXHUwNDQyXHUwNDMwIFx1MDQzZlx1MDQzZSBcdTA0NDFcdTA0NDdcdTA0MzVcdTA0NDJcdTA0NDMgXHUyMTE2IDEgXHUwNDNlXHUwNDQyIDAxLjAxLjIwMjEuIFx1MDQxMVx1MDQzNVx1MDQzNyBcdTA0MWRcdTA0MTRcdTA0MjEiLCAid2ViaG9va1R5cGUiOiAiYWNxdWlyaW5nSW50ZXJuZXRQYXltZW50IiwgIm1lcmNoYW50SWQiOiAiMjAwMDAwMDAwMDAxMjM0IiwgImNvbnN1bWVySWQiOiAiOTE3ZWQzODktYTEyMC00MjkxLThlNzMtMzhjNmVmN2Q2NzcwIn0.QUtKBb98-Y0b-PseDOghdbX8SuTm-OIT_m_8kMhyDiO5ANJzZtccOJyDuTOMkLCz9luEs5B5DualE1AmfBDRi_jI1c9Hsprq8f7VEQsVb6y_KKkuppY8nYgc01yF5g4FPYh9Bn7TM1wbguHo5DpR0c1R1vpy2CPQ_VAeTn09E4fBXAQcOq0M_z2Qhu9v__t4ApoHsG8CnnpmMaiFQ-RgynKKu_3YDMg6aji63QrLm_AjVncJ-ctSSwOPNCIGinkRWZAbVDNfkMfn11txvtJj4FcoyiJxiSm1Ih9tWjqwkTkjj3IhfV8CtDAOBcg8Qd4rVFmZXM5YZi0fLb2oVPZRa3Kb7E51Ua-pPFPNKkvx0ZNPOKivaNXYg4VaKyb_JOWbpSfrJbVOhF8cTIQNCbKRex24h-_xAydgYw1EoGQaAZDoRtP1TWXUOAz6OqF9iQ3-2nP1-wg7nomCRaQEa98ogaSasgMJ-kYesmRQlfcgBK7R51AHI5bK6UWkg3Jbp6-E\n```\n\nПри платеже через Систему быстрых платежей мы передадим следующую информацию: \n- **amount** — сумма платежа,  \n- **paymentType** — sbp,  \n- **transactionId** — идентификатор платежа в СБП,  \n- **purpose** — назначение платежа,  \n- **qrcId** — идентификатор QR-кода,  \n- **merchantId** — идентификатор торговой точки в интернет-эквайринге,  \n- **operationId** — идентификатор платежа,  \n- **webhookType** — acquiringInternetPayment,  \n- **customerCode** — уникальный идентификатор клиента,  \n- **payerName** — данные покупателя: имя, отчество и первая буква фамилии.\n\n**Пример с телом вебхука по событию acquiringInternetPayment при оплате через Систему быстрых платежей:**\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJjdXN0b21lckNvZGUiOiAiMzAwMTIzMTIzIiwgImFtb3VudCI6ICIwLjMzIiwgInBheW1lbnRUeXBlIjogInNicCIsICJvcGVyYXRpb25JZCI6ICJiZWVhYzhhNC02MDQ3LTNmMzgtODkyMi1hNjY0ZTZiNWM0M2IiLCAidHJhbnNhY3Rpb25JZCI6ICI0M2M2M2VjMS00MmZhLWE3MDQtZGRlNy02MDI1YzIwYjk2Y2UiLCAicHVycG9zZSI6ICJcdTA0MWVcdTA0M2ZcdTA0M2JcdTA0MzBcdTA0NDJcdTA0MzAgXHUwNDNmXHUwNDNlIFx1MDQ0MVx1MDQ0N1x1MDQzNVx1MDQ0Mlx1MDQ0MyBcdTIxMTYgMSBcdTA0M2VcdTA0NDIgMDEuMDEuMjAyMS4gXHUwNDExXHUwNDM1XHUwNDM3IFx1MDQxZFx1MDQxNFx1MDQyMSIsICJxcmNJZCI6ICJBUzEwMDA2RFBSVEVGUEZTOUhKOVNRU0RTVlJISkQzTCIsICJwYXllck5hbWUiOiAiXHUwNDE4XHUwNDMyXHUwNDMwXHUwNDNkIFx1MDQxOFx1MDQzMlx1MDQzMFx1MDQzZFx1MDQzZVx1MDQzMlx1MDQzOFx1MDQ0NyBcdTA0MTguIiwgIndlYmhvb2tUeXBlIjogImFjcXVpcmluZ0ludGVybmV0UGF5bWVudCIsICJtZXJjaGFudElkIjogIjIwMDAwMDAwMDAwMTIzNCJ9.F6TCuPI835gquhN0EbmApmRNNveItRpLrZBGFXUrnx5pel3SVfQYcKYMykhXPRu4JmaKfQvZYgCfXRSVSuF9U4sWCwaLPhkFLhTZUuQwpI_ndCstZjnEKqKRH6eQV3hwfx_qKKNWkpI1UNdDr6xbjKjWetYI0LKbZdBBS6OTwFCQI5LkEOA4qeeX-JAGHM4J86G_ZnigzFO62L0MU8yPfHRMJZ2sjyS2vI4oAYJdfObkrbBheO2OK57elZU0if-jKRCYHGU4xhY3yJJqENDAGSY4NeYacNE-FRfOF3foz_PFjnHWsZR1pdOskA7ERHfHVwyQSNg9AZ6jFAsQpA8s2sOwP-9Ob9lro0MVkRnpxgnosXk2KPaYe_Cj0BcfzjN_cphmgfk_VdnFFEfI516AmR_U_Rqq-_t_YKwzwuvwH_mplCK8aVDy9_QHkEFed2kTd9rJt5mEEpXtDQMqsv1gGloFDTENPoilODjmwgaQsLdRimt30qYx695DiEPn5GJF\n```\n</details>\n\n### Несколько особенностей в работе вебхуков\n\n- Если на отправленный вебхук мы не получили ответ с кодом состояния HTTP 200, а получили любой другой код, то будем отправлять его повторно 30 раз с периодичностью в 10 секунд.  \n\n- Для проверки доступности указанного вами хоста при создании или изменении вебхука мы отправим на ваш url по одному тестовому вебхуку на каждое из событий, на которые вы подписаны.  \nЕсли в статусе ответа не придёт код HTTP 200, то вебхук не будет создан или изменён. \n\n- Подключить или изменить вебхук можно только по протоколу HTTPS на порт 443. Создать вебхук на другой порт или протокол не получится.\n\n- Вебхук отправляется с заголовком `Content-Type: text/plain`.\n\n\n### Примеры обработки вебхуков\n\nПримеры кода, который успешно обрабатывает вебхук\n\n<details>\n    <summary>Python</summary>\n\n```python\nfrom aiohttp import web\nimport jwt\nfrom jwt import exceptions\nimport json\n\n# Публичный ключ Точки. Может быть получен из https://enter.tochka.com/doc/openapi/static/keys/public\nkey_json = '{\"kty\":\"RSA\",\"e\":\"AQAB\",\"n\":\"rwm77av7GIttq-JF1itEgLCGEZW_zz16RlUQVYlLbJtyRSu61fCec_rroP6PxjXU2uLzUOaGaLgAPeUZAJrGuVp9nryKgbZceHckdHDYgJd9TsdJ1MYUsXaOb9joN9vmsCscBx1lwSlFQyNQsHUsrjuDk-opf6RCuazRQ9gkoDCX70HV8WBMFoVm-YWQKJHZEaIQxg_DU4gMFyKRkDGKsYKA0POL-UgWA1qkg6nHY5BOMKaqxbc5ky87muWB5nNk4mfmsckyFv9j1gBiXLKekA_y4UwG2o1pbOLpJS3bP_c95rm4M9ZBmGXqfOQhbjz8z-s9C11i-jmOQ2ByohS-ST3E5sqBzIsxxrxyQDTw--bZNhzpbciyYW4GfkkqyeYoOPd_84jPTBDKQXssvj8ZOj2XboS77tvEO1n1WlwUzh8HPCJod5_fEgSXuozpJtOggXBv0C2ps7yXlDZf-7Jar0UYc_NJEHJF-xShlqd6Q3sVL02PhSCM-ibn9DN9BKmD\"}'\nkey = json.loads(key_json)\njwk_key = jwt.jwk_from_dict(key)\n\n\nasync def handle(request: web.Request):\n    payload = await request.text()\n\n    try:\n        # тело вебхука\n        webhook_jwt = jwt.JWT().decode(\n            message=payload,\n            key=jwk_key,\n        )\n    except exceptions.JWTDecodeError:\n        # Неверная подпись, вебхук не от Точки или с ним что-то не так\n        pass\n\n    return web.Response(status=200)\n\n\napp = web.Application()\napp.router.add_route('POST', '/', handle)\n\nif __name__ == '__main__':\n    web.run_app(app, port=80)\n\n```\n</details>\n\n<details>\n    <summary>PHP</summary>\n\n```php\n<?php\nrequire __DIR__ . \"/vendor/autoload.php\";\nuse Firebase\\JWT\\JWK;\nuse Firebase\\JWT\\JWT;\n\n\n$entityBody = file_get_contents(\"php://input\");\n\n// Публичный ключ Точки. Может быть получен из https://enter.tochka.com/doc/openapi/static/keys/public\n$json_key = '{\"kty\":\"RSA\",\"e\":\"AQAB\",\"n\":\"rwm77av7GIttq-JF1itEgLCGEZW_zz16RlUQVYlLbJtyRSu61fCec_rroP6PxjXU2uLzUOaGaLgAPeUZAJrGuVp9nryKgbZceHckdHDYgJd9TsdJ1MYUsXaOb9joN9vmsCscBx1lwSlFQyNQsHUsrjuDk-opf6RCuazRQ9gkoDCX70HV8WBMFoVm-YWQKJHZEaIQxg_DU4gMFyKRkDGKsYKA0POL-UgWA1qkg6nHY5BOMKaqxbc5ky87muWB5nNk4mfmsckyFv9j1gBiXLKekA_y4UwG2o1pbOLpJS3bP_c95rm4M9ZBmGXqfOQhbjz8z-s9C11i-jmOQ2ByohS-ST3E5sqBzIsxxrxyQDTw--bZNhzpbciyYW4GfkkqyeYoOPd_84jPTBDKQXssvj8ZOj2XboS77tvEO1n1WlwUzh8HPCJod5_fEgSXuozpJtOggXBv0C2ps7yXlDZf-7Jar0UYc_NJEHJF-xShlqd6Q3sVL02PhSCM-ibn9DN9BKmD\"}';\n$jwks = json_decode($json_key, true, 512, JSON_THROW_ON_ERROR);\n\ntry {\n    $decoded = JWT::decode($entityBody, JWK::parseKey($jwks,\"RS256\"));\n} catch (\\UnexpectedValueException $e) {\n    // Неверная подпись, вебхук не от Точки или с ним что-то не так\n    echo \"Invalid webhook\";\n}\n\n\n// Тело вебхука\n$decoded_array = (array) $decoded;\n\n\nhttp_response_code(200);\n```\n</details>\n\n<details>\n    <summary>Java</summary>\n\n```java\nimport com.nimbusds.jose.JOSEException;\nimport com.nimbusds.jose.crypto.RSASSAVerifier;\nimport com.nimbusds.jose.jwk.JWK;\nimport com.nimbusds.jwt.SignedJWT;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.text.ParseException;\n\n@RestController\n@RequestMapping(\"/\")\npublic class WebhookResource {\n\n    @PostMapping(value = \"/\")\n    public void tochkaWebhook(@RequestBody String webhookData) throws ParseException, JOSEException {\n\n        // Публичный ключ Точки. Может быть получен из https://enter.tochka.com/doc/openapi/static/keys/public\n        var jsonKey = \"{\\\"kty\\\":\\\"RSA\\\",\\\"e\\\":\\\"AQAB\\\",\\\"n\\\":\\\"raJQJyBXIgS1YzYFkmQGq5XtadLVvMcx5u-guR2r5ZgSb-HGUG7HF5NM-NJeL9YrVtjjGf8VNLpwGbeejsS9LRniPfKkCYaVqV1DSGOZ6RTOtqN3jKW1W86cVb-LffrQo3eFhPX5V464uduPu9RouFplQ7wprY5ewke0Yj0FCOr6Ebxlpql-aJp_wk8JSzzFN17IC5tfUXgGDjEmnMjxag_CntnJtKWmw69ivhrq5sTPspclL3Ij8K_Qk0MwAZFCci25WxIuKQe7Mk4dvay6CUfrCbAgEtqMcWUSqoG7pdBig59lo-kIMWvVQIAWjo2JhI7VlI_ssvFtiJg5T9myE914aESFZ8jEheQv-4kZ81F0qk02k2mJ4C7AasGhbzC4F8YQ7nbr49v1n_j8udNZZXA8vI2hacG517A66-uvEHIxXRUo_gIcubR-vdbJbaK_k8JRLJNmdf4B9HchJ6VD9aGjMT0GYfhQ8jf16E1L_U4G4XLB5cnb0h88PD2MaMGP\\\"}\";\n        var jwkKey = JWK.parse(jsonKey);\n\n        var jwtData = SignedJWT.parse(webhookData);\n\n        var verifier = new RSASSAVerifier(jwkKey.toRSAKey().toRSAPublicKey());\n        if (!jwtData.verify(verifier)) {\n\n            // Неверная подпись, вебхук не от Точки или с ним что-то не так\n            System.out.println(\"Invalid webhook\");\n            return;\n        }\n\n        // Тело вебхука\n        var webhookParsedData = jwtData.getJWTClaimsSet().getClaims();\n        return;\n    }\n}\n```\n</details>\n\n\n### Вебхуками можно управлять с помощью методов:\n\n- [Get Webhooks](/doc/v2/redoc/tag/Rabota-s-vebhukami#get_webhooks_webhook__apiVersion___client_id__get) — чтобы получить список всех вебхуков, настроенных на приложение;\n- [Create Webhook](/doc/v2/redoc/tag/Rabota-s-vebhukami#create_webhook_webhook__apiVersion___client_id__put) — чтобы создать новый вебхук;\n- [Edit Webhook](/doc/v2/redoc/tag/Rabota-s-vebhukami#edit_webhook_webhook__apiVersion___client_id__post) — чтобы изменить URL или тип существующего вебхука;\n- [Delete Webhook](/doc/v2/redoc/tag/Rabota-s-vebhukami#delete_webhook_webhook__apiVersion___client_id__delete) — чтобы удалить вебхук;\n- [Send Webhook](/doc/v2/redoc/tag/Rabota-s-vebhukami#send_webhook_webhook__apiVersion___client_id__test_send_post) — чтобы отправить тестовый вебхук.\n\n## Клиенты\nДля работы с клиентами должно быть выдано разрешение `ReadCustomerData`.\n\nС помощью метода [Get Customers List](/doc/v2/redoc/tag/Rabota-s-klientami#get_customers_list_open_banking__apiVersion__customers_get) вы получите список подключённых компаний, а с [Get Customer Info](/doc/v2/redoc/tag/Rabota-s-klientami#get_customer_info_open_banking__apiVersion__customers__customerCode__get) — детальную информацию по каждому клиенту.\n\n## Счета\nДля работы со счетами должны быть выданы разрешения `ReadAccountsBasic` `ReadAccountsDetail`.\n\n - [Get Accounts List](/doc/v2/redoc/tag/Rabota-so-schetami#get_accounts_list_open_banking__apiVersion__accounts_get) — получить информация по всем счетам;  \n - [Get Account Info](/doc/v2/redoc/tag/Rabota-so-schetami#get_account_info_open_banking__apiVersion__accounts__accountId__get) — получить информация по одному счёту.\n\n## Платёжные ссылки\nДля работы с платёжными ссылками нужны разрешения `MakeAcquiringOperation`, `ReadAcquiringData` и `ReadCustomerData`.\n\nС методами openAPI можно формировать платёжные ссылки, по которым ваши покупатели смогут оплатить товар или услугу — и банковской картой, и через Систему быстрых платежей.\n\n<details>\n    <summary>методы по работе с платёжными ссылками без фискализации чеков</summary>\n\n### Подключение платёжных ссылок\n\nПеред работой с API платёжных ссылок нужно оставить заявку на подключение интернет-эквайринга внутри интернет-банка. Сделать это может руководитель или распорядитель с правом подписи в разделе «Сервисы» → [«Интернет-эквайринг»](https://i.tochka.com/a/internet_acquiring/).\n\nВ течение рабочего дня с момента заявки с вами свяжутся специалисты для подтверждения заявки.\n\nПроверить статус подключения интернет-эквайринга можно с помощью метода [Get Retailers](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_retailers_acquiring__apiVersion__retailers_get)\\.  \nСтатус REG и значение isActive: «true» будут означать, что настройка завершена — можно приступать к работе с платёжными ссылками.  \n\n### Генерация платёжной ссылки\nДля создания платёжной ссылки нужно вызвать метод [Create Payment Operation](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_acquiring__apiVersion__payments_post) и передать:\n-  **amount** — сумма платежа в рублях.\n-  **customerCode** — уникальный код клиента.\n-  **purpose** — назначение платежа, которое увидит перешедший по платёжной ссылке покупатель.\n-  **paymentMode** — способ оплаты. Можно выбрать оплату только по карте (card), через T-Pay (tinkoff) или по QR-коду (sbp), либо указать все три варианта, чтобы при переходе по ссылке покупатель сам выбирал способ оплаты.\n\n#### Дополнительно можно указать:\n\n- **redirectUrl** — URI-адрес, на который нужно переправить покупателя после оплаты.  \n- **failRedirectUrl** — URI-адрес, на который нужно переправить покупателя если оплата не прошла.  \n- **saveCard** — параметр, указывающий, будет ли покупателю предложено сохранить карту для следующих платежей.  \n- **merchantId** — идентификатор торговой точки в интернет-эквайринге. Параметр является обязательным, если у вас подключено несколько торговых точек для работы с интернет-эквайрингом.  \n- **consumerId** — идентификатор покупателя. Если ранее был указан параметр saveCard и клиент согласился с сохранением карты, то из ответа можно взять consumerId и подставить в запрос, чтобы покупатель мог выбрать карту, по которой уже происходила оплата.  \n- **ttl** — время действия платёжной ссылки в минутах, можно указать от 1 до 44 640 минут. Если при создании ссылки не передать этот параметр, срок действия составит 10 080 минут.  \n\nЧтобы сразу узнать об оплате по ссылке вы можете настроить вебхук с событием [acquiringInternetPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki) на свой URL.\n</details>\n\n<details>\n        <summary>методы по работе с платёжными ссылками с фискализацией чеков от партнёров Точки</summary>\n        \n### Подключение платёжных ссылок\n\nПеред работой с API платёжных ссылок нужно отправить заявку на подключение интернет-эквайринга и выбрать партнёра, который будет фискализировать ваши чеки по 54-ФЗ.\n\nСделать это может руководитель или распорядитель с правом подписи в разделе «Сервисы» →  [«Интернет-эквайринг»](https://i.tochka.com/a/internet_acquiring/).  \n\nВ течение рабочего дня с момента заявки с вами свяжутся специалисты для подтверждения заявки.\n\nПроверить статус подключения интернет-эквайринга можно с помощью метода [Get Retailers](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_retailers_acquiring__apiVersion__retailers_get)\\.  \nСтатус REG и значение isActive: «true» будут означать, что настройка завершена — можно приступать к работе с платёжными ссылками.  \n\n### Генерация платёжной ссылки\n\nДля создания платёжной ссылки нужно вызвать метод [Create Payment Operation With Receipt](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_with_receipt_acquiring__apiVersion__payments_with_receipt_post) и передать:\n- **amount** — сумма платежа в рублях.\n- **customerCode** — уникальный код клиента.\n- **paymentMode** — способ оплаты. Можно выбрать оплату только по карте (card), через T-Pay (tinkoff) или по QR-коду (sbp), либо указать все три варианта, чтобы при переходе по ссылке покупатель сам выбирал способ оплаты.\n- **purpose** — назначение платежа, которое увидит перешедший по платёжной ссылке покупатель.\n\n**Client** — объект, содержащий данные покупателя.  \n- **Email** — электронная почта покупателя, на которую будет отправлен чек.\n\n**Items** — объект, содержащий список товаров в заказе.  \n- **name** — название товара или услуги.\n- **amount** — цена за единицу товара или услуги.\n- **quantity** — количество товаров или оказанных услуг.\n\n### Дополнительно можно указать:\n\n- **redirectUrl** — URI-адрес, на который нужно переправить покупателя после оплаты.  \n- **failRedirectUrl** — URI-адрес, на который нужно переправить покупателя если оплата не прошла.  \n- **saveCard** — параметр, указывающий, будет ли покупателю предложено сохранить карту для следующих платежей.  \n- **consumerId** — идентификатор покупателя. Если ранее был указан параметр saveCard и клиент согласился с сохранением карты, то из ответа можно взять consumerId и подставить в запрос, чтобы покупатель мог выбрать карту, по которой уже происходила оплата.  \n- **taxSystemCode** — система налогообложения, которая используется в организации.  \n- **merchantId** — идентификатор торговой точки в интернет-эквайринге. Параметр является обязательным, если у вас подключено несколько торговых точек для работы с интернет-эквайрингом.  \n- **ttl** — время действия платёжной ссылки в минутах, можно указать от 1 до 44 640 минут. Если при создании ссылки не передать этот параметр, срок действия составит 10 080 минут.  \n\n**Client** — объект, содержащий данные покупателя.  \n- **name** —  наименование плательщика. Для юрлица — название организации, для ИП и физического лица — ФИО.\n- **phone** — телефон покупателя для отправки чека.\n\n**Items** — объект, содержащий список товаров в заказе.  \n- **vatType** — ставка НДС в позициях.  \n- **paymentMethod** — тип оплаты. full_payment — полная оплата, full_prepayment — полная предоплата.  \n- **paymentObject** — признак предмета расчёта. goods — товары, service — услуги, work — работа.  \n- **measure** — единица измерения. По умолчанию ставится штуки.  \n\n**Supplier** — объект, содержащий информацию о поставщике. Если вы работаете как агент и продаёте не свой товар, 54-ФЗ требует указывать в чеке данные поставщика.  \n- **phone** — номер телефона поставщика.  \n- **name** — наименование поставщика.  \n- **taxCode** — ИНН поставщика.  \n\nЧтобы сразу узнать об оплате по ссылке, вы можете настроить вебхук с событием [acquiringInternetPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki) на свой URL.\n</details>\n\n### Получение списка торговых точек\n\nМетод [Get Retailers](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_retailers_acquiring__apiVersion__retailers_get) возвращает информацию о подключённых торговых точках для работы с интернет-эквайрингом. В этом методе передаётся следующая информация:\n- **status** — статус регистрации. Работать с платёжными ссылками можно только при наличии статуса REG.\n- **isActive** — статус готовности к работе у торговой точки. Работать с платёжными ссылками только при наличии статуса true.\n- **mcc** — MCC-код, соответствующий вашей деятельности.\n- **rate** — сумма взимаемой комиссии, при платеже на карту.\n- **name** — наименование торговой точки.\n- **url** — адрес сайта регистрации торговой точки.\n- **merchantId** — идентификатор торговой точки.\n- **terminalId** — идентификатор интернет-эквайринга.\n- **paymentModes** — доступные способы оплаты у торговой точки.\n- **cashbox** — информация о наличии подключённой онлайн-кассы.\n\n### Получение списка операций по платёжным ссылкам\n\nМетод [Get Payment Operation List](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_payment_operation_list_acquiring__apiVersion__payments_get) позволяет получить список всех операций и их статусы.  \nЛучше всего указывать значения дат _fromDate_ и _toDate_, чтобы не получить огромный список операций за всё время работы с Точкой.\n\nС методом [Get Payment Operation Info](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_payment_operation_info_acquiring__apiVersion__payments__operationId__get) вы сможете получить информацию по одной конкретной операции.  \nДля вызова этого метода понадобится `operationId`, который вы можете получить из нашего вебхука с событием _acquiringInternetPayment_, либо найдя нужную операцию в полученном методом _Get Payment Operation List_ списке.\n\n### Несколько особенностей в работе с платёжными ссылками\n\n- если у вас подключено несколько торговых точек для работы с интернет-эквайрингом, то указывать `merchantId` нужно обязательно. Этот параметр можно получить, вызвав метод [Get Retailers](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_retailers_acquiring__apiVersion__retailers_get). merchantId для работы с платёжными ссылками состоит из 15 цифр.\n- для вызова большинства методов по работе с платёжными ссылками нужен параметр `customerCode` — это ваш уникальный код в системе банка.  \nУзнать его можно, вызвав метод [Get Customers List](/doc/v2/redoc/tag/Rabota-s-klientami#get_customers_list_open_banking__apiVersion__customers_get). Параметр customerCode необходимо брать из поля customerType: \"Business\".\n- платёжная ссылка действует 168 часов. С момента перехода по ссылке у покупателя есть 1 час на оплату. По истечении этого срока он увидит ошибку, но при повторном переходе по ссылке сформируется новая рабочая страничка для оплаты.\n\n### Возврат платежа, поступившего через платёжную ссылку\n\nПроводить возврат можно только для платежей в статусе `APPROVED`. \n\nВозврат может быть как полным, так и частичным. Главное — чтобы сумма возврата не превышала сумму поступления на расчётный счёт.\n\nДля возврата платежа, полученного через платёжную ссылку, нужно вызвать метод [Refund Payment Operation](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#refund_payment_operation_acquiring__apiVersion__payments__operationId__refund_post) и передать `operationId`.\n\nПолучить `operationId` можно несколькими способами:\n- Вызвать метод [Get Payment Operation List](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_payment_operation_list_acquiring__apiVersion__payments_get) и найти нужную вам транзакцию, взяв operationId.\n- Если у вас настроен вебхук с событием [acquiringInternetPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki), в теле вебхука мы передадим operationId, который можно использовать для возврата.\n\n### Скорость возврата платежа\nЕсли платёж поступил с помощью QR-кода, то возврат происходит практически мгновенно.  \nЕсли платили банковской картой, то возврат обычно проходит за 3-7 календарных дней, хотя по правилам платёжных систем может занимать до 30 дней.\n\n## Подписки (рекуррентные платежи)\n\nДля работы с подписками должны быть выданы разрешения `MakeAcquiringOperation`, `ReadAcquiringData` и `ReadCustomerData`.\n\nПодписки (рекуррентные платежи) — это удобный сервис автооплаты, который позволяет вашим клиентам подписаться на регулярные платежи за товары или услуги.  \nБлагодаря возможностям openAPI ваш бизнес может настроить создание ссылок, автоматизирующих процесс оплаты подписок. Клиенты совершают первую транзакцию, а потом в течение заданного периода деньги будут списываться с их карты без дополнительных действий.\n\n<details>\n    <summary>метод по работе подписок без фискализации чеков</summary>\n\n### Подключение подписок\n\nПеред работой с API платёжных ссылок нужно оставить заявку на подключение интернет-эквайринга внутри интернет-банка. Сделать это может руководитель или распорядитель с правом подписи в разделе «Сервисы» → [«Интернет-эквайринг»](https://i.tochka.com/a/internet_acquiring/).\n\nВ течение рабочего дня с момента заявки с вами свяжутся специалисты для подтверждения заявки.\n\nПроверить статус подключения интернет-эквайринга можно с помощью метода [Get Retailers](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_retailers_acquiring__apiVersion__retailers_get)\\.  \nСтатус REG и значение isActive: «true» будут означать, что настройка завершена — можно приступать к работе с платёжными ссылками.\n\n### Создание подписки (рекуррентного платежа) без фискализации чеков\n\nДля создания платёжной ссылки нужно вызвать метод [Create Subscription](/doc/v2/redoc/tag/Rabota-s-podpiskami#create_subscription_acquiring__apiVersion__subscriptions_post) и передать:  \n\n- **amount** — сумма платежа в рублях.  \n- **customerCode** — уникальный код клиента.  \n- **purpose** — назначение платежа, которое увидит перешедший по ссылке покупатель.  \n\n### Дополнительно можно указать\n\n- **redirectUrl** — URI-адрес, на который нужно переправить покупателя после оплаты.  \n- **failRedirectUrl** — URI-адрес, на который нужно переправить покупателя, если оплата не прошла.  \n- **saveCard** — параметр, указывающий, будет ли покупателю предложено сохранить карту для следующих платежей.  \n- **consumerId** — идентификатор покупателя. Если ранее был указан параметр saveCard и клиент согласился с сохранением карты, то из ответа можно взять consumerId и подставить в запрос, чтобы покупатель мог выбрать карту, по которой уже происходила оплата.  \n- **merchantId** — идентификатор торговой точки в интернет-эквайринге. Параметр является обязательным, если у вас подключено несколько торговых точек для работы с интернет-эквайрингом.  \n\n**Options** — объект, содержащий опции подпски.  \n- **trancheCount** — количество списаний по подписке. По умолчанию установлено 12 списаний.  \n- **period** — периодичность списания. По умолчанию устанавливается месяц (Month).  \n- **daysInPeriod** — длина периодичности списания в днях. Работает только с периодом в днях (Day).  \n\nЧтобы сразу узнать о поступлении оплаты, вы можете настроить вебхук с событием [acquiringInternetPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki) на свой URL.\n\n</details>\n\n<details>\n    <summary>метод по работе подписок с фискализацией чеков от партнёров Точки</summary>\n\n### Подключение подписок\n\nПеред работой с API платёжных ссылок нужно отправить заявку на подключение интернет-эквайринга и выбрать партнёра, который будет фискализировать ваши чеки по 54-ФЗ.\n\nСделать это может руководитель или распорядитель с правом подписи в разделе «Сервисы» →  [«Интернет-эквайринг»](https://i.tochka.com/a/internet_acquiring/).  \n\nВ течение рабочего дня с момента заявки с вами свяжутся специалисты для подтверждения заявки.\n\nПроверить статус подключения интернет-эквайринга можно с помощью метода [Get Retailers](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_retailers_acquiring__apiVersion__retailers_get)\\.  \nСтатус REG и значение isActive: «true» будут означать, что настройка завершена — можно приступать к работе с платёжными ссылками.\n\n### Создание подписки (рекуррентного платежа) с фискализацией чеков\n\nДля создания ссылки нужно вызвать метод [Create Subscription With Receipt](/doc/v2/redoc/tag/Rabota-s-podpiskami#create_subscription_with_receipt_acquiring__apiVersion__subscriptions_with_receipt_post) и передать:\n\n- **amount** — сумма платежа в рублях;\n- **customerCode** — уникальный код клиента;\n- **purpose** — назначение платежа, которое увидит перешедший по платёжной ссылке покупатель.\n\n**Client** — объект, содержащий данные покупателя.  \n- **Email** — электронная почта покупателя, на которую будет отправлен чек.  \n \n**Items** — объект, содержащий список товаров в заказе.  \n- **name** — название товара или услуги.  \n- **amount** — цена за единицу товара или услуги.  \n- **quantity** — количество товаров или оказанных услуг.  \n\n### Дополнительно можно указать\n\n- **redirectUrl** — URI-адрес, на который нужно переправить покупателя после оплаты;\n- **failRedirectUrl** — URI-адрес, на который нужно переправить покупателя если оплата не прошла;\n- **saveCard** — параметр, указывающий, будет ли покупателю предложено сохранить карту для следующих платежей;\n- **consumerId** — идентификатор покупателя. Если ранее был указан параметр saveCard и клиент согласился с сохранением карты, то из ответа можно взять consumerId и подставить в запрос, чтобы покупатель мог выбрать карту, по которой уже происходила оплата;\n- **merchantId** — идентификатор торговой точки в интернет-эквайринге. Параметр является обязательным, если у вас подключено несколько торговых точек для работы с интернет-эквайрингом;\n- **taxSystemCode** — система налогообложения, которая используется в вашей организации;\n\n**Options** — объект, содержащий опции подпски.  \n- **trancheCount** — количество списаний по подписке. По умолчанию установлено 12 списаний.  \n- **period** —периодичность списания. По умолчанию устанавливается месяц (Month).  \n- **daysInPeriod** — длина периодичности списания в днях. Работает только с периодом Day.  \n\n**Client** — объект, содержащий данные покупателя.  \n- **name** — наименование плательщика. Для юрлица — название организации, для ИП и физического лица — ФИО.  \n- **phone** — телефон покупателя для отправки чека.  \n\n**Items** — объект, содержащий список товаров в заказе.  \n- **vatType** — ставка НДС в позициях.  \n- **paymentMethod** — тип оплаты. full_payment — полная оплата, full_prepayment — полная предоплата.  \n- **paymentObject** — признак предмета расчёта. goods — товары, service — услуги, work — работа.  \n- **measure** - единица измерения. По умолчанию ставится штуки.  \n\n**Supplier** — объект, содержащий информацию о поставщике. Если вы работаете как агент и продаёте не свой товар, 54-ФЗ требует указывать в чеке данные поставщика.  \n- **phone** — номер телефона поставщика.  \n- **name** — наименование поставщика.  \n- **taxCode** — ИНН поставщика.  \n\nЧтобы сразу узнать о поступлении оплаты, вы можете настроить вебхук с событием [acquiringInternetPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki) на свой URL.\n\n</details>\n\n### Работа с подписками без графика списания\n\nЕсли вы хотите самостоятельно управлять периодичностью и суммами списаний, можно передать boolean параметр `recurring` со значением `true`. Так вы создадите подписку без графика и сможете получать оплату подписки в нужные вам даты.  \n\nЧтобы провести списание, нужно вызвать метод [Charge Subscription](/doc/v2/redoc/tag/Rabota-s-podpiskami#charge_subscription_acquiring__apiVersion__subscriptions__operationId__charge_post) и передать:  \n**operationId** — идентификатор подписки, полученный при создании подписки.  \n**amount** — сумма платежа.  \n\n**Обратите внимание**: создать подписку с параметром recurring и объектом Options нельзя.  \n\n### Дополнительные методы для работы с подписками (рекуррентными платежами)\n\nМетод [Get Subscription List](/doc/v2/redoc/tag/Rabota-s-podpiskami#get_subscription_list_acquiring__apiVersion__subscriptions_get) позволяет получать все созданные подписки. В ответе будут показаны как активные, так и неактивные подписки. Для удобства можно использовать параметры `page` — номер страницы и `perPage` — количество записей на странице.  \nМетод [Get Subscription Status](/doc/v2/redoc/tag/Rabota-s-podpiskami#get_subscription_status_acquiring__apiVersion__subscriptions__operationId__status_get) покажет актуальный статус подписки. Для вызова этого метода необходимо передать `operationId` — идентификатор подписки.  \nМетод [Set Subscription Status](/doc/v2/redoc/tag/Rabota-s-podpiskami#set_subscription_status_acquiring__apiVersion__subscriptions__operationId__status_post) позволяет отключить подписку, переведя её в статус `Cancelled`\\.  \nОбратите внимание, что при отключении подписки вернуть её назад не получится, и придётся создавать новую.  \n\n### Несколько особенностей в работе с подписками (рекуррентными платежами)\n\n- возврат платежа за подписку можно провести только в интернет-банке;\n- продлить подписку пока нельзя. Если она закончится, нужно создать новую;\n- если у вас подключено несколько торговых точек для работы с интернет-эквайрингом, то указывать `merchantId` нужно обязательно. Этот параметр можно получить, вызвав метод [Get Retailers](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_retailers_acquiring__apiVersion__retailers_get). merchantId для работы с подписками (рекуррентными платежами) состоит из 15 цифр.\n- для вызова большинства методов по работе с подписками нужен параметр `customerCode` — это ваш уникальный код в системе банка.  \nУзнать его можно, вызвав метод [Get Customers List](/doc/v2/redoc/tag/Rabota-s-klientami#get_customers_list_open_banking__apiVersion__customers_get). Параметр customerCode необходимо брать из поля customerType: \"Business\".\n- ссылка для подключения подписки (рекуррентных платежей) действует 168 часов. С момента перехода по ссылке у покупателя есть 1 час на оплату. По истечении этого срока он увидит ошибку, но при повторном переходе по ссылке сформируется новая рабочая страничка для оплаты.\n- сейчас можно создать подписку (рекуррентный платёж) только для приёма платежей с банковских карт.\n\n## Выставление счетов и создание закрывающих документов\n\nДля выставления счетов и создания закрывающих документов нужно разрешение `ManageInvoiceData` и `ReadCustomerData`.\n\n### Выставление счетов\n\nСоздать счёт на оплату можно с помощью метода [Create Invoice](/doc/v2/redoc/tag/Rabota-s-vystavleniem-schetov#create_invoice_invoice__apiVersion__bills_post).\n \n- В параметре SecondSide укажите данные контрагента, которому вы выставляете счёт.\n- В параметре Content укажите содержимое счёта на оплату.\n- В ответе мы передадим documentId, который может понадобиться для получения информации о выставленном счёте, связывания счёта с закрывающим документом, удаления счёта или отправки его на электронную почту.\n\n> Для вызова метода нужен `customerCode`. Чтобы узнать customerCode, нужно вызвать метод [Get Customers List](/doc/v2/redoc/tag/Rabota-s-klientami#get_customers_list_open_banking__apiVersion__customers_get)\\.  \nПараметр customerCode необходимо брать из поля customerType: \"Business\".\n\nПолучить выставленный счёт в PDF можно с помощью метода [Get Invoice](/doc/v2/redoc/tag/Rabota-s-vystavleniem-schetov#get_invoice_invoice__apiVersion__bills__customerCode___documentId__file_get).\n\nУзнать, оплачен ли выставленный счёт, можно с помощью метода [Get Invoice Payment Status](/doc/v2/redoc/tag/Rabota-s-vystavleniem-schetov#get_invoice_payment_status_invoice__apiVersion__bills__customerCode___documentId__payment_status_get). Нужная информация будет в полученном в ответ параметре paymentStatus.\n\n- `payment_waiting` — оплаты счёта ещё не было;\n- `payment_expired` — оплата счёта просрочена. Статус может появиться только если при выставлении счёта с помощью метода Create Invoice вы передавали параметр `paymentExpiryDate`;\n- `payment_paid` — оплата по счёту прошла.\n\nОбратите внимание: для смены статуса мы сличаем входящие платежи со счетами по ИНН контрагента, сумме и наличию номера счёта в назначении. \n\nЕсли от контрагента придёт платёж на нужную сумму, то меняем статус оплаты счёта. Если сумма будет отличаться — например, при частичной оплате или переплате — меняться автоматически статус не будет.  \nСтатус можно изменить вручную прямо в интернет-банке, раздел «[Счета, акты, накладные](https://i.tochka.com/bank/m/document_flow)».\n\nПосле создания счёт можно отправить на электронную почту контрагента через метод [Send Invoice To Email](/doc/v2/redoc/tag/Rabota-s-vystavleniem-schetov#send_invoice_to_email_invoice__apiVersion__bills__customerCode___documentId__email_post).\n\nЕсли вам больше не нужен счёт или вы передумали отправлять его контрагенту, то его можно удалить с помощью метода [Delete Invoice](/doc/v2/redoc/tag/Rabota-s-vystavleniem-schetov#delete_invoice_invoice__apiVersion__bills__customerCode___documentId__delete).\n\n### Выставление закрывающих документов\n\nСформировать акт, счёт-фактуру или накладную можно с помощью метода [Create Closing Document](/doc/v2/redoc/tag/Rabota-s-zakryvayushimi-dokumentami#create_closing_document_invoice__apiVersion__closing_documents_post).\n\n- В параметре SecondSide укажите данные контрагента, которому предназначен документ.\n- В параметре Content укажите указать содержимое акта, счёт-фактуры или накладной.\n- В ответе мы передадим documentId, который может понадобиться для получения PDF закрывающего документа, удаления или отправки документа на электронную почту.\n\nПри необходимости можно связать выставленный счёт с закрывающим документом. Для этого заполните параметр `documentId`, указав в нём documentId из ответа метода Create Invoice.\n\nДля получения PDF с закрывающим документом испоьзуйте метод [Get Closing Document](/doc/v2/redoc/tag/Rabota-s-zakryvayushimi-dokumentami#get_closing_document_invoice__apiVersion__closing_documents__customerCode___documentId__file_get).\n\nПосле создания закрывающий документ можно отправить на электронную почту контрагента через метод [Send Closing Documents To Email](/doc/v2/redoc/tag/Rabota-s-zakryvayushimi-dokumentami#send_closing_documents_to_email_invoice__apiVersion__closing_documents__customerCode___documentId__email_post).\n\nЕсли вам больше не нужен закрывающий документ или вы передумали отправлять его контрагенту, документ можно удалить с помощью метода [Delete Closing Documents](/doc/v2/redoc/tag/Rabota-s-zakryvayushimi-dokumentami#delete_closing_documents_invoice__apiVersion__closing_documents__customerCode___documentId__delete).\n\n## Выписки\nДля работы с выписками должно быть выдано разрешение `ReadStatements`.\n\nС помощью методов вы можете запросить выписку по счёту в формате JSON. Как и в выписке из интернет-банка, в ней содержатся:\n - остаток на начало и конец заданного периода;\n - список транзакций.\n\n### Чтобы запросить выписку, выполните следующий запрос:\n[Init Statement](/doc/v2/redoc/tag/Rabota-s-vypiskami#init_statement_open_banking__apiVersion__statements_post) — этот метод позволяет создавать выписку по счёту за определённый период: в запросе нужно указать `accountId`, дату начала и конца периода.  \nВ ответ на запрос вы получите идентификатор выписки `statementId`.\n\nДалее вызовите один из следующих методов:\n - [Get Statement](/doc/v2/redoc/tag/Rabota-s-vypiskami#get_statement_open_banking__apiVersion__accounts__accountId__statements__statementId__get) — метод, который формирует конкретную выписку. Он запрашивается через идентификатор statementId.\n - [Get Statements List](/doc/v2/redoc/tag/Rabota-s-vypiskami#get_statements_list_open_banking__apiVersion__statements_get) — метод, вызывающий список всех доступных выписок.\n\n### Некоторые особенности:\n\nМетод [Init Statement](/doc/v2/redoc/tag/Rabota-s-vypiskami#init_statement_open_banking__apiVersion__statements_post) отрабатывает асинхронно.  \nОтражаются только операции, находящиеся в финальном статусе — `Ready`. Выписки, инициированные этим методом, доступны для получения в течение 24 часов, после — они удаляются.\n\nОбщая сумма транзакций в теле выписки отдаются двумя полями: `amount` — в валюте счёта и `amountNat` — в рублях при пересчёте по курсу Центробанка.\nИсходящие и входящие платежи отличаются по полю `creditDebitIndicator`, где `credit` — приход, а `debit` — расход.\n\nВ некоторых случаях в списке операций в поле `transactionTypeCode` вместо платёжного поручения указан `мемориальный ордер.`  \n\nМемориальный ордер — это вид платёжного документа, означающий, что банк обязан перечислить деньги получателю.\nВ таком статусе платёж ещё не отправлен вашему контрагенту — он только проходит все статусы перед отправкой.  \n\nДля того, чтобы получить актуальный статус платежа, нужно запросить выписку повторно.  Обычно уже через несколько секунд в новой выписке будет указан статус «Платёжное поручение».\n\n## Платежи\nДля работы с платежами должны быть выданы разрешения `CreatePaymentForSign` `CreatePaymentOrder`.\n\nС помощью метода [Create Payment For Sign](/doc/v2/redoc/tag/Rabota-s-platezhami#create_payment_for_sign_payment__apiVersion__for_sign_post) можно создать и отправить на подпись платёжку. Она будет в интернет-банке Точки — раздел «На подпись».\n\nМетод [Create Payment](/doc/v2/redoc/tag/Rabota-s-platezhami#create_payment_payment__apiVersion__order_post) позволяет создавать и подписывать платёж в интегрированном приложении, без необходимости дополнительно заходить в интернет-банк Точки.  \nПри вызове метода создаётся ссылка для перехода на страницу с параметрами платежа. Платёж нужно подписать кодом, который приходит в смс на номер авторизации.\n\nМетод [Get Payment For Sign List](/doc/v2/redoc/tag/Rabota-s-platezhami#get_payment_for_sign_list_payment__apiVersion__for_sign_get) поможет проверить все платежи из раздела «На подпись» интернет-банка. В ответе вы получите всю информацию, которая содержится в платёжном поручении.  \n\n**Обратите внимание**, что при вызове этого метода отображаются платежи, созданные как внутри интернет-банка, так и по API. Информация о платежах на подпись актуальна только на момент вызова метода.\n\nМетод [Get Payment Status](/doc/v2/redoc/tag/Rabota-s-platezhami#get_payment_status_payment__apiVersion__status__requestId__get) проверяет статус создания платежа.  \nРаботает для платежей, созданных методами Create Payment For Sign и Create Payment.  \n_Метод не отдаёт статус отправки платежа из банка._\n\n## СБП — Система быстрых платежей\nОплата через QR-коды — это замена интернет-эквайрингу, которая позволяет вам получать оплату от физлиц и экономить на банковских комиссиях.  \nВы можете зарегистрировать вашу торговую точку в Системе быстрых платежей, генерировать QR-коды и делать возвраты через API.\n\nДля работы с Системой быстрых платежей должны быть выданы разрешения `EditSBPData` `ReadSBPData`.\n\n### Немного определений\n\n**Динамический QR-код** — одноразовый QR-код с уникальным идентификатором.  \nПо этому коду можно принять оплату только один раз, и сумма платежа прописывается при создании.  \nПо умолчанию срок действия динамического QR-кода составляет 72 часа, но его можно увеличить или уменьшить, поменяв время в минутах в параметре ttl.\n\n**Кассовый QR-код** — подтип статического QR-кода, имеющий признаки динамического QR-кода. При создании кассовой ссылки создаётся идентификатор QR-кода, по которому можно проводить неограниченное количество оплат.  \nПосле каждой оплаты продавцу будет необходимо активировать ссылку заново.  \nСрок действия кассового QR-кода по умолчанию 5 минут. Если передать атрибут ttl, его можно увеличить до 20 минут.\n\n**Статический QR-код** — многоразовый QR-код с одним идентификатором. Код действует бессрочно и по нему можно провести неограниченное количество оплат.  \nСтатический QR-код можно создать с указанием цены — покупатели будут платить только указанную сумму. Или вы можете при создании QR-кода не задавать сумму оплаты: тогда она сможет быть разной при каждой операции, но покупателю придётся вводить её вручную.\n\n**B2B QR-код** — одноразовый QR-код с уникальным идентификатором, который используется для приёма платежей исключительно от ИП и организаций.  \nКаждый такой код уникальный: принять платёж на сумму, указанную при его создании, можно только один раз.  \nПо умолчанию B2B QR-код действует 72 часа, но срок можно увеличить или уменьшить, указав время в минутах в параметре ttl.\n\n**ТСП** — это торгово-сервисное предприятие, то есть магазины или иные торговые точки.\n\n**legalId** — уникальный идентификатор юрлица в Системе быстрых платежей.\n\n**merchantId** —  уникальный идентификатор ТСП в Системе быстрых платежей.\n\n**accountId** — номер счёта и БИК через слеш, например `40802810802000000008/044525104`. \n\n### Как зарегистрировать юрлицо и торговые точки\nЧтобы проверить, зарегистрирована ли ваша компания в Системе быстрых платежей, вызовите метод [Get Customer Info](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-YuL#get_customer_info_sbp__apiVersion__customer__customerCode___bankCode__get)\\.  \nЕсли регистрация в СБП есть, вам останется только получить информацию о `legalId` и `merchantId` и приступить к работе.\n\nЕсли регистрации в СБП нет, пройдите её и создайте торговую точку одним из следующих методов: \n\n#### Регистрация юрлица в СБП через метод [Register Legal Entity](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-YuL#register_legal_entity_sbp__apiVersion__register_sbp_legal_entity_post)\\.  \n\nВ запросе необходимо передать:  \n- **customerCode** — уникальный код клиента;  \n- **bankCode** — БИК банка. У Точки это 044525104.\n\nПри регистрации в СБП юрлицу присваивается уникальный идентификатор — `legalId`.\n\n#### Регистрация нового ТСП через метод [Register Merchant](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-TSP#register_merchant_sbp__apiVersion__merchant_legal_entity__legalId__post)\\.  \n\nВ запросе необходимо передать:  \n- **legalId** — идентификатор зарегистрированного юрлица в СБП;  \n- **address** — юридический адрес компании или адрес ТСП;  \n- **city** — город, в котором находится ТСП;  \n- **countryCode** — нужно указать RU;  \n- **countrySubDivisionCode** — код региона-регистрации юридического лица, это первые две цифры кода ОКТМО;  \n- **zipCode** — индекс;  \n- **brandName** — название ТСП;  \n- **capabilities** — возможности ТСП по формированию QR-кодов:  \n - **001** — возможность формировать только статические QR-коды;  \n - **010** — возможность формировать только динамические QR-коды;  \n - **011** — возможность формировать только статические и динамические QR-коды;  \n - **100** — возможность формировать только кассовые QR-коды;  \n - **101** — возможность формировать только статические и кассовые QR-коды;  \n - **110** — возможность формировать только динамические и кассовые QR-коды;  \n - **111** — возможность формировать статические, динамические и кассовые QR-коды.  \n- **mcc** — MCC-код, соответствующий вашей деятельности.  \n\nМы рекомендуем указывать `capabilities` — 111, чтобы вам не пришлось заново проводить регистрацию ТСП, если потребуется работать с другим типом QR-кодов.  \nТакже можно добавить `contactPhoneNumber` — номер телефона ТСП.\n\nПосле регистрации ТСП каждой торговой точке присваивается уникальный идентификатор — `merchantId`\\.  \nЧтобы получить список всех ТСП и информацию по ним можно вызвать метод: [Get Merchants List](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-TSP#get_merchants_list_sbp__apiVersion__merchant_legal_entity__legalId__get).\n\n#### Регистрация юрлица или ТСП в СБП через Точку  \n\nЗарегистрировать юрлицо и создать торговую точку можно в интернет-банке Точки — раздел «[QR-платежи](https://i.tochka.com/bank/m/products/sbp/registration)».\\.  \nРаздел доступен только руководителю и распорядителю с правом подписи.\n\n<details>\n    <summary>Как сгенерировать статические и динамические QR-коды</summary>\n\nQR-коды нужны для получения оплат от физлиц. Их можно сформировать только для торговых точек, которые уже зарегистрированы в СБП.  \n\nДля регистрации динамического или статического QR-кода выполните запрос: [Register Qr Code](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-QR-kodami#register_qr_code_sbp__apiVersion__qr_code_merchant__merchantId___accountId__post)\\.  \n\nВ запросе необходимо передать:  \n- **accountId** — уникальный и неизменный идентификатор счёта юрлица.  \n- **merchantId** — идентификатор ТСП.  \n- **paymentPurpose** — назначение платежа. Покупатель его увидит при считывании QR-кода.  \n- **amount** — сумма платежа в копейках. Обязательно при создании динамических QR-кодов, для статических QR-кодов данное поле можно не заполнять.  \n- **qrcType** — тип запрашиваемого QR-кода:  \n - **qrcType**: 01 — статический QR-код;  \n - **qrcType**: 02 — динамический QR-код.  \n- **imageParams** — параметры изображения:  \n - **width** — ширина изображения (>=200, по умолчанию: 300);  \n - **height** — высота изображения (>=200, по умолчанию: 300).   \n\nПри создании статических и динамических QR-кодов можно указать дополнительные поля:  \n- **currency** — валюта операции. На данный момент можно указать только RUB.  \n- **sourceName** — название вашей интеграции. Эту информацию покупатель не увидит, можно указывать для аналитики.  \n- **ttl** — время действия QR-кода в минутах, можно указать от 1 до 129 600 минут. Данный параметр есть только для динамических QR-кодов. Если при создании динамического QR-кода не передать этот параметр, его срок действия составит 72 часа.  \n- **redirectUrl** — это ссылка в формате https, перенаправляющая пользователя на выбранную страницу после проведения оплаты.  \n\nЕсли ваши клиенты оплачивают покупки через приложение, удобнее перенаправлять их по ссылке для оплаты, а не показывать изображение QR-кода.  \nДля этого в ответе метода [Register Qr Code](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-QR-kodami#register_qr_code_sbp__apiVersion__qr_code_merchant__merchantId___accountId__post) мы передаём атрибут `payload`.  \n\nСтатус динамического QR-кода можно отследить с помощью метода [Get Qr Codes Payment Status](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-QR-kodami#get_qr_codes_payment_status_sbp__apiVersion__qr_codes__qrc_ids__payment_status_get) в течение периода использования QR-кода или 24 часов с момента оплаты. По истечению этого времени узнать статус не получится.  \nДля статических QR-кодов статус отследить не получится, так как этот QR-код всегда активен.\n</details>\n\n<details>\n    <summary>Как сгенерировать кассовые QR-коды</summary>\nQR-коды нужны для получения оплат от физлиц. Их можно сформировать только для торговых точек, которые уже зарегистрированы в СБП.  \n\n\nДля регистрации кассового QR-кода выполните запрос: [Register Cashbox Qrcode](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-kassovymi-QR-kodami#register_cashbox_qrcode_sbp__apiVersion__cashbox_qr_code_post)\n\nВ запросе необходимо передать:  \n- **accountId** — уникальный и неизменный идентификатор счёта юрлица;  \n- **merchantId** — идентификатор ТСП;  \n- **imageParams** — параметры изображения:  \n - **width** — ширина изображения (>=200, по умолчанию: 300);  \n - **height** — высота изображения (>=200, по умолчанию: 300).  \n\nДополнительно можно указать **redirectUrl** — это ссылка в формате https, перенаправляющая пользователя на выбранную страницу после проведения оплаты.  \n\nИз ответа необходимо забрать и сохранить следующие параметры:  \n- **qrcId** — идентификатор QR-кода;  \n- **payload** — ссылка для перенаправления пользователей;  \n- **image** — изображение QR-кода.  \nЭти параметры закрепляются для кассовой ссылки.  \n\nЧтобы принимать оплату по QR-коду, его нужно каждый раз активировать с помощью метода: [Activate Cashbox Qrcode](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-kassovymi-QR-kodami#activate_cashbox_qrcode_sbp__apiVersion__cashbox_qr_code__qrcId__activate_post)\\.  \nВ запросе необходимо передать:  \n- **qrcId** — идентификатор QR-кода, полученный в методе Register Cashbox Qrcode;  \n- **amount** — сумма платежа в копейках.  \n\nДополнительно в запросе можно указать:  \n- **currency** — валюта операции. На данный момент можно указать только RUB.  \n- **paymentPurpose** — назначение платежа. Покупатель его увидит при считывании QR-кода.  \n- **ttl** — время действия QR-кода в минутах, можно указать от 5 до 20 минут. Если не передавать этот параметр, кассовый QR-код по умолчанию будет действовать 5 минут.  \nКогда вы активируете QR-код, покупатель сможет провести оплату. После оплаты или по истечению ttl, QR-код деактивируется — необходимо вызвать метод Activate Cashbox Qrcode заново.  \n\nЕсли покупатель передумал совершать оплату или больше нет необходимости в активном QR-коде, можно вручную вызвать метод на деактивацию QR-кода: [Deactivate Cashbox Qrcode](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-kassovymi-QR-kodami#deactivate_cashbox_qrcode_sbp__apiVersion__cashbox_qr_code__qrcId__deactivate_post).\n\nПри работе с кассовыми QR-кодами есть возможность изменить расчётный счёт для зачисления денег — но в рамках одной компании. Изменить расчётный счёт одной компании на счёт другой не получится.\n\nДля изменения счёта необходимо вызвать метод [Change Cashbox Qrcode Account](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-kassovymi-QR-kodami#change_cashbox_qrcode_account_sbp__apiVersion__cashbox_qr_code__qrcId__account_post) и передать следующие параметры:  \n- **qrcId** — идентификатор QR-кода, полученный в методе Register Cashbox Qrcode;  \n- **accountId** — уникальный и неизменный идентификатор счёта юрлица.  \n\nЧтобы посмотреть информацию обо всех выпущенных кассовых QR-кодах, вызовите метод [Get Cashbox Qrcode List](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-kassovymi-QR-kodami#get_cashbox_qrcode_list_sbp__apiVersion__cashbox_qr_code_merchant__merchantId___accountId__get)\\.  \nЧтобы посмотреть информацию по конкретному кассовому QR-коду, вызовите метод [Get Cashbox Qrcode](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-kassovymi-QR-kodami#get_cashbox_qrcode_sbp__apiVersion__cashbox_qr_code__qrcId__post)\\.  \nОбратите внимание, что необязательные параметры передаются, только когда QR-код активен — по нему ещё не прошла оплата или ещё не закончился `ttl`.\n</details>\n\n<details>\n    <summary>Как сгенерировать B2B QR-коды</summary>\nB2B QR-коды нужны для приёма платежей от ИП и организаций. Формировать их можно только для торговых точек, которые уже зарегистрированы в СБП.  \n\nДля регистрации B2B QR-кода выполните запрос [Register B2B Qr Code](/doc/v2/redoc/tag/Servis-SBP:-rabota-s-B2B-QR-kodami#register_b2b_qr_code_sbp__apiVersion__b2b_qr_code_merchant__merchantId___accountId__post) с такими параметрами:  \n- **accountId** — уникальный и неизменный идентификатор счёта юрлица;  \n- **merchantId** — идентификатор торговой Точки в СБП (ТСП);  \n- **paymentPurpose** — назначение платежа, которое покупатель увидит при считывании QR-кода;  \n- **amount** — сумма платежа в копейках. Максимальная сумма для B2B QR-кода составляет 1 миллион рублей;  \n- **sourceName** — название вашей интеграции. Покупатель его не увидит, можно указывать для аналитики;  \n- **takeTax** — информация об НДС (True — для получения платежей с НДС, false — без НДС).  \n\nПри создании B2B QR-кодов можно указать дополнительные параметры:  \n- **totalTaxAmount** — сумма НДС в копейках. Необходимо, если в параметре takeTax стоит true.  \n- **ttl** — время действия QR-кода в минутах, можно указать от 1 до 129 600 минут. Если при создании QR-кода не передать этот параметр, его срок действия составит 72 часа.  \n- **redirectUrl** — ссылка в формате https, на которую нужно перенаправить пользователя после проведения оплаты.  \n- **uip** —  назначаемый получателем уникальный идентификатор платежа.  \n\nЧтобы посмотреть информацию по конкретному B2B QR-коду, вызовите метод [Get B2B Qr Code](/doc/v2/redoc/tag/Servis-SBP:-rabota-s-B2B-QR-kodami#get_b2b_qr_code_sbp__apiVersion__b2b_qr_code__qrcId__get).\n\nЧтобы сразу узнать о поступлении оплаты, вы можете настроить вебхук с событием [incomingSbpB2BPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki) на свой URL.\n</details>\n\n### Возврат через СБП\n\n> На данный момент вернуть платежи поступившие через СБП можно только по динамическим QR-кодам.  \nПлатежи по статическим, кассовым и B2B QR-кодам возвращаются через интернет-банк Точки.\n\nПринятые по QR-кодам платежи в статусе `Accepted` можно возвращать покупателю через Систему быстрых платежей.\n\nВозврат может быть как полным, так и частичным. Главное — чтобы его сумма не превышала сумму поступления на расчётный счёт.\n\n1. Получите refTransactionId\n\n- Если у вас подключён вебхук с событием [incomingSbpPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki), то параметр _refTransactionId_ мы передадим при зачислении денег.\n\n- Если у вас нет подключённого вебхука с событием incomingSbpPayment, используйте метод [Get Payments](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-vozvratami#get_payments_sbp__apiVersion__get_sbp_payments_get) — он найдёт платёж, который нужно вернуть.\n\nВ запросе укажите необходимый промежуток времени через поля `fromDate` и `toDate`. Период поиска не ограничен, но удобнее искать за день, неделю или месяц — в зависимости от того, что сообщил покупатель.  \nДля фильтрации можете указать `qrcId` и `page`. \n\nВ ответе вам нужно взять параметры refTransactionId и qrcId — идентификатора QR-кода в СБП.\n\n2. Вызовите метод [Start Refund](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-vozvratami#start_refund_sbp__apiVersion__refund_post) — он отправляет запрос на возврат платежа по СБП. Укажите в запросе  \n\n- **accountCode** и **bankCode** — это счёт и БИК вашей компании, то есть плательщика, со счёта которого происходит возврат.\n- **amount** — сумма возврата. Указывается в рублях, а не копейках.\n- **qrcId** — идентификатор QR-кода по которому зачислились деньги.\n- **purpose** — назначение платежа — можно не заполнять, если ваш покупатель резидент РФ. Если платёж нужно вернуть нерезиденту, обязательно заполните поле кодом валютной операции {VO99020}. \n\n3. Отследите статус возврата платежа с помощью метода [Get Refund Data](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-vozvratami#get_refund_data_sbp__apiVersion__refund__request_id__get) .  \nФинальный успешный статус  — `Accepted`. Если возврат не прошёл, будет статус `Rejected`.\n\n\n# Песочница\n\n### Для чего нужна\nПесочница — это специальный режим работы OpenAPI для разработки. В нём все данные заменены на тестовые.\n\n### Как получить доступ\nК песочнице не нужно получать отдельный доступ, достаточно просто изменить url в запросах с `https://enter.tochka.com/uapi` на `https://enter.tochka.com/sandbox/v2`\n\nВместо токена для авторизации в заголовке `Authorization` нужно использовать строку `working_token`, которая даёт все разрешения во всех методах. Пример: `Authorization: Bearer working_token`.\nЛюбая другая строка в этом заголовке определяется как отсутствие разрешения на выполнения метода\n\nПример готового окружения для песочницы есть в нашей [коллекции запросов](/doc/v2/redoc/section/Kollekciya-zaprosov)\n\n### Работа с разрешениями\nДля песочницы не нужно создавать разрешения, менять код на токен и обновлять токен.\n`working_token` всегда действителен и предоставляет все разрешения\n\n### Реализованные методы\nСейчас в песочнице можно вызвать все методы из следующих разделов:\n1. [Работа со счетами](/doc/v2/redoc/tag/Rabota-so-schetami)\n2. [Работа с клиентами](/doc/v2/redoc/tag/Rabota-s-klientami)\n3. [Работа с балансами счетов](/doc/v2/redoc/tag/Rabota-s-balansami-schetov)\n4. [Работа с выписками](/doc/v2/redoc/tag/Rabota-s-vypiskami)\n5. [Работа с платежами](/doc/v2/redoc/tag/Rabota-s-platezhami)\n6. [Сервис СБП: Работа с ЮЛ](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-YuL)\n7. [Сервис СБП: Работа с ТСП](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-TSP)\n8. [Сервис СБП: Работа с QR-кодами](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-QR-kodami)\n9. [Сервис СБП: Работа с возвратами](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-vozvratami)\n10. [Работа с выставлением счетов](/doc/v2/redoc/tag/Rabota-s-vystavleniem-schetov)\n11. [Работа с закрывающими документами](/doc/v2/redoc/tag/Rabota-s-zakryvayushimi-dokumentami)\n12. [Работа с платёжными ссылками](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami)\n# Обновления API\n\n## 1.65.1\n18.04.25\n\n- Добавили в методы [Create Payment Operation](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_acquiring__apiVersion__payments_post) и [Create Payment Operation With Receipt](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_with_receipt_acquiring__apiVersion__payments_with_receipt_post) параметр `ttl`, который позволяет задавать срок действия платёжной ссылки в минутах, и объект `Supplier`, в котором можно передавать данные поставщика.  \n- Реализовали возможность создавать подписки без графика списания и с изменением суммы платежа. Для создания такой подписки в методах [Create Subscription](/doc/v2/redoc/tag/Rabota-s-podpiskami#create_subscription_acquiring__apiVersion__subscriptions_post) и [Create Subscription With Receipt](/doc/v2/redoc/tag/Rabota-s-podpiskami#create_subscription_with_receipt_acquiring__apiVersion__subscriptions_with_receipt_post) нужно указывать boolean параметр `recurring` со значением `true`, а для списания денег — вызывать метод [Charge Subscription](/doc/v2/redoc/tag/Rabota-s-podpiskami#charge_subscription_acquiring__apiVersion__subscriptions__operationId__charge_post).  \n- В методы [Get Payment Operation Info](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_payment_operation_info_acquiring__apiVersion__payments__operationId__get) и [Get Payment Operation List](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_payment_operation_list_acquiring__apiVersion__payments_get) добавили параметр `paidAt`, который показывает время оплаты платёжной ссылки, и объект `Order`, содержащий информацию обо всех совершённых платежах и возвратах по платёжной ссылке.\n\n## 1.63.1\n31.03.25\n\n- Добавили [метод для создания B2B QR-кодов](/doc/v2/redoc/tag/Servis-SBP:-rabota-s-B2B-QR-kodami#register_b2b_qr_code_sbp__apiVersion__b2b_qr_code_merchant__merchantId___accountId__post), с которыми у вас появляется возможность принимать платежи от своих контрагентов в любое время дня и ночи.  \n- Добавили [метод для получения информации](/doc/v2/redoc/tag/Servis-SBP:-rabota-s-B2B-QR-kodami#get_b2b_qr_code_sbp__apiVersion__b2b_qr_code__qrcId__get) о созданных B2B QR-кодах.  \n- Создали новый тип вебхука [incomingSbpB2BPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki), чтобы вы всегда были в курсе поступающих по B2B QR-кодам платежей.\n- При [создании счёт-фактуры](/doc/v2/redoc/tag/Rabota-s-zakryvayushimi-dokumentami#create_closing_document_invoice__apiVersion__closing_documents_post) добавили объект `shipmentDocuments`, который подтверждает отгрузку товаров, работ или услуг.\n\n## 1.59.1\n11.02.25\n\n- Добавили параметры `nds_5` и `nds_7` при [выставлении счетов и закрывающих документов](/doc/v2/redoc/section/Opisanie-metodov#Vystavlenie-schetov-i-sozdanie-zakryvayushih-dokumentov).\n- Обновили вебхук [acquiringInternetPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki), теперь в нём содержится больше полезной информации.\n\n## 1.58.0\n03.02.25\n\n- Добавили в вебхук [incomingSbpPayment](/doc/v2/redoc/section/Opisanie-metodov#Vebhuki) параметр refTransactionId, с помощью которого вы можете проводить возвраты по СБП.\n\n## 1.56.0\n23.12.24\n\n- Добавили в методы [Create Payment Operation](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_acquiring__apiVersion__payments_post) и [Create Payment Operation With Receipt](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_with_receipt_acquiring__apiVersion__payments_with_receipt_post) возможность принимать платежи через T-Pay. Для этого у торговой точки в интернет-банке нужно выбрать Т-Pay как способ для приёма платежей, а в методах API использовать параметр paymentMode: tinkoff.\n- Обогатили данными метод [Get Retailers](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#get_retailers_acquiring__apiVersion__retailers_get): теперь он отдаёт информацию о возможных способах оплаты и наличии онлайн-касс.\n\n\n## 1.55.0\n06.12.24\n\n- Добавили новые методы для работы с подписками в интернет-эквайринге. С их помощью вы сможете создавать подписки (рекуррентные платежи) на определённый период, чтобы в течение этого периода у вашего покупателя списывались деньги с банковской карты.\n- Добавили необязательное поле `merchantId` в метод [Create Payment Operation](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_acquiring__apiVersion__payments_post). Это поле необходимо заполнять, если у вас есть несколько торговых точек в интернет-эквайринге. Оно позволяет нам понять, по какой торговой точке будут происходить зачисления на ваш счёт.\n- Исправили задержки при отправке вебхуков, теперь они работают еще быстрее.\n- Добавили новые методы в песочницу и коллекцию запросов Postman.\n- Создали метод [Get Payment For Sign List](/doc/v2/redoc/tag/Rabota-s-platezhami#get_payment_for_sign_list_payment__apiVersion__for_sign_get), который позволяет просматривать все платежи из раздела «На подпись» интернет-банка.\n- Обновили дизайн раздела «Интеграции и API» в интернет-банке.\n- По каждому обновлению добавили информацию в документацию, чтобы вам было легче разобраться с нашим API.\n\n\n## 1.46.0\n30.05.24\n\n- Добавили методы по работе с [кассовыми QR-кодами](/doc/v2/redoc/section/Opisanie-metodov#SBP-Sistema-bystryh-platezhej)\\.  \n- Обновили методы по работе с платёжными ссылками, выставлением счетов и закрывающих документов в [песочнице](/doc/v2/redoc/section/Pesochnica)\\.  \n- Добавили необязательный параметр `email` в метод [Create Payment For Sign](/doc/v2/redoc/tag/Rabota-s-platezhami#create_payment_for_sign_payment__apiVersion__for_sign_post).\n\n\n## 1.45.0\n22.05.24\n\n- Добавили новый метод по работе с платёжными ссылками [Create Payment Operation With Receipt](/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_with_receipt_acquiring__apiVersion__payments_with_receipt__post). Он позволяет формировать ссылки на оплату с автоматической фискализацией чеков от партнёров Точки.\n\n## 1.44.6\n05.04.24\n\nСоздали четыре новых метода для работы с выставлением счетов и формированием закрывающих документов:\n\n- [Delete Invoice](/doc/v2/redoc/tag/Rabota-s-vystavleniem-schetov#delete_invoice_invoice__apiVersion__bills__customerCode___documentId__delete) — для удаления счёта.\n- [Send Invoice To Email](/doc/v2/redoc/tag/Rabota-s-vystavleniem-schetov#send_invoice_to_email_invoice__apiVersion__bills__customerCode___documentId__email_post) — для отправки счёта в PDF на электронную почту.\n- [Delete Closing Documents](/doc/v2/redoc/tag/Rabota-s-zakryvayushimi-dokumentami#delete_closing_documents_invoice__apiVersion__closing_documents__customerCode___documentId__delete) — для удаления закрывающих документов.\n- [Send Closing Documents To Email](/doc/v2/redoc/tag/Rabota-s-zakryvayushimi-dokumentami#send_closing_documents_to_email_invoice__apiVersion__closing_documents__customerCode___documentId__email_post) — для отправки закрывающих документов на электронную почту.\n\n## 1.44.1\n01.02.24\n\n- Добавили новый тип вебхука [outgoingPayment](https://enter.tochka.com/doc/v2/redoc/section/Opisanie-metodov#Vebhuki) для получения уведомлений об исходящих платежах.\n- Добавили новый параметр в методы [Get Statements List](https://enter.tochka.com/doc/v2/redoc/tag/Rabota-s-vypiskami#get_statements_list_open_banking__apiVersion__statements_get) и [Get Statement](https://enter.tochka.com/doc/v2/redoc/tag/Rabota-s-vypiskami#get_statement_open_banking__apiVersion__accounts__accountId__statements__statementId__get), а также в вебхук типа incomingPayment. Это paymentId — уникальный идентификатор платежа.\n- Сделали обязательным поле purpose в методе [Create Payment Operation](https://enter.tochka.com/doc/v2/redoc/tag/Rabota-s-platyozhnymi-ssylkami#create_payment_operation_acquiring__apiVersion__payments_post).\n- Обновили в документации пример тела вебхука по событию incomingPayment.\n- Доработали методы для выставления счетов и формирования закрывающих документов. Поле `totalNds` больше не является обязательным.\n\n## 1.43.3\n08.12.23\n\n- Добавили методы для выставления счетов на оплату и создания закрывающих документов. Также с помощью API теперь можно получить PDF с выставленными счетами и закрывающими документами, а также посмотреть статус оплаты счетов.\n- Создали метод [Get Authorized Card Transactions](/doc/v2/redoc/tag/Rabota-s-balansami-schetov#get_authorized_card_transactions_open_banking__apiVersion__accounts__accountId__authorized_card_transactions_get), который позволяет получать информацию о карточных операциях, находящихся в резерве.\n- Обновили разрешения для работы с вебхуками — теперь для создания, удаления или изменения вебхука нужно использовать разрешение [ManageWebhookData](/doc/v2/redoc/section/Authentication). Существующие вебхуки продолжат свою работу, но для новых интеграций необходимо использовать новое разрешение.\n\n## 1.42.5\n20.11.23\n\n- Добавлена возможность работы с [платёжными ссылками](doc/v2/redoc/section/Opisanie-metodov#Platyozhnye-ssylki),\n- в методах [Get Balance Info](/doc/v2/redoc/tag/Rabota-s-balansami-schetov#get_balance_info_open_banking__apiVersion__accounts__accountId__balances_get) и [Get Balances List](/doc/v2/redoc/tag/Rabota-s-balansami-schetov#get_balances_list_open_banking__apiVersion__balances_get) появился новый тип баланса — OverdraftAvailable.\n- В методе [Create Payment](/doc/v2/redoc/tag/Rabota-s-platezhami#create_payment_payment__apiVersion__order_post) обновлён способ авторизации для проведения платежа.\n- Из документации и коллекции запросов в Postman удалены неактуальные методы.\n\n## 1.38.5\n07.07.2023\n\n- Добавили в метод [Register Qr Code](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-QR-kodami#register_qr_code_sbp__apiVersion__qr_code_merchant__merchantId___accountId__post) необязательный атрибут - redirectUrl.  \nС помощью этого атрибута вы сможете перенаправить покупателя после оплаты по QR-коду на ваш сайт или приложение.\n\n\n## 1.38.3\n27.06.2023\n\n- Удалили из документации устаревшие методы для работы в СБП.\n\n## 1.37.10\n26.04.2023\n\nПосле получения Точкой банковской лицензии мы изменили несколько методов:\n- В методе для получения информации о клиенте в СБП [Get Customer Info](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-YuL#get_customer_info_sbp__apiVersion__customer__customerCode___bank_code__get) теперь необходимо передавать bankCode — БИК банка.\n- В теле запроса метода для регистрации клиента в СБП [Register Legal Entity](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-YuL#register_legal_entity_sbp__apiVersion__register_sbp_legal_entity_post) теперь нужно будет передавать bankCode — БИК банка. \n- В методе для получения данных о QR-коде и ТСП по идентификатору QR-кода [Get Qr Code Payment Data](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-QR-kodami#get_qr_code_payment_data_sbp__apiVersion__qr_code__qrcId__payment_sbp_data_get) изменился эндпоинт запроса.  \nПредыдущие методы объявлены **deprecated** и в ближайшее время перестанут работать.\n\n\n## 1.37.9\n13.04.2023\n\n- Обновили тело вебхука по событию icomingSbpPayment, чтобы подпись корректно валидировалась с нашим публичным ключом openAPI.\n- Удалили проверку длины названия юридического лица при запросе выписки.\n- Добавили ограничение на попытки отправлять вебхук и создали проверку доступности URL вебхука при его создании или обновлении: если на отправленный вебхук мы не получили ответ с кодом состояния HTTP 200, а получили любой другой код, то будем отправлять его повторно 30 раз с периодичностью в 10 секунд.  \nДля проверки доступности указанного вами хоста при создании или изменении вебхука мы отправим на ваш URL по одному тестовому вебхуку на каждое из событий, на которые вы подписаны.  \nЕсли в статусе ответа не придёт код HTTP 200, то вебхук не будет создан или изменён.\n\n- Добавили в песочницу все методы по работе в СБП, теперь вы сможете отладить работу с QR-кодами без регистрации QR-кодов на боевом слое.\n\n\n## 1.37.0\n01.02.2023\n\n- Добавили пример с телом вебхука по событиям icomingPayment и icomingSbpPayment.\n- Теперь при регистрации QR-кода на несуществующий merchantId мы отдаём ошибку 403 — forbidden by consent.\n\n- Добавили для работы с API БИК Точки.\n- Исправили ошибку в методах [Get Balance Info](/doc/v2/redoc/tag/Rabota-s-balansami-schetov#get_balance_info_open_banking__apiVersion__accounts__accountId__balances_get) и [Get Balances List](/doc/v2/redoc/tag/Rabota-s-balansami-schetov#get_balances_list_open_banking__apiVersion__balances_get) — мы отдавали accountId без значения БИК.\n- Поправили ошибку метода [Start Refund](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-vozvratami#start_refund_sbp__apiVersion__refund_post), которая позволяла вернуть деньги по чужому QR-коду.\n\n## 1.36.4\n13.12.2022\n\n- Обновили в документации описание всех методов, чтобы вам было проще разобраться в нашем API.\n\n## 1.36.0\n20.10.2022\n\n- Вы просили, мы сделали: добавили [JWT-токен](https://enter.tochka.com/doc/v2/redoc/section/Algoritm-raboty-s-JWT-tokenom) для упрощённой авторизации. А ещё он избавляет от необходимости обновлять токены каждый день — просто подставьте сгенерированный ключ в заголовок _Authorization_.\n\n## 1.34.0\n18.07.2022\n\n- Добавили [методы для работы с тендерными спецсчетами](/doc/v2/redoc/section/Opisanie-metodov#Rabota-so-specschyotom). Теперь вы сможете получать актуальный баланс спецсчёта и видеть, сколько денег и какими электронными торговыми площадками (ЭТП) заблокированы.\n\n## 1.30.0\n22.03.2022\n\n- Появился режим [песочницы](/doc/v2/redoc/section/Pesochnica). Сейчас доступны только основные методы.\n\n## 1.29.0\n24.02.2022\n\n- Появились методы на совершение возвратов сбп платежей и отслеживания их статуса. [Подробнее](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-vozvratami).\n\n## 1.28.0\n01.12.2021\n\n- Теперь у нас есть вебхуки, подробнее можно прочитать [здесь](/doc/v2/redoc/section/Opisanie-metodov#Rabota-s-vebhukami).\n\n\n## 1.26.5\n23.09.2021\n\n- В [методе](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-TSP#register_merchant_sbp__apiVersion__merchant_legal_entity__legalId__post) регистрации ТСП в СБП теперь необходимо передавать customerCode как параметр, а не как заголовок.\n\n- В [методе](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-YuL#register_legal_entity_sbp__apiVersion__register_legal_entity_post) регистрации юрлица в СБП изменился адрес и набор параметров.\n\n\n## 1.25.0\n23.07.2021\n\n- Теперь сформировать ссылку для подписания списка разрешений можно передав в нее id разрешения, без необходимости генерировать jwt объект.\n\n## 1.24.1\n16.06.2021\n\n- В [выписке](/doc/v2/redoc/tag/Rabota-s-vypiskami) появился баланс счёта на начало и конец запрашиваемого периода. Теперь вы можете посмотреть полную выписку: с начальными и итоговыми остатками на счёте.\n\n- В [методы](/doc/v2/redoc/tag/Rabota-so-schetami) работы со счетами добавили поле `registrationDate` с датой открытия счёта. Можно запросить выписку за весь период работы, отдельно вводить дату открытия счёта не нужно.\n\n\n## 1.23.1\n21.05.2021\n\n- Обновили [метод](/doc/v2/redoc/tag/Rabota-s-vypiskami#get_statement_open_banking__apiVersion__accounts__accountId__statements__statementId__get) работы с выписками. Теперь в поле *amountNat* лежит сумма транзакции в рублях, а в *amount* — в валюте счёта.\n\n- Для методов [Create_payment](/doc/v2/redoc/tag/Rabota-s-platezhami#create_payment_payment__apiVersion__order_post) и [Payment_for_sign](/doc/v2/redoc/tag/Rabota-s-platezhami#create_payment_for_sign_payment__apiVersion__for_sign_post) добавили валидацию полей. Проверяем все поля перед отправкой платежа в банк. Если будет какая-то ошибка, вы сразу сможете показать её тому, кто создаёт платёж.\n\n\n## 1.21.5\n12.04.2021\n\n- Добавлена валидация поля окончания срока действия разрешения `expirationDateTime`. Теперь нельзя указать дату меньше текущей.\n\n## 1.20.0\n25.02.2021\n\n- Добавили [метод](/doc/v2/redoc/tag/Rabota-s-platezhami#create_payment_payment__apiVersion__order_post) создания и подписания платежа. Теперь подписывать платежи можно через API, не заходя в интернет-банк.\n\n## 1.19.0\n10.02.2021\n\n- Добавили новый [метод](/doc/v2/redoc/tag/Servis-SBP:-Rabota-s-QR-kodami#get_qr_codes_payment_status_sbp__apiVersion__qr_codes__qrc_ids__payment_status_get) запроса статуса платежей для СБП, который работает быстрее.\n\n## 1.13.0\n10.11.2020\n\n- Добавили [метод](/doc/v2/redoc/tag/Rabota-s-platezhami#create_payment_for_sign_payment__apiVersion__for_sign_post) создания платежа на подпись. Теперь можно формировать платежи и отправлять их напрямую в интернет-банк. Подписать такие платежи пока можно только в интернет-банке.\n\n## 1.11.0\n08.10.2020\n\n- Добавили [методы](/doc/v2/redoc/tag/Rabota-s-balansami-schetov) работы с балансами: вы можете получить остаток по счетам на текущий день.\n- Добавили [методы](/doc/v2/redoc/tag/Rabota-s-vypiskami)  работы с выписками: можно получать движения по счетам через API, необязательно заходить в интернет-банк.\n",
    "version": "v1.65.2",
    "x-logo": {
      "url": "./static/image/tochka.png",
      "altText": "Tochka logo"
    }
  },
  "servers": [
    {
      "url": "https://enter.tochka.com/uapi/",
      "description": "Боевой сервер Production"
    },
    {
      "url": "https://enter.tochka.com/sandbox/v2/",
      "description": "Сервер песочницы"
    }
  ],
  "paths": {
    "/acquiring/{apiVersion}/payments": {
      "get": {
        "tags": [
          "Работа с платёжными ссылками"
        ],
        "summary": "Get Payment Operation List",
        "description": "Метод для получения списка операций\n\n- _CREATED_ - Операция создана\n- _APPROVED_ - Операция одобрена (оплата прошла успешно)\n- _ON-REFUND_ - Операция заблокирована на время выполнения возврата\n- _REFUNDED_ - Осуществлен возврат\n- _EXPIRED_ - Истек срок действия\n",
        "operationId": "get_payment_operation_list_acquiring__apiVersion__payments_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadAcquiringData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "fromDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Начало периода создания операций",
              "title": "Fromdate"
            },
            "description": "Начало периода создания операций",
            "example": "2020-01-20"
          },
          {
            "name": "toDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Конец периода создания операций",
              "title": "Todate"
            },
            "description": "Конец периода создания операций",
            "example": "2020-01-20"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Номер страницы",
              "default": 1,
              "title": "Page"
            },
            "description": "Номер страницы"
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Количество записей на странице",
              "default": 1000,
              "title": "Perpage"
            },
            "description": "Количество записей на странице"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AcquiringPaymentStatus"
                }
              ],
              "description": "Статус операции",
              "title": "Status"
            },
            "description": "Статус операции"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringGetPaymentOperationListResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/payments?customerCode=300000092' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/payments?customerCode=300000092\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/payments?customerCode=300000092',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/payments?customerCode=300000092\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Работа с платёжными ссылками"
        ],
        "summary": "Create Payment Operation",
        "description": "Метод для создания ссылки на оплату",
        "operationId": "create_payment_operation_acquiring__apiVersion__payments_post",
        "security": [
          {
            "Необходимые разрешения": [
              "MakeAcquiringOperation"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquiringCreatePaymentOperationRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringCreatePaymentOperationResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/payments' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"amount\": 1234.00,\n         \"purpose\": \"Перевод за оказанные услуги\",\n        \"paymentMode\": [\n            \"sbp\",\n            \"card\"\n        ],\n        \"redirectUrl\": \"https://example.com\"\n    }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"customerCode\\\": \\\"300000092\\\",\\n        \\\"amount\\\": 1234.00,\\n         \\\"purpose\\\": \\\"Перевод за оказанные услуги\\\",\\n \\\"paymentMode\\\": [\\n            \\\"sbp\\\",\\n            \\\"card\\\"\\n ],\\n        \\\"redirectUrl\\\": \\\"https://example.com\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/payments\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/payments',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"amount\": 1234.00,\n         \"purpose\": \"Перевод за оказанные услуги\",\n        \"paymentMode\": [\n            \"sbp\",\n            \"card\"\n        ],\n        \"redirectUrl\": \"https://example.com\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/payments\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"customerCode\": \"300000092\",\n    \"amount\": 1234,\n    \"purpose\": \"Перевод за оказанные услуги\",\n    \"paymentMode\": [\n      \"sbp\",\n      \"card\"\n    ],\n    \"redirectUrl\": \"https://example.com\"\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/acquiring/{apiVersion}/payments/{operationId}": {
      "get": {
        "tags": [
          "Работа с платёжными ссылками"
        ],
        "summary": "Get Payment Operation Info",
        "description": "Метод для получения информации о конкретной операции\n\n- _CREATED_ - Операция создана\n- _APPROVED_ - Операция одобрена (оплата прошла успешно)\n- _ON-REFUND_ - Операция заблокирована на время выполнения возврата\n- _REFUNDED_ - Осуществлен возврат\n- _EXPIRED_ - Истек срок действия\n",
        "operationId": "get_payment_operation_info_acquiring__apiVersion__payments__operationId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadAcquiringData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор платежа",
              "title": "Operationid"
            },
            "description": "Идентификатор платежа",
            "example": "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringGetPaymentOperationInfoResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/payments/48232c9a-ce82-1593-3cb6-5c85a1ffef8f' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/payments/48232c9a-ce82-1593-3cb6-5c85a1ffef8f\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/payments/48232c9a-ce82-1593-3cb6-5c85a1ffef8f',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/payments/48232c9a-ce82-1593-3cb6-5c85a1ffef8f\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/acquiring/{apiVersion}/payments/{operationId}/refund": {
      "post": {
        "tags": [
          "Работа с платёжными ссылками"
        ],
        "summary": "Refund Payment Operation",
        "description": "Метод для возврата платежей, созданных через платёжную ссылку  \nВозврат возможен только для платежа со статусом _APPROVED_",
        "operationId": "refund_payment_operation_acquiring__apiVersion__payments__operationId__refund_post",
        "security": [
          {
            "Необходимые разрешения": [
              "MakeAcquiringOperation"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор платежа",
              "title": "Operationid"
            },
            "description": "Идентификатор платежа",
            "example": "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquiringPaymentOrderRefundRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringPaymentOperationRefundResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/payments/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/refund' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"Data\": {\n        \"amount\": 1234.00\n     }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"amount\\\": 1234.00\\n     }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/payments/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/refund\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/payments/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/refund',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"amount\": 1234.00\n     }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/payments/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/refund\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"amount\": 1234\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/acquiring/{apiVersion}/payments_with_receipt": {
      "post": {
        "tags": [
          "Работа с платёжными ссылками"
        ],
        "summary": "Create Payment Operation With Receipt",
        "description": "Метод для создания ссылки на оплату и отправки чека",
        "operationId": "create_payment_operation_with_receipt_acquiring__apiVersion__payments_with_receipt_post",
        "security": [
          {
            "Необходимые разрешения": [
              "MakeAcquiringOperation"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquiringCreatePaymentOperationWithReceiptRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringCreatePaymentOperationWithReceiptResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/payments_with_receipt' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"amount\": \"1234.00\",\n        \"purpose\": \"Перевод за оказанные услуги\",\n        \"redirectUrl\": \"https://example.com\",\n        \"failRedirectUrl\": \"https://example.com/fail\",\n        \"paymentMode\": [\n            \"sbp\",\n            \"card\"\n        ],\n        \"merchantId\": \"200000000001056\",\n        \"taxSystemCode\": \"osn\",\n        \"Client\": {\n            \"name\": \"Иванов Иван Иванович\",\n            \"email\": \"ivanov@mail.com\",\n            \"phone\": \"7999999999\"\n        },\n        \"Items\": [\n            {\n                \"vatType\": \"none\",\n                \"name\": \"string\",\n                \"amount\": \"1234.00\",\n                \"quantity\": 1,\n                \"paymentMethod\": \"full_payment\",\n                \"paymentObject\": \"goods\",\n                \"measure\": \"г.\"\n            }\n        ]\n    }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json,application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"customerCode\\\": \\\"300000092\\\",\\n        \\\"amount\\\": \\\"1234.00\\\",\\n        \\\"purpose\\\": \\\"Перевод за оказанные услуги\\\",\\n \\\"redirectUrl\\\": \\\"https://example.com\\\",\\n        \\\"failRedirectUrl\\\": \\\"https://example.com/fail\\\",\\n        \\\"paymentMode\\\": [\\n \\\"sbp\\\",\\n            \\\"card\\\"\\n        ],\\n        \\\"merchantId\\\": \\\"200000000001056\\\",\\n        \\\"taxSystemCode\\\": \\\"osn\\\",\\n \\\"Client\\\": {\\n            \\\"name\\\": \\\"Иванов Иван Иванович\\\",\\n \\\"email\\\": \\\"ivanov@mail.com\\\",\\n            \\\"phone\\\": \\\"7999999999\\\"\\n        },\\n        \\\"Items\\\": [\\n {\\n                \\\"vatType\\\": \\\"none\\\",\\n                \\\"name\\\": \\\"string\\\",\\n                \\\"amount\\\": \\\"1234.00\\\",\\n \\\"quantity\\\": 1,\\n                \\\"paymentMethod\\\": \\\"full_payment\\\",\\n                \\\"paymentObject\\\": \\\"goods\\\",\\n                \\\"measure\\\": \\\"г.\\\"\\n            }\\n ]\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/payments_with_receipt\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/payments_with_receipt',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"amount\": \"1234.00\",\n        \"purpose\": \"Перевод за оказанные услуги\",\n        \"redirectUrl\": \"https://example.com\",\n        \"failRedirectUrl\": \"https://example.com/fail\",\n        \"paymentMode\": [\n            \"sbp\",\n            \"card\"\n        ],\n        \"merchantId\": \"200000000001056\",\n        \"taxSystemCode\": \"osn\",\n        \"Client\": {\n            \"name\": \"Иванов Иван Иванович\",\n            \"email\": \"ivanov@mail.com\",\n            \"phone\": \"7999999999\"\n        },\n        \"Items\": [\n            {\n                \"vatType\": \"none\",\n                \"name\": \"string\",\n                \"amount\": \"1234.00\",\n                \"quantity\": 1,\n                \"paymentMethod\": \"full_payment\",\n                \"paymentObject\": \"goods\",\n                \"measure\": \"г.\"\n            }\n        ]\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/payments_with_receipt\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"customerCode\": \"300000092\",\n    \"amount\": \"1234.00\",\n    \"purpose\": \"Перевод за оказанные услуги\",\n    \"redirectUrl\": \"https://example.com\",\n    \"failRedirectUrl\": \"https://example.com/fail\",\n    \"paymentMode\": [\n      \"sbp\",\n      \"card\"\n    ],\n    \"merchantId\": \"200000000001056\",\n    \"taxSystemCode\": \"osn\",\n    \"Client\": {\n      \"name\": \"Иванов Иван Иванович\",\n      \"email\": \"ivanov@mail.com\",\n      \"phone\": \"7999999999\"\n    },\n    \"Items\": [\n      {\n        \"vatType\": \"none\",\n        \"name\": \"string\",\n        \"amount\": \"1234.00\",\n        \"quantity\": 1,\n        \"paymentMethod\": \"full_payment\",\n        \"paymentObject\": \"goods\",\n        \"measure\": \"г.\"\n      }\n    ]\n  }\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/acquiring/{apiVersion}/retailers": {
      "get": {
        "tags": [
          "Работа с платёжными ссылками"
        ],
        "summary": "Get Retailers",
        "description": "Метод для получения информации о ретейлере\n\n- _NEW_ - Ретейлер создан\n- _ADDRESS_DADATA_ - Адрес уточнен\n- _OPEN_ACCOUNT_ - Счёт открыт\n- _TWPG_SENDED_ - Данные мерчанта и терминала отправлены в процессинг\n- _RETAILER_CREATED_ - Мерчант создан в процессинге\n- _TERMINAL_CREATED_ - Терминал создан в процессинге\n- _FILE_SENT_ - файл отправлен в НСПК\n- _REG_ - Зарегистрирован\n- _CLOSE_ - Закрыт\n",
        "operationId": "get_retailers_acquiring__apiVersion__retailers_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadAcquiringData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringRetailerListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/retailers?customerCode=300000092' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/retailers?customerCode=300000092\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/retailers?customerCode=300000092',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/retailers?customerCode=300000092\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/acquiring/{apiVersion}/subscriptions": {
      "post": {
        "tags": [
          "Работа с подписками"
        ],
        "summary": "Create Subscription",
        "description": "Метод для создания подписки по карте",
        "operationId": "create_subscription_acquiring__apiVersion__subscriptions_post",
        "security": [
          {
            "Необходимые разрешения": [
              "MakeAcquiringOperation"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquiringCreateSubscriptionRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringCreateSubscriptionResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"amount\": \"1234.00\",\n        \"purpose\": \"Перевод за оказанные услуги\",\n        \"redirectUrl\": \"https://example.com\",\n        \"failRedirectUrl\": \"https://example.com/fail\",\n        \"merchantId\": \"200000000001056\",\n        \"Options\": {\n            \"trancheCount\": 12,\n            \"period\": \"Month\"\n        }\n    }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"customerCode\\\": \\\"300000092\\\",\\n        \\\"amount\\\": \\\"1234.00\\\",\\n        \\\"purpose\\\": \\\"Перевод за оказанные услуги\\\",\\n \\\"redirectUrl\\\": \\\"https://example.com\\\",\\n        \\\"failRedirectUrl\\\": \\\"https://example.com/fail\\\",\\n        \\\"merchantId\\\": \\\"200000000001056\\\",\\n        \\\"Options\\\": {\\n            \\\"trancheCount\\\": 12,\\n            \\\"period\\\": \\\"Month\\\"\\n        }\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"amount\": \"1234.00\",\n        \"purpose\": \"Перевод за оказанные услуги\",\n        \"redirectUrl\": \"https://example.com\",\n        \"failRedirectUrl\": \"https://example.com/fail\",\n        \"merchantId\": \"200000000001056\",\n        \"Options\": {\n            \"trancheCount\": 12,\n            \"period\": \"Month\"\n        }\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"customerCode\": \"300000092\",\n    \"amount\": \"1234.00\",\n    \"purpose\": \"Перевод за оказанные услуги\",\n    \"redirectUrl\": \"https://example.com\",\n    \"failRedirectUrl\": \"https://example.com/fail\",\n    \"merchantId\": \"200000000001056\",\n    \"Options\": {\n      \"trancheCount\": 12,\n      \"period\": \"Month\"\n    }\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Работа с подписками"
        ],
        "summary": "Get Subscription List",
        "description": "Метод для получения всех подписок",
        "operationId": "get_subscription_list_acquiring__apiVersion__subscriptions_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadAcquiringData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Номер страницы",
              "default": 1,
              "title": "Page"
            },
            "description": "Номер страницы"
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Количество записей на странице",
              "default": 1000,
              "title": "Perpage"
            },
            "description": "Количество записей на странице"
          },
          {
            "name": "recurring",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Получить платежи по рекуррентным подпискам",
              "default": false,
              "title": "Recurring"
            },
            "description": "Получить платежи по рекуррентным подпискам"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringSubscriptionListResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions?customerCode=300000092&page=1&perPage=1000' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions?customerCode=300000092&page=1&perPage=1000\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions?customerCode=300000092&page=1&perPage=1000',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions?customerCode=300000092&page=1&perPage=1000\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/acquiring/{apiVersion}/subscriptions/{operationId}/charge": {
      "post": {
        "tags": [
          "Работа с подписками"
        ],
        "summary": "Charge Subscription",
        "description": "Метод для списания средств по рекуррентной подписке",
        "operationId": "charge_subscription_acquiring__apiVersion__subscriptions__operationId__charge_post",
        "security": [
          {
            "Необходимые разрешения": [
              "MakeAcquiringOperation"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор подписки",
              "title": "Operationid"
            },
            "description": "Идентификатор подписки",
            "example": "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquiringChargeSubscriptionRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringChargeSubscriptionResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/acquiring/{apiVersion}/subscriptions/{operationId}/status": {
      "post": {
        "tags": [
          "Работа с подписками"
        ],
        "summary": "Set Subscription Status",
        "description": "Метод для установки статуса подписки",
        "operationId": "set_subscription_status_acquiring__apiVersion__subscriptions__operationId__status_post",
        "security": [
          {
            "Необходимые разрешения": [
              "MakeAcquiringOperation"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор подписки",
              "title": "Operationid"
            },
            "description": "Идентификатор подписки",
            "example": "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquiringSetSubscriptionStatusRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringSetSubscriptionStatusResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/status' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"Data\": {\n        \"status\": \"Cancelled\"\n    }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"status\\\": \\\"Cancelled\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/status\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"status\": \"Cancelled\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/status\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"status\": \"Cancelled\"\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      },
      "get": {
        "tags": [
          "Работа с подписками"
        ],
        "summary": "Get Subscription Status",
        "description": "Метод для получения актуального статуса подписки",
        "operationId": "get_subscription_status_acquiring__apiVersion__subscriptions__operationId__status_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadAcquiringData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "operationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор подписки",
              "title": "Operationid"
            },
            "description": "Идентификатор подписки",
            "example": "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringGetSubscriptionStatusResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/status' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/status\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions/48232c9a-ce82-1593-3cb6-5c85a1ffef8f/status\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/acquiring/{apiVersion}/subscriptions_with_receipt": {
      "post": {
        "tags": [
          "Работа с подписками"
        ],
        "summary": "Create Subscription With Receipt",
        "description": "Метод для создания подписки по карте и отправке чека",
        "operationId": "create_subscription_with_receipt_acquiring__apiVersion__subscriptions_with_receipt_post",
        "security": [
          {
            "Необходимые разрешения": [
              "MakeAcquiringOperation"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcquiringCreateSubscriptionWithReceiptRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquiringCreateSubscriptionWithReceiptResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"amount\": \"1234.00\",\n        \"purpose\": \"Перевод за оказанные услуги\",\n        \"redirectUrl\": \"https://example.com\",\n        \"failRedirectUrl\": \"https://example.com/fail\",\n        \"merchantId\": \"200000000001056\",\n        \"taxSystemCode\": \"osn\",\n        \"Client\": {\n            \"name\": \"Иванов Иван Иванович\",\n            \"email\": \"ivanov@mail.com\",\n            \"phone\": \"7999999999\"\n        },\n        \"Items\": [\n            {\n                \"vatType\": \"none\",\n                \"name\": \"string\",\n                \"amount\": \"1234.00\",\n                \"quantity\": 1,\n                \"paymentMethod\": \"full_payment\",\n                \"paymentObject\": \"goods\",\n                \"measure\": \"г.\"\n            }\n        ],\n        \"Options\": {\n            \"trancheCount\": 12,\n            \"period\": \"Month\"\n        }\n    }\n}\n'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"customerCode\\\": \\\"300000092\\\",\\n        \\\"amount\\\": \\\"1234.00\\\",\\n        \\\"purpose\\\": \\\"Перевод за оказанные услуги\\\",\\n \\\"redirectUrl\\\": \\\"https://example.com\\\",\\n        \\\"failRedirectUrl\\\": \\\"https://example.com/fail\\\",\\n        \\\"merchantId\\\": \\\"200000000001056\\\",\\n        \\\"taxSystemCode\\\": \\\"osn\\\",\\n \\\"Client\\\": {\\n            \\\"name\\\": \\\"Иванов Иван Иванович\\\",\\n \\\"email\\\": \\\"ivanov@mail.com\\\",\\n            \\\"phone\\\": \\\"7999999999\\\"\\n        },\\n        \\\"Items\\\": [\\n {\\n                \\\"vatType\\\": \\\"none\\\",\\n                \\\"name\\\": \\\"string\\\",\\n                \\\"amount\\\": \\\"1234.00\\\",\\n \\\"quantity\\\": 1,\\n                \\\"paymentMethod\\\": \\\"full_payment\\\",\\n                \\\"paymentObject\\\": \\\"goods\\\",\\n                \\\"measure\\\": \\\"г.\\\"\\n            }\\n ],\\n        \\\"Options\\\": {\\n            \\\"trancheCount\\\": 12,\\n \\\"period\\\": \\\"Month\\\"\\n        }\\n    }\\n}\\n\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"amount\": \"1234.00\",\n        \"purpose\": \"Перевод за оказанные услуги\",\n        \"redirectUrl\": \"https://example.com\",\n        \"failRedirectUrl\": \"https://example.com/fail\",\n        \"merchantId\": \"200000000001056\",\n        \"taxSystemCode\": \"osn\",\n        \"Client\": {\n            \"name\": \"Иванов Иван Иванович\",\n            \"email\": \"ivanov@mail.com\",\n            \"phone\": \"7999999999\"\n        },\n        \"Items\": [\n            {\n                \"vatType\": \"none\",\n                \"name\": \"string\",\n                \"amount\": \"1234.00\",\n                \"quantity\": 1,\n                \"paymentMethod\": \"full_payment\",\n                \"paymentObject\": \"goods\",\n                \"measure\": \"г.\"\n            }\n        ],\n        \"Options\": {\n            \"trancheCount\": 12,\n            \"period\": \"Month\"\n        }\n    }\n}\n',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/acquiring/v1.0/subscriptions\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"customerCode\": \"300000092\",\n    \"amount\": \"1234.00\",\n    \"purpose\": \"Перевод за оказанные услуги\",\n    \"redirectUrl\": \"https://example.com\",\n    \"failRedirectUrl\": \"https://example.com/fail\",\n    \"merchantId\": \"200000000001056\",\n    \"taxSystemCode\": \"osn\",\n    \"Client\": {\n      \"name\": \"Иванов Иван Иванович\",\n      \"email\": \"ivanov@mail.com\",\n      \"phone\": \"7999999999\"\n    },\n    \"Items\": [\n      {\n        \"vatType\": \"none\",\n        \"name\": \"string\",\n        \"amount\": \"1234.00\",\n        \"quantity\": 1,\n        \"paymentMethod\": \"full_payment\",\n        \"paymentObject\": \"goods\",\n        \"measure\": \"г.\"\n      }\n    ],\n    \"Options\": {\n      \"trancheCount\": 12,\n      \"period\": \"Month\"\n    }\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/consent/{apiVersion}/consents": {
      "get": {
        "tags": [
          "Работа с разрешениями"
        ],
        "summary": "Get All Consents List",
        "description": "Метод для получения списка разрешений\n",
        "operationId": "get_all_consents_list_consent__apiVersion__consents_get",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customer-code",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customer-Code"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/v1.0/consents' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/v1.0/consents',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/v1.0/consents\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/v1.0/consents\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "post": {
        "tags": [
          "Работа с разрешениями"
        ],
        "summary": "Create New Consent",
        "description": "Метод для создания разрешения\n",
        "operationId": "create_new_consent_consent__apiVersion__consents_post",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/consent/{apiVersion}/consents/{consentId}/child": {
      "get": {
        "tags": [
          "Работа с разрешениями"
        ],
        "summary": "Get All Child Consents",
        "description": "Метод для получения всех дочерних разрешений\n",
        "operationId": "get_all_child_consents_consent__apiVersion__consents__consentId__child_get",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "consentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор, предназначенный для идентификации разрешения",
              "title": "Consentid"
            },
            "description": "Уникальный идентификатор, предназначенный для идентификации разрешения"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentListResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/v1.0/consents/705ba15f-a109-4156-bb7f-50c21413c158/child' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/v1.0/consents/705ba15f-a109-4156-bb7f-50c21413c158/child',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/v1.0/consents/705ba15f-a109-4156-bb7f-50c21413c158/child\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/v1.0/consents/705ba15f-a109-4156-bb7f-50c21413c158/child\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/consent/{apiVersion}/{consentId}": {
      "get": {
        "tags": [
          "Работа с разрешениями"
        ],
        "summary": "Get Consent Info",
        "description": "Метод для получения информации о списке разрешений\n",
        "operationId": "get_consent_info_consent__apiVersion___consentId__get",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "consentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор, предназначенный для идентификации разрешения",
              "title": "Consentid"
            },
            "description": "Уникальный идентификатор, предназначенный для идентификации разрешения"
          },
          {
            "name": "customer-code",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customer-Code"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/v1.0/consents/705ba15f-a109-4156-bb7f-50c21413c158' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/v1.0/consents/705ba15f-a109-4156-bb7f-50c21413c158',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/v1.0/consents/705ba15f-a109-4156-bb7f-50c21413c158\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/v1.0/consents/705ba15f-a109-4156-bb7f-50c21413c158\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/bills": {
      "post": {
        "tags": [
          "Работа с выставлением счетов"
        ],
        "summary": "Create Invoice",
        "description": "Метод для создания счёта на оплату\n",
        "operationId": "create_invoice_invoice__apiVersion__bills_post",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCreateRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCreateResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/invoice/v1.0/bills' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"accountId\": \"40817810802000000008/044525104\",\n        \"Content\": {\n            \"Invoice\": {\n                \"number\": \"3\",\n                \"basedOn\": \"Основание платежа\",\n                \"comment\": \"Комментарий\",\n                \"paymentExpiryDate\": \"2021-05-06\",\n                \"date\": \"2021-05-06\",\n                \"totalAmount\": \"12345\",\n                \"totalNds\": \"1\",\n                \"Positions\": [\n                    {\n                        \"positionName\": \"Название товара или услуги\",\n                        \"unitCode\": \"шт.\",\n                        \"ndsKind\": \"nds_0\",\n                        \"price\": \"12345.00\",\n                        \"quantity\": \"12345\",\n                        \"totalAmount\": \"12345\",\n                        \"totalNds\": \"1\"\n                    }\n                ]\n            }\n        },\n        \"SecondSide\": {\n            \"accountId\": \"40817810802000000008/044525104\",\n            \"legalAddress\": \"197183, г. Санкт-Петербург, ул. Сестрорецкая, д. 8\",\n            \"kpp\": \"668101001\",\n            \"bankName\": \"ООО \\\"БАНК ТОЧКА\\\"\",\n            \"bankCorrAccount\": \"30101810745374525104\",\n            \"taxCode\": \"660000000000\",\n            \"type\": \"company\",\n            \"secondSideName\": \"ООО \\\"ГОС-АЛЬЯНС\\\"\"\n        }\n    }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"customerCode\\\": \\\"300000092\\\",\\n        \\\"accountId\\\": \\\"40817810802000000008/044525104\\\",\\n        \\\"Content\\\": {\\n \\\"Invoice\\\": {\\n                \\\"number\\\": \\\"3\\\",\\n \\\"basedOn\\\": \\\"Основание платежа\\\",\\n                \\\"comment\\\": \\\"Комментарий\\\",\\n                \\\"paymentExpiryDate\\\": \\\"2021-05-06\\\",\\n                \\\"date\\\": \\\"2021-05-06\\\",\\n \\\"totalAmount\\\": \\\"12345\\\",\\n                \\\"totalNds\\\": \\\"1\\\",\\n                \\\"Positions\\\": [\\n {\\n                        \\\"positionName\\\": \\\"Название товара или услуги\\\",\\n                        \\\"unitCode\\\": \\\"шт.\\\",\\n                        \\\"ndsKind\\\": \\\"nds_0\\\",\\n                        \\\"price\\\": \\\"12345.00\\\",\\n                        \\\"quantity\\\": \\\"12345\\\",\\n                        \\\"totalAmount\\\": \\\"12345\\\",\\n                        \\\"totalNds\\\": \\\"1\\\"\\n }\\n                ]\\n            }\\n        },\\n        \\\"SecondSide\\\": {\\n            \\\"accountId\\\": \\\"40817810802000000008/044525104\\\",\\n            \\\"legalAddress\\\": \\\"197183, г. Санкт-Петербург, ул. Сестрорецкая, д. 8\\\",\\n            \\\"kpp\\\": \\\"668101001\\\",\\n            \\\"bankName\\\": \\\"ООО \\\\\\\"БАНК ТОЧКА\\\\\\\"\\\",\\n            \\\"bankCorrAccount\\\": \\\"30101810745374525104\\\",\\n            \\\"taxCode\\\": \\\"660000000000\\\",\\n            \\\"type\\\": \\\"company\\\",\\n \\\"secondSideName\\\": \\\"ООО \\\\\\\"ГОС-АЛЬЯНС\\\\\\\"\\\"\\n        }\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/bills\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/bills',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"accountId\": \"40817810802000000008/044525104\",\n        \"Content\": {\n            \"Invoice\": {\n                \"number\": \"3\",\n                \"basedOn\": \"Основание платежа\",\n                \"comment\": \"Комментарий\",\n                \"paymentExpiryDate\": \"2021-05-06\",\n                \"date\": \"2021-05-06\",\n                \"totalAmount\": \"12345\",\n                \"totalNds\": \"1\",\n                \"Positions\": [\n                    {\n                        \"positionName\": \"Название товара или услуги\",\n                        \"unitCode\": \"шт.\",\n                        \"ndsKind\": \"nds_0\",\n                        \"price\": \"12345.00\",\n                        \"quantity\": \"12345\",\n                        \"totalAmount\": \"12345\",\n                        \"totalNds\": \"1\"\n                    }\n                ]\n            }\n        },\n        \"SecondSide\": {\n            \"accountId\": \"40817810802000000008/044525104\",\n            \"legalAddress\": \"197183, г. Санкт-Петербург, ул. Сестрорецкая, д. 8\",\n            \"kpp\": \"668101001\",\n            \"bankName\": \"ООО \\\\\"БАНК ТОЧКА\\\\\"\",\n            \"bankCorrAccount\": \"30101810745374525104\",\n            \"taxCode\": \"660000000000\",\n            \"type\": \"company\",\n            \"secondSideName\": \"ООО \\\\\"ГОС-АЛЬЯНС\\\\\"\"\n        }\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/bills\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"customerCode\": \"300000092\",\n    \"accountId\": \"40817810802000000008/044525104\",\n    \"Content\": {\n      \"Invoice\": {\n        \"number\": \"3\",\n        \"basedOn\": \"Основание платежа\",\n        \"comment\": \"Комментарий\",\n        \"paymentExpiryDate\": \"2021-05-06\",\n        \"date\": \"2021-05-06\",\n        \"totalAmount\": \"12345\",\n        \"totalNds\": \"1\",\n        \"Positions\": [\n          {\n            \"positionName\": \"Название товара или услуги\",\n            \"unitCode\": \"шт.\",\n            \"ndsKind\": \"nds_0\",\n            \"price\": \"12345.00\",\n            \"quantity\": \"12345\",\n            \"totalAmount\": \"12345\",\n            \"totalNds\": \"1\"\n          }\n        ]\n      }\n    },\n    \"SecondSide\": {\n      \"accountId\": \"40817810802000000008/044525104\",\n      \"legalAddress\": \"197183, г. Санкт-Петербург, ул. Сестрорецкая, д. 8\",\n      \"kpp\": \"668101001\",\n      \"bankName\": \"ООО \\\"БАНК ТОЧКА\\\"\",\n      \"bankCorrAccount\": \"30101810745374525104\",\n      \"taxCode\": \"660000000000\",\n      \"type\": \"company\",\n      \"secondSideName\": \"ООО \\\"ГОС-АЛЬЯНС\\\"\"\n    }\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/bills/{customerCode}/{documentId}": {
      "delete": {
        "tags": [
          "Работа с выставлением счетов"
        ],
        "summary": "Delete Invoice",
        "description": "Метод для удаления счёта на оплату\n\n\n",
        "operationId": "delete_invoice_invoice__apiVersion__bills__customerCode___documentId__delete",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор документа",
              "title": "Documentid"
            },
            "description": "Уникальный идентификатор документа",
            "example": "1cf95c4f-e794-4407-bac4-0829f19bd2be"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff --request DELETE 'https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be\")\n  .method(\"DELETE\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'DELETE',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/bills/{customerCode}/{documentId}/email": {
      "post": {
        "tags": [
          "Работа с выставлением счетов"
        ],
        "summary": "Send Invoice To Email",
        "description": "Метод для отправки счёта на почту",
        "operationId": "send_invoice_to_email_invoice__apiVersion__bills__customerCode___documentId__email_post",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор документа",
              "title": "Documentid"
            },
            "description": "Уникальный идентификатор документа",
            "example": "1cf95c4f-e794-4407-bac4-0829f19bd2be"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDocumentToEmailRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/email' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"email\": \"user@example.com\"\n    }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"email\\\": \\\"user@example.com\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/email\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/email',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"email\": \"user@example.com\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/email\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"email\": \"user@example.com\"\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/bills/{customerCode}/{documentId}/file": {
      "get": {
        "tags": [
          "Работа с выставлением счетов"
        ],
        "summary": "Get Invoice",
        "description": "Метод для получения файла выставленного счёта",
        "operationId": "get_invoice_invoice__apiVersion__bills__customerCode___documentId__file_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор документа",
              "title": "Documentid"
            },
            "description": "Уникальный идентификатор документа",
            "example": "1cf95c4f-e794-4407-bac4-0829f19bd2be"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "examples": {
                  "Invoice": {
                    "summary": "Invoice file",
                    "X-Content-Url": "https://enter.tochka.com/doc/openapi/static/file_examples/invoice_example.pdf"
                  }
                }
              }
            },
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "Заголовок, содержащий MIME-type файла",
                "example": "application/pdf"
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "Заголовок, содержащий название файла",
                "example": "attachment; filename=document.pdf"
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/file' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/file\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/file',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/file\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/bills/{customerCode}/{documentId}/payment-status": {
      "get": {
        "tags": [
          "Работа с выставлением счетов"
        ],
        "summary": "Get Invoice Payment Status",
        "description": "Метод для получения статуса счёта",
        "operationId": "get_invoice_payment_status_invoice__apiVersion__bills__customerCode___documentId__payment_status_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор документа",
              "title": "Documentid"
            },
            "description": "Уникальный идентификатор документа",
            "example": "1cf95c4f-e794-4407-bac4-0829f19bd2be"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePaymentStatusResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/payment-status' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/payment-status\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/payment-status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/bills/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/payment-status\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/closing-documents": {
      "post": {
        "tags": [
          "Работа с закрывающими документами"
        ],
        "summary": "Create Closing Document",
        "description": "Метод для создания закрывающего документа",
        "operationId": "create_closing_document_invoice__apiVersion__closing_documents_post",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClosingDocumentCreateRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCreateResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/invoice/v1.0/closing-documents' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"accountId\": \"40817810802000000008/044525104\",\n        \"documentId\": \"1cf95c4f-e794-4407-bac4-0829f19bd2be\",\n        \"Content\": {\n            \"Act\": {\n                \"number\": \"3\",\n                \"basedOn\": \"Основание платежа\",\n                \"comment\": \"Комментарий\",\n                \"date\": \"2021-05-06\",\n                \"totalAmount\": \"12345\",\n                \"totalNds\": \"1\",\n                \"Positions\": [\n                    {\n                        \"positionName\": \"Название товара или услуги\",\n                        \"unitCode\": \"шт.\",\n                        \"ndsKind\": \"nds_0\",\n                        \"price\": \"12345.00\",\n                        \"quantity\": \"12345\",\n                        \"totalAmount\": \"12345\",\n                        \"totalNds\": \"1\"\n                    }\n                ]\n            }\n        },\n        \"SecondSide\": {\n            \"accountId\": \"40817810802000000008/044525104\",\n            \"legalAddress\": \"197183, г. Санкт-Петербург, ул. Сестрорецкая, д. 8\",\n            \"kpp\": \"668101001\",\n            \"bankName\": \"ООО \\\"БАНК ТОЧКА\\\"\",\n            \"bankCorrAccount\": \"30101810745374525104\",\n            \"taxCode\": \"660000000000\",\n            \"type\": \"company\",\n            \"secondSideName\": \"ООО \\\"ГОС-АЛЬЯНС\\\"\"\n        }\n    }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"customerCode\\\": \\\"300000092\\\",\\n        \\\"accountId\\\": \\\"40817810802000000008/044525104\\\",\\n        \\\"documentId\\\": \\\"1cf95c4f-e794-4407-bac4-0829f19bd2be\\\",\\n        \\\"Content\\\": {\\n            \\\"Act\\\": {\\n                \\\"number\\\": \\\"3\\\",\\n                \\\"basedOn\\\": \\\"Основание платежа\\\",\\n \\\"comment\\\": \\\"Комментарий\\\",\\n                \\\"date\\\": \\\"2021-05-06\\\",\\n                \\\"totalAmount\\\": \\\"12345\\\",\\n                \\\"totalNds\\\": \\\"1\\\",\\n \\\"Positions\\\": [\\n                    {\\n \\\"positionName\\\": \\\"Название товара или услуги\\\",\\n \\\"unitCode\\\": \\\"шт.\\\",\\n                        \\\"ndsKind\\\": \\\"nds_0\\\",\\n                        \\\"price\\\": \\\"12345.00\\\",\\n                        \\\"quantity\\\": \\\"12345\\\",\\n                        \\\"totalAmount\\\": \\\"12345\\\",\\n                        \\\"totalNds\\\": \\\"1\\\"\\n }\\n                ]\\n            }\\n        },\\n        \\\"SecondSide\\\": {\\n            \\\"accountId\\\": \\\"40817810802000000008/044525104\\\",\\n            \\\"legalAddress\\\": \\\"197183, г. Санкт-Петербург, ул. Сестрорецкая, д. 8\\\",\\n            \\\"kpp\\\": \\\"668101001\\\",\\n            \\\"bankName\\\": \\\"ООО \\\\\\\"БАНК ТОЧКА\\\\\\\"\\\",\\n            \\\"bankCorrAccount\\\": \\\"30101810745374525104\\\",\\n            \\\"taxCode\\\": \\\"660000000000\\\",\\n            \\\"type\\\": \\\"company\\\",\\n \\\"secondSideName\\\": \\\"ООО \\\\\\\"ГОС-АЛЬЯНС\\\\\\\"\\\"\\n        }\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/closing-documents\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/closing-documents',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"accountId\": \"40817810802000000008/044525104\",\n        \"documentId\": \"1cf95c4f-e794-4407-bac4-0829f19bd2be\",\n        \"Content\": {\n            \"Act\": {\n                \"number\": \"3\",\n                \"basedOn\": \"Основание платежа\",\n                \"comment\": \"Комментарий\",\n                \"date\": \"2021-05-06\",\n                \"totalAmount\": \"12345\",\n                \"totalNds\": \"1\",\n                \"Positions\": [\n                    {\n                        \"positionName\": \"Название товара или услуги\",\n                        \"unitCode\": \"шт.\",\n                        \"ndsKind\": \"nds_0\",\n                        \"price\": \"12345.00\",\n                        \"quantity\": \"12345\",\n                        \"totalAmount\": \"12345\",\n                        \"totalNds\": \"1\"\n                    }\n                ]\n            }\n        },\n        \"SecondSide\": {\n            \"accountId\": \"40817810802000000008/044525104\",\n            \"legalAddress\": \"197183, г. Санкт-Петербург, ул. Сестрорецкая, д. 8\",\n            \"kpp\": \"668101001\",\n            \"bankName\": \"ООО \\\\\"БАНК ТОЧКА\\\\\"\",\n            \"bankCorrAccount\": \"30101810745374525104\",\n            \"taxCode\": \"660000000000\",\n            \"type\": \"company\",\n            \"secondSideName\": \"ООО \\\\\"ГОС-АЛЬЯНС\\\\\"\"\n        }\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/closing-documents\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"customerCode\": \"300000092\",\n    \"accountId\": \"40817810802000000008/044525104\",\n    \"documentId\": \"1cf95c4f-e794-4407-bac4-0829f19bd2be\",\n    \"Content\": {\n      \"Act\": {\n        \"number\": \"3\",\n        \"basedOn\": \"Основание платежа\",\n        \"comment\": \"Комментарий\",\n        \"date\": \"2021-05-06\",\n        \"totalAmount\": \"12345\",\n        \"totalNds\": \"1\",\n        \"Positions\": [\n          {\n            \"positionName\": \"Название товара или услуги\",\n            \"unitCode\": \"шт.\",\n            \"ndsKind\": \"nds_0\",\n            \"price\": \"12345.00\",\n            \"quantity\": \"12345\",\n            \"totalAmount\": \"12345\",\n            \"totalNds\": \"1\"\n          }\n        ]\n      }\n    },\n    \"SecondSide\": {\n      \"accountId\": \"40817810802000000008/044525104\",\n      \"legalAddress\": \"197183, г. Санкт-Петербург, ул. Сестрорецкая, д. 8\",\n      \"kpp\": \"668101001\",\n      \"bankName\": \"ООО \\\"БАНК ТОЧКА\\\"\",\n      \"bankCorrAccount\": \"30101810745374525104\",\n      \"taxCode\": \"660000000000\",\n      \"type\": \"company\",\n      \"secondSideName\": \"ООО \\\"ГОС-АЛЬЯНС\\\"\"\n    }\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/closing-documents/{customerCode}/{documentId}": {
      "delete": {
        "tags": [
          "Работа с закрывающими документами"
        ],
        "summary": "Delete Closing Documents",
        "description": "Метод для удаления закрывающего документа",
        "operationId": "delete_closing_documents_invoice__apiVersion__closing_documents__customerCode___documentId__delete",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор документа",
              "title": "Documentid"
            },
            "description": "Уникальный идентификатор документа",
            "example": "1cf95c4f-e794-4407-bac4-0829f19bd2be"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff --request DELETE 'https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be\")\n  .method(\"DELETE\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'DELETE',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/closing-documents/{customerCode}/{documentId}/email": {
      "post": {
        "tags": [
          "Работа с закрывающими документами"
        ],
        "summary": "Send Closing Documents To Email",
        "description": "Метод для отправки закрывающего документа на почту",
        "operationId": "send_closing_documents_to_email_invoice__apiVersion__closing_documents__customerCode___documentId__email_post",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор документа",
              "title": "Documentid"
            },
            "description": "Уникальный идентификатор документа",
            "example": "1cf95c4f-e794-4407-bac4-0829f19bd2be"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDocumentToEmailRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/email' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"email\": \"user@example.com\"\n    }\n}'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"email\\\": \\\"user@example.com\\\"\\n    }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/email\")\n  .method(\"POST\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/email',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"email\": \"user@example.com\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/email\"\n\npayload = json.dumps({\n  \"Data\": {\n    \"email\": \"user@example.com\"\n  }\n})\nheaders = {\n  'Authorization': 'Bearer <token>',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/invoice/{apiVersion}/closing-documents/{customerCode}/{documentId}/file": {
      "get": {
        "tags": [
          "Работа с закрывающими документами"
        ],
        "summary": "Get Closing Document",
        "description": "Метод для получения файла закрывающего документа",
        "operationId": "get_closing_document_invoice__apiVersion__closing_documents__customerCode___documentId__file_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ManageInvoiceData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор документа",
              "title": "Documentid"
            },
            "description": "Уникальный идентификатор документа",
            "example": "1cf95c4f-e794-4407-bac4-0829f19bd2be"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "examples": {
                  "Act": {
                    "summary": "Invoice file",
                    "X-Content-Url": "https://enter.tochka.com/doc/openapi/static/file_examples/act_example.pdf"
                  },
                  "Invoicef": {
                    "summary": "Invoice file",
                    "X-Content-Url": "https://enter.tochka.com/doc/openapi/static/file_examples/invoicef_example.pdf"
                  },
                  "PackingList": {
                    "summary": "Invoice file",
                    "X-Content-Url": "https://enter.tochka.com/doc/openapi/static/file_examples/packing_list_example.pdf"
                  }
                }
              }
            },
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "Заголовок, содержащий MIME-type файла",
                "example": "application/pdf"
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "Заголовок, содержащий название файла",
                "example": "attachment; filename=document.pdf"
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/file' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/file\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/file',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/invoice/v1.0/closing-documents/300000092/1cf95c4f-e794-4407-bac4-0829f19bd2be/file\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/open-banking/{apiVersion}/accounts": {
      "get": {
        "tags": [
          "Работа со счетами"
        ],
        "summary": "Get Accounts List",
        "description": "Метод для получения списка доступных счетов\n",
        "operationId": "get_accounts_list_open_banking__apiVersion__accounts_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadAccountsBasic",
              "ReadAccountsDetail"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application__open_banking__models__external_models__AccountListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/open-banking/v1.0/accounts' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/accounts',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/accounts\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/accounts\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/open-banking/{apiVersion}/accounts/{accountId}": {
      "get": {
        "tags": [
          "Работа со счетами"
        ],
        "summary": "Get Account Info",
        "description": "Метод для получения информации по конкретному счёту\n",
        "operationId": "get_account_info_open_banking__apiVersion__accounts__accountId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadAccountsBasic",
              "ReadAccountsDetail"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный и неизменный идентификатор счёта",
              "title": "Accountid"
            },
            "description": "Уникальный и неизменный идентификатор счёта",
            "example": "40817810802000000008/044525104"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/open-banking/{apiVersion}/accounts/{accountId}/authorized-card-transactions": {
      "get": {
        "tags": [
          "Работа с балансами счетов"
        ],
        "summary": "Get Authorized Card Transactions",
        "description": "Метод для получения авторизованных карточных транзакций конкретного счёта",
        "operationId": "get_authorized_card_transactions_open_banking__apiVersion__accounts__accountId__authorized_card_transactions_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadBalances"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор счета",
              "title": "Accountid"
            },
            "description": "Идентификатор счета",
            "example": "40817810802000000008/044525104"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardTransactionsListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/open-banking/{apiVersion}/accounts/{accountId}/balances": {
      "get": {
        "tags": [
          "Работа с балансами счетов"
        ],
        "summary": "Get Balance Info",
        "description": "Метод для получения информации о балансе конкретного счёта\n",
        "operationId": "get_balance_info_open_banking__apiVersion__accounts__accountId__balances_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadBalances"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор счета",
              "title": "Accountid"
            },
            "description": "Идентификатор счета",
            "example": "40817810802000000008/044525104"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104/balances' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104/balances',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104/balances\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104/balances\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/open-banking/{apiVersion}/accounts/{accountId}/statements/{statementId}": {
      "get": {
        "tags": [
          "Работа с выписками"
        ],
        "summary": "Get Statement",
        "description": "Метод для получения конкретной выписки  \n\nПосле вызова метода `Init Statement` с помощью `statementId` можно отследить, на каком этапе создание определённой выписки.  \n\nЕсть три статуса:\n- _Created_ — создан запрос на выписку;  \n- _Processing_ — запрос в обработке;  \n- _Ready_ — выписка готова.\n\n**Особенности:**  \nМетод _Init Statement_ отрабатывает асинхронно. Отражаются только операции, находящиеся в финальном статусе — _Ready_.\n",
        "operationId": "get_statement_open_banking__apiVersion__accounts__accountId__statements__statementId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadStatements"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор счета",
              "title": "Accountid"
            },
            "description": "Идентификатор счета",
            "example": "40817810802000000008/044525104"
          },
          {
            "name": "statementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор выписки",
              "title": "Statementid"
            },
            "description": "Идентификатор выписки",
            "example": "123243234"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104/statements/123243234' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104/statements/123243234',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104/statements/123243234\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/accounts/40817810802000000008/044525104/statements/123243234\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/open-banking/{apiVersion}/balances": {
      "get": {
        "tags": [
          "Работа с балансами счетов"
        ],
        "summary": "Get Balances List",
        "description": "Метод для получения баланса по нескольким счетам\n",
        "operationId": "get_balances_list_open_banking__apiVersion__balances_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadBalances"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/open-banking/v1.0/balances' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/balances',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/balances\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/balances\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/open-banking/{apiVersion}/customers": {
      "get": {
        "tags": [
          "Работа с клиентами"
        ],
        "summary": "Get Customers List",
        "description": "Метод для получения списка доступных клиентов\n",
        "operationId": "get_customers_list_open_banking__apiVersion__customers_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadCustomerData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/open-banking/v1.0/customers' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/customers',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/customers\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/customers\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/open-banking/{apiVersion}/customers/{customerCode}": {
      "get": {
        "tags": [
          "Работа с клиентами"
        ],
        "summary": "Get Customer Info",
        "description": "Метод для получения информации по конкретному клиенту\n",
        "operationId": "get_customer_info_open_banking__apiVersion__customers__customerCode__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadCustomerData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор клиента",
              "title": "Customercode"
            },
            "description": "Идентификатор клиента",
            "example": "300000092"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/open-banking/v1.0/customers/300000092' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/customers/300000092',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/customers/300000092\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/customers/300000092\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/open-banking/{apiVersion}/statements": {
      "post": {
        "tags": [
          "Работа с выписками"
        ],
        "summary": "Init Statement",
        "description": "Метод для создания выписки по конкретному счёту\n",
        "operationId": "init_statement_open_banking__apiVersion__statements_post",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadStatements"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatementInitRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementInitResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/open-banking/v1.0/statements' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"Statement\": {\n        \"accountId\": \"40817810802000000008/044525104\",\n        \"startDateTime\": \"2019-01-01\",\n        \"endDateTime\": \"2019-01-01\"\n    }\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/statements',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"Statement\": {\n        \"accountId\": \"40817810802000000008/044525104\",\n        \"startDateTime\": \"2019-01-01\",\n        \"endDateTime\": \"2019-01-01\"\n    }\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/statements\"\npayload = json.dumps({\n    \"Data\": {\n         \"Statement\": {\n            \"accountId\": \"40817810802000000008/044525104\",\n            \"startDateTime\": \"2019-01-01\",\n            \"endDateTime\": \"2019-01-01\"\n    }\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\r\\n    \\\"Data\\\": {\\r\\n        \\\"Statement\\\": {\\r\\n            \\\"accountId\\\": \\\"40817810802000000008/044525104\\\",\\r\\n            \\\"startDateTime\\\": \\\"2019-01-01\\\",\\r\\n            \\\"endDateTime\\\": \\\"2019-01-01\\\"\\r\\n        }\\r\\n    }\\r\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/statements\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "get": {
        "tags": [
          "Работа с выписками"
        ],
        "summary": "Get Statements List",
        "description": "Метод для получения списка доступных выписок  \n\nПосле вызова метода `Init Statement` можно отследить, в каком статусе готовящаяся выписка:  \n- _Created_ — только создан запрос на выписку;\n- _Processing_ — запрос в обработке;\n- _Ready_ — выписка готова.\n\n**Особенности:**  \nОтражаются только операции, находящиеся в финальном статусе — _Ready_.",
        "operationId": "get_statements_list_open_banking__apiVersion__statements_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadStatements"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Максимальное количество выписок в ответе",
              "default": 5,
              "title": "Limit"
            },
            "description": "Максимальное количество выписок в ответе"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/open-banking/v1.0/statements' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/open-banking/v1.0/statements',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/open-banking/v1.0/statements\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/open-banking/v1.0/statements\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/payment/{apiVersion}/for-sign": {
      "post": {
        "tags": [
          "Работа с платежами"
        ],
        "summary": "Create Payment For Sign",
        "description": "Метод для создания платежа.  \n\nЕсли вы создаёте платёж за третье лицо в бюджет, заполните поля `payerINN` и `payerKPP`.\n\n**Обратите внимание:**  \n_paymentDate_ нужно заполнить по часовому поясу Москвы.\n",
        "operationId": "create_payment_for_sign_payment__apiVersion__for_sign_post",
        "security": [
          {
            "Необходимые разрешения": [
              "CreatePaymentForSign"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentForSignRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForSignResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/payment/v1.0/for-sign' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"accountCode\": \"40702810840020002503\",\n         \"bankCode\": \"044525104\",\n         \"payerINN\": \"5001038736\",\n         \"payerKPP\": \"500101001\",\n         \"counterpartyBankBic\": \"044525104\",\n         \"counterpartyAccountNumber\": \"40702810840020002504\",\n         \"counterpartyINN\": \"5001038736\",\n         \"counterpartyKPP\": \"500101001\",\n         \"counterpartyName\": \"ООО \\\"БАЙКАЛ-СЕРВИС ТК\\\"\",\n         \"counterpartyBankCorrAccount\": \"30101810745374525104\",\n         \"paymentAmount\": \"700.33\",\n         \"paymentDate\": \"2018-03-29\",\n         \"paymentNumber\": \"9195\",\n         \"paymentPriority\": \"5\",\n         \"paymentPurpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n         \"codePurpose\": \"1\",\n         \"supplierBillId\": \"1\",\n         \"taxInfoDocumentDate\": \"2018-03-29\",\n         \"taxInfoDocumentNumber\": \"12\",\n         \"taxInfoKBK\": \"18210202020061000160\",\n         \"taxInfoOKATO\": \"65401364000\",\n         \"taxInfoPeriod\": \"МС.08.2009\",\n         \"taxInfoReasonCode\": \"ТП\",\n         \"taxInfoStatus\": \"08\",\n         \"budgetPaymentCode\": \"1\"\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/payment/v1.0/for-sign',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"accountCode\": \"40702810840020002503\",\n         \"bankCode\": \"044525104\",\n         \"payerINN\": \"5001038736\",\n         \"payerKPP\": \"500101001\",\n         \"counterpartyBankBic\": \"044525104\",\n         \"counterpartyAccountNumber\": \"40702810840020002504\",\n         \"counterpartyINN\": \"5001038736\",\n         \"counterpartyKPP\": \"500101001\",\n         \"counterpartyName\": \"ООО \\\"БАЙКАЛ-СЕРВИС ТК\\\"\",\n         \"counterpartyBankCorrAccount\": \"30101810745374525104\",\n         \"paymentAmount\": \"700.33\",\n         \"paymentDate\": \"2018-03-29\",\n         \"paymentNumber\": \"9195\",\n         \"paymentPriority\": \"5\",\n         \"paymentPurpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n         \"codePurpose\": \"1\",\n         \"supplierBillId\": \"1\",\n         \"taxInfoDocumentDate\": \"2018-03-29\",\n         \"taxInfoDocumentNumber\": \"12\",\n         \"taxInfoKBK\": \"18210202020061000160\",\n         \"taxInfoOKATO\": \"65401364000\",\n         \"taxInfoPeriod\": \"МС.08.2009\",\n         \"taxInfoReasonCode\": \"ТП\",\n         \"taxInfoStatus\": \"08\",\n         \"budgetPaymentCode\": \"1\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/payment/v1.0/for-sign\"\npayload = json.dumps({\n    \"Data\": {\n         \"accountCode\": \"40702810840020002503\",\n         \"bankCode\": \"044525104\",\n         \"payerINN\": \"5001038736\",\n         \"payerKPP\": \"500101001\",\n         \"counterpartyBankBic\": \"044525104\",\n         \"counterpartyAccountNumber\": \"40702810840020002504\",\n         \"counterpartyINN\": \"5001038736\",\n         \"counterpartyKPP\": \"500101001\",\n         \"counterpartyName\": \"ООО \\\"БАЙКАЛ-СЕРВИС ТК\\\"\",\n         \"counterpartyBankCorrAccount\": \"30101810745374525104\",\n         \"paymentAmount\": \"700.33\",\n         \"paymentDate\": \"2018-03-29\",\n         \"paymentNumber\": \"9195\",\n         \"paymentPriority\": \"5\",\n         \"paymentPurpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n         \"codePurpose\": \"1\",\n         \"supplierBillId\": \"1\",\n         \"taxInfoDocumentDate\": \"2018-03-29\",\n         \"taxInfoDocumentNumber\": \"12\",\n         \"taxInfoKBK\": \"18210202020061000160\",\n         \"taxInfoOKATO\": \"65401364000\",\n         \"taxInfoPeriod\": \"МС.08.2009\",\n         \"taxInfoReasonCode\": \"ТП\",\n         \"taxInfoStatus\": \"08\",\n         \"budgetPaymentCode\": \"1\"\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\r\\n\\\"Data\\\": {\\r\\n            \\\"accountCode\\\": \\\"40702810840020002503\\\",\\r\\n             \\\"bankCode\\\": \\\"044525104\\\",\\r\\n             \\\"payerINN\\\": \\\"5001038736\\\",\\r\\n             \\\"payerKPP\\\": \\\"500101001\\\",\\r\\n             \\\"counterpartyBankBic\\\": \\\"044525104\\\",\\r\\n             \\\"counterpartyAccountNumber\\\": \\\"40702810840020002504\\\",\\r\\n             \\\"counterpartyINN\\\": \\\"5001038736\\\",\\r\\n             \\\"counterpartyKPP\\\": \\\"500101001\\\",\\r\\n             \\\"counterpartyName\\\": \\\"ООО \\\\\\\"БАЙКАЛ-СЕРВИС ТК\\\\\\\"\\\",\\r\\n             \\\"counterpartyBankCorrAccount\\\": \\\"30101810745374525104\\\",\\r\\n             \\\"paymentAmount\\\": \\\"700.33\\\",\\r\\n             \\\"paymentDate\\\": \\\"2018-03-29\\\",\\r\\n             \\\"paymentNumber\\\": \\\"9195\\\",\\r\\n             \\\"paymentPriority\\\": \\\"5\\\",\\r\\n             \\\"paymentPurpose\\\": \\\"Оплата по счету № 1 от 01.01.2021. Без НДС\\\",\\r\\n             \\\"codePurpose\\\": \\\"1\\\",\\r\\n             \\\"supplierBillId\\\": \\\"1\\\",\\r\\n             \\\"taxInfoDocumentDate\\\": \\\"2018-03-29\\\",\\r\\n             \\\"taxInfoDocumentNumber\\\": \\\"12\\\",\\r\\n             \\\"taxInfoKBK\\\": \\\"18210202020061000160\\\",\\r\\n             \\\"taxInfoOKATO\\\": \\\"65401364000\\\",\\r\\n             \\\"taxInfoPeriod\\\": \\\"МС.08.2009\\\",\\r\\n             \\\"taxInfoReasonCode\\\": \\\"ТП\\\",\\r\\n             \\\"taxInfoStatus\\\": \\\"08\\\",\\r\\n             \\\"budgetPaymentCode\\\": \\\"1\\\"\\r\\n    }\\r\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/payment/v1.0/for-sign\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "get": {
        "tags": [
          "Работа с платежами"
        ],
        "summary": "Get Payment For Sign List",
        "description": "Метод для получения списка платежей находящихся в разделе «На подпись» интернет-банка",
        "operationId": "get_payment_for_sign_list_payment__apiVersion__for_sign_get",
        "security": [
          {
            "Необходимые разрешения": [
              "CreatePaymentForSign"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForSignListResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl --location --globoff 'https://enter.tochka.com/uapi/payment/v1.0/for-sign?customerCode=300000092' \\\n--header 'Authorization: Bearer <token>'"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/payment/v1.0/for-sign?customerCode=300000092\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/payment/v1.0/for-sign?customerCode=300000092',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://enter.tochka.com/uapi/payment/v1.0/for-sign?customerCode=300000092\"\n\npayload = {}\nheaders = {\n  'Authorization': 'Bearer <token>'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
          }
        ]
      }
    },
    "/payment/{apiVersion}/order": {
      "post": {
        "tags": [
          "Работа с платежами"
        ],
        "summary": "Create Payment",
        "description": "Метод для создания и подписания платежа.  \n\n- Если вы создаёте платеж в бюджет, то необходимо заполнить поле `payerKPP`\n- Если вы создаёте платёж _за третье лицо в бюджет_, заполните поля `payerINN` и `payerKPP`.\n\n**Обратите внимание:**  \n_paymentDate_ нужно заполнить по часовому поясу Москвы.\n",
        "operationId": "create_payment_payment__apiVersion__order_post",
        "security": [
          {
            "Необходимые разрешения": [
              "CreatePaymentOrder"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentOrderRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOrderResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/payment/v1.0/order' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"accountCode\": \"40702810840020002503\",\n         \"bankCode\": \"044525104\",\n         \"payerINN\": \"5001038736\",\n         \"payerKPP\": \"500101001\",\n         \"counterpartyBankBic\": \"044525104\",\n         \"counterpartyAccountNumber\": \"40702810840020002504\",\n         \"counterpartyINN\": \"5001038736\",\n         \"counterpartyKPP\": \"500101001\",\n         \"counterpartyName\": \"ООО \\\"БАЙКАЛ-СЕРВИС ТК\\\"\",\n         \"counterpartyBankCorrAccount\": \"30101810745374525104\",\n         \"paymentAmount\": \"700.33\",\n         \"paymentDate\": \"2018-03-29\",\n         \"paymentNumber\": \"9195\",\n         \"paymentPriority\": \"5\",\n         \"paymentPurpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n         \"codePurpose\": \"1\",\n         \"supplierBillId\": \"1\",\n         \"taxInfoDocumentDate\": \"2018-03-29\",\n         \"taxInfoDocumentNumber\": \"12\",\n         \"taxInfoKBK\": \"18210202020061000160\",\n         \"taxInfoOKATO\": \"65401364000\",\n         \"taxInfoPeriod\": \"МС.08.2009\",\n         \"taxInfoReasonCode\": \"ТП\",\n         \"taxInfoStatus\": \"08\",\n         \"budgetPaymentCode\": \"1\"\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/payment/v1.0/order',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"accountCode\": \"40702810840020002503\",\n         \"bankCode\": \"044525104\",\n         \"payerINN\": \"5001038736\",\n         \"payerKPP\": \"500101001\",\n         \"counterpartyBankBic\": \"044525104\",\n         \"counterpartyAccountNumber\": \"40702810840020002504\",\n         \"counterpartyINN\": \"5001038736\",\n         \"counterpartyKPP\": \"500101001\",\n         \"counterpartyName\": \"ООО \\\"БАЙКАЛ-СЕРВИС ТК\\\"\",\n         \"counterpartyBankCorrAccount\": \"30101810745374525104\",\n         \"paymentAmount\": \"700.33\",\n         \"paymentDate\": \"2018-03-29\",\n         \"paymentNumber\": \"9195\",\n         \"paymentPriority\": \"5\",\n         \"paymentPurpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n         \"codePurpose\": \"1\",\n         \"supplierBillId\": \"1\",\n         \"taxInfoDocumentDate\": \"2018-03-29\",\n         \"taxInfoDocumentNumber\": \"12\",\n         \"taxInfoKBK\": \"18210202020061000160\",\n         \"taxInfoOKATO\": \"65401364000\",\n         \"taxInfoPeriod\": \"МС.08.2009\",\n         \"taxInfoReasonCode\": \"ТП\",\n         \"taxInfoStatus\": \"08\",\n         \"budgetPaymentCode\": \"1\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/payment/v1.0/order\"\npayload = json.dumps({\n    \"Data\": {\n         \"accountCode\": \"40702810840020002503\",\n         \"bankCode\": \"044525104\",\n         \"payerINN\": \"5001038736\",\n         \"payerKPP\": \"500101001\",\n         \"counterpartyBankBic\": \"044525104\",\n         \"counterpartyAccountNumber\": \"40702810840020002504\",\n         \"counterpartyINN\": \"5001038736\",\n         \"counterpartyKPP\": \"500101001\",\n         \"counterpartyName\": \"ООО \\\"БАЙКАЛ-СЕРВИС ТК\\\"\",\n         \"counterpartyBankCorrAccount\": \"30101810745374525104\",\n         \"paymentAmount\": \"700.33\",\n         \"paymentDate\": \"2018-03-29\",\n         \"paymentNumber\": \"9195\",\n         \"paymentPriority\": \"5\",\n         \"paymentPurpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n         \"codePurpose\": \"1\",\n         \"supplierBillId\": \"1\",\n         \"taxInfoDocumentDate\": \"2018-03-29\",\n         \"taxInfoDocumentNumber\": \"12\",\n         \"taxInfoKBK\": \"18210202020061000160\",\n         \"taxInfoOKATO\": \"65401364000\",\n         \"taxInfoPeriod\": \"МС.08.2009\",\n         \"taxInfoReasonCode\": \"ТП\",\n         \"taxInfoStatus\": \"08\",\n         \"budgetPaymentCode\": \"1\"\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\r\\n\\\"Data\\\": {\\r\\n            \\\"accountCode\\\": \\\"40702810840020002503\\\",\\r\\n             \\\"bankCode\\\": \\\"044525104\\\",\\r\\n             \\\"payerINN\\\": \\\"5001038736\\\",\\r\\n             \\\"payerKPP\\\": \\\"500101001\\\",\\r\\n             \\\"counterpartyBankBic\\\": \\\"044525104\\\",\\r\\n             \\\"counterpartyAccountNumber\\\": \\\"40702810840020002504\\\",\\r\\n             \\\"counterpartyINN\\\": \\\"5001038736\\\",\\r\\n             \\\"counterpartyKPP\\\": \\\"500101001\\\",\\r\\n             \\\"counterpartyName\\\": \\\"ООО \\\\\\\"БАЙКАЛ-СЕРВИС ТК\\\\\\\"\\\",\\r\\n             \\\"counterpartyBankCorrAccount\\\": \\\"30101810745374525104\\\",\\r\\n             \\\"paymentAmount\\\": \\\"700.33\\\",\\r\\n             \\\"paymentDate\\\": \\\"2018-03-29\\\",\\r\\n             \\\"paymentNumber\\\": \\\"9195\\\",\\r\\n             \\\"paymentPriority\\\": \\\"5\\\",\\r\\n             \\\"paymentPurpose\\\": \\\"Оплата по счету № 1 от 01.01.2021. Без НДС\\\",\\r\\n             \\\"codePurpose\\\": \\\"1\\\",\\r\\n             \\\"supplierBillId\\\": \\\"1\\\",\\r\\n             \\\"taxInfoDocumentDate\\\": \\\"2018-03-29\\\",\\r\\n             \\\"taxInfoDocumentNumber\\\": \\\"12\\\",\\r\\n             \\\"taxInfoKBK\\\": \\\"18210202020061000160\\\",\\r\\n             \\\"taxInfoOKATO\\\": \\\"65401364000\\\",\\r\\n             \\\"taxInfoPeriod\\\": \\\"МС.08.2009\\\",\\r\\n             \\\"taxInfoReasonCode\\\": \\\"ТП\\\",\\r\\n             \\\"taxInfoStatus\\\": \\\"08\\\",\\r\\n             \\\"budgetPaymentCode\\\": \\\"1\\\"\\r\\n    }\\r\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/payment/v1.0/order\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/payment/{apiVersion}/status/{requestId}": {
      "get": {
        "tags": [
          "Работа с платежами"
        ],
        "summary": "Get Payment Status",
        "description": "Метод для получения статуса платежа\n",
        "operationId": "get_payment_status_payment__apiVersion__status__requestId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "CreatePaymentForSign",
              "CreatePaymentOrder"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор запроса",
              "title": "Requestid"
            },
            "description": "Идентификатор запроса",
            "example": "openapi-b96d770e-769f-49ce-9630-890e00d47720"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentStatusResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/payment/v1.0/status/openapi-b96d770e-769f-49ce-9630-890e00d47720' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/payment/v1.0/status/openapi-b96d770e-769f-49ce-9630-890e00d47720',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/payment/v1.0/status/openapi-b96d770e-769f-49ce-9630-890e00d47720\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/payment/v1.0/status/openapi-b96d770e-769f-49ce-9630-890e00d47720\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/account/{legalId}": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с ЮЛ"
        ],
        "summary": "Get Accounts List",
        "description": "Метод для получения списка счетов юрлица в Системе быстрых платежей\n",
        "operationId": "get_accounts_list_sbp__apiVersion__account__legalId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "legalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
              "title": "Legalid"
            },
            "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "example": "LF0000000001"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application__sbp__models__response_models__sbp__AccountListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/account/LF0000000001' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/account/LF0000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/account/LF0000000001\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/account/LF0000000001\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/b2b-qr-code/merchant/{merchantId}/{accountId}": {
      "post": {
        "tags": [
          "Сервис СБП: работа с B2B QR-кодами"
        ],
        "summary": "Register B2B Qr Code",
        "description": "Метод для регистрации B2B QR-кода в Системе быстрых платежей\n",
        "operationId": "register_b2b_qr_code_sbp__apiVersion__b2b_qr_code_merchant__merchantId___accountId__post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 40,
              "title": "Уникальный и неизменный идентификатор счёта юрлица"
            },
            "example": "40817810802000000008/044525104"
          },
          {
            "name": "merchantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 12,
              "description": "Идентификатор ТСП",
              "title": "Merchantid"
            },
            "description": "Идентификатор ТСП",
            "example": "MF0000000001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterB2BQRCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BQRCodeModelResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/b2b-qr-code/{qrcId}": {
      "get": {
        "tags": [
          "Сервис СБП: работа с B2B QR-кодами"
        ],
        "summary": "Get B2B Qr Code",
        "description": "Метод для получения информации о B2B QR-коде\n",
        "operationId": "get_b2b_qr_code_sbp__apiVersion__b2b_qr_code__qrcId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrcId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор QR-кода в СБП",
              "title": "Qrcid"
            },
            "description": "Идентификатор QR-кода в СБП",
            "example": "AS000000000000000000000000000001"
          },
          {
            "name": "width",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Ширина изображения (по умолчанию: 300)",
              "title": "Width"
            },
            "description": "Ширина изображения (по умолчанию: 300)",
            "example": 300
          },
          {
            "name": "height",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Высота изображения (по умолчанию: 300)",
              "title": "Height"
            },
            "description": "Высота изображения (по умолчанию: 300)",
            "example": 300
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/B2BQrCodeResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/cashbox-qr-code": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с кассовыми QR-кодами"
        ],
        "summary": "Register Cashbox Qrcode",
        "description": "Метод для регистрации кассового QR-кода",
        "operationId": "register_cashbox_qrcode_sbp__apiVersion__cashbox_qr_code_post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCashboxQrCodeRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterCashboxQrCodeResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/cashbox-qr-code/merchant/{merchantId}/{accountId}": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с кассовыми QR-кодами"
        ],
        "summary": "Get Cashbox Qrcode List",
        "description": "Метод для получения списка кассовых QR-кодов",
        "operationId": "get_cashbox_qrcode_list_sbp__apiVersion__cashbox_qr_code_merchant__merchantId___accountId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "merchantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор ТСП",
              "title": "Merchantid"
            },
            "description": "Идентификатор ТСП",
            "example": "MF0000000001"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный и неизменный идентификатор счёта",
              "title": "Accountid"
            },
            "description": "Уникальный и неизменный идентификатор счёта",
            "example": "40817810802000000008/044525104"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCashboxQRCodeListResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/cashbox-qr-code/{qrcId}": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с кассовыми QR-кодами"
        ],
        "summary": "Get Cashbox Qrcode",
        "description": "Метод для получения информации о кассовом QR-коде",
        "operationId": "get_cashbox_qrcode_sbp__apiVersion__cashbox_qr_code__qrcId__post",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrcId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор QR-кода в СБП",
              "title": "Qrcid"
            },
            "description": "Идентификатор QR-кода в СБП",
            "example": "AS10007GLJ1216F4905A1MTT3CP7GK3N"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetCashboxQRCodeRequestDataModel"
                  }
                ],
                "title": "Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCashboxQrCodeResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/cashbox-qr-code/{qrcId}/account": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с кассовыми QR-кодами"
        ],
        "summary": "Change Cashbox Qrcode Account",
        "description": "Метод для смены счёта зачисления кассового QR-кода",
        "operationId": "change_cashbox_qrcode_account_sbp__apiVersion__cashbox_qr_code__qrcId__account_post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrcId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор QR-кода в СБП",
              "title": "Qrcid"
            },
            "description": "Идентификатор QR-кода в СБП",
            "example": "AS10007GLJ1216F4905A1MTT3CP7GK3N"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCashboxQRCodeAccountRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeCashboxQRCodeAccountResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/cashbox-qr-code/{qrcId}/activate": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с кассовыми QR-кодами"
        ],
        "summary": "Activate Cashbox Qrcode",
        "description": "Метод для активации кассового QR-кода",
        "operationId": "activate_cashbox_qrcode_sbp__apiVersion__cashbox_qr_code__qrcId__activate_post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrcId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор QR-кода в СБП",
              "title": "Qrcid"
            },
            "description": "Идентификатор QR-кода в СБП",
            "example": "AS10007GLJ1216F4905A1MTT3CP7GK3N"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateCashboxQrCodeRequestDataModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivateCashboxQrCodeResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/cashbox-qr-code/{qrcId}/deactivate": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с кассовыми QR-кодами"
        ],
        "summary": "Deactivate Cashbox Qrcode",
        "description": "Метод для деактивации кассового QR-кода",
        "operationId": "deactivate_cashbox_qrcode_sbp__apiVersion__cashbox_qr_code__qrcId__deactivate_post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrcId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор QR-кода в СБП",
              "title": "Qrcid"
            },
            "description": "Идентификатор QR-кода в СБП",
            "example": "AS10007GLJ1216F4905A1MTT3CP7GK3N"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateCashboxQrCodeResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/cashbox-qr-code/{qrcId}/operation": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с кассовыми QR-кодами"
        ],
        "summary": "Get Cashbox Qrcode Operation Info",
        "description": "Метод для получения статуса кассового QR-кода.",
        "operationId": "get_cashbox_qrcode_operation_info_sbp__apiVersion__cashbox_qr_code__qrcId__operation_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrcId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор QR-кода в СБП",
              "title": "Qrcid"
            },
            "description": "Идентификатор QR-кода в СБП",
            "example": "AS10007GLJ1216F4905A1MTT3CP7GK3N"
          },
          {
            "name": "paramsId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор активных значений параметров QR-кода",
              "title": "Paramsid"
            },
            "description": "Идентификатор активных значений параметров QR-кода",
            "example": "AP10001G1HPSOI658DP9SJK41V7JEDRS"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCashboxQrCodeOperationInfoResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/cashbox-qr-code/{qrcId}/status": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с кассовыми QR-кодами"
        ],
        "summary": "Get Cashbox Qrcode Status",
        "description": "Метод для получения статуса кассового QR-кода.",
        "operationId": "get_cashbox_qrcode_status_sbp__apiVersion__cashbox_qr_code__qrcId__status_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrcId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор QR-кода в СБП",
              "title": "Qrcid"
            },
            "description": "Идентификатор QR-кода в СБП",
            "example": "AS10007GLJ1216F4905A1MTT3CP7GK3N"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCashboxQrCodeStatusResponseDataModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sbp/{apiVersion}/customer/{customerCode}/{bankCode}": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с ЮЛ"
        ],
        "summary": "Get Customer Info",
        "description": "Метод для получения информации о клиенте в Системе быстрых платежей\n",
        "operationId": "get_customer_info_sbp__apiVersion__customer__customerCode___bankCode__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 9,
              "maxLength": 9,
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "bankCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 9,
              "maxLength": 9,
              "description": "БИК банка",
              "title": "Bankcode"
            },
            "description": "БИК банка",
            "example": "044525104"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCustomerInfoResponseModelV3"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/customer/300000092/044525104' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/customer/300000092/044525104',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/customer/300000092/044525104\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/customer/300000092/044525104\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/get-sbp-payments": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с возвратами"
        ],
        "summary": "Get Payments",
        "description": "Метод для получения списка платежей в Системе быстрых платежей\n\nОбратите внимание: при поиске платежей за прошедшие дни обязательно передавать атрибут `fromDate` с указанием начальной даты периода. Если этот атрибут не передать, поиск выдаст результаты только за вчерашний и сегодняшний дни.",
        "operationId": "get_payments_sbp__apiVersion__get_sbp_payments_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "customerCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный код клиента",
              "title": "Customercode"
            },
            "description": "Уникальный код клиента",
            "example": "300000092"
          },
          {
            "name": "qrcId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID qr-кода для фильтрации",
              "title": "Qrcid"
            },
            "description": "ID qr-кода для фильтрации"
          },
          {
            "name": "fromDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Начало периода для запроса статусов платежей. При отсутствии параметра в запросе будет задано дефолтное значение",
              "default": "Вчера и сегодня",
              "title": "Fromdate"
            },
            "description": "Начало периода для запроса статусов платежей. При отсутствии параметра в запросе будет задано дефолтное значение",
            "example": "2020-12-20"
          },
          {
            "name": "toDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Конец периода для запроса статусов платежей",
              "title": "Todate"
            },
            "description": "Конец периода для запроса статусов платежей"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Номер страницы",
              "default": 1,
              "title": "Page"
            },
            "description": "Номер страницы"
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Количество записей на странице",
              "default": 1000,
              "title": "Perpage"
            },
            "description": "Количество записей на странице"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SBPPaymentsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/get-sbp-payments?customerCode=300000092' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/get-sbp-payments?customerCode=300000092',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/get-sbp-payments?customerCode=300000092\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/get-sbp-payments?customerCode=300000092\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/legal-entity/{legalId}": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с ЮЛ"
        ],
        "summary": "Get Legal Entity",
        "description": "Метод для получения данных юрлица в Системе быстрых платежей\n",
        "operationId": "get_legal_entity_sbp__apiVersion__legal_entity__legalId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "legalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
              "title": "Legalid"
            },
            "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "example": "LF0000000001"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntityResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/legal-entity/LF0000000001' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/legal-entity/LF0000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/legal-entity/LF0000000001\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/legal-entity/LF0000000001\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "post": {
        "tags": [
          "Сервис СБП: Работа с ЮЛ"
        ],
        "summary": "Set Legal Entity Status",
        "description": "Метод устанавливает статус юрлица в Системе быстрых платежей\n",
        "operationId": "set_legal_entity_status_sbp__apiVersion__legal_entity__legalId__post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "legalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
              "title": "Legalid"
            },
            "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "example": "LF0000000001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/sbp/v1.0/legal-entity/LF0000000001' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"status\": \"Active\"\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/legal-entity/LF0000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"status\": \"Active\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/legal-entity/LF0000000001\"\npayload = json.dumps({\n    \"Data\": {\n         \"status\": \"Active\"\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"status\\\": \\\"Active\\\"\\n    }\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/legal-entity/LF0000000001\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/merchant/legal-entity/{legalId}": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с ТСП"
        ],
        "summary": "Register Merchant",
        "description": "Метод для регистрации ТСП в Системе быстрых платежей\n",
        "operationId": "register_merchant_sbp__apiVersion__merchant_legal_entity__legalId__post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "legalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
              "title": "Legalid"
            },
            "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "example": "LF0000000001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterMerchantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantIdResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/sbp/v1.0/merchant/legal-entity/LF0000000001' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"address\": \"УЛИЦА ТАТАРСКАЯ Б. ДОМ 11\",\n        \"city\": \"Москва\",\n        \"countryCode\": \"RU\",\n        \"countrySubDivisionCode\": \"45\",\n        \"zipCode\": \"115184\",\n        \"brandName\": \"Название торговой точки\",\n        \"capabilities\": \"001\",\n        \"contactPhoneNumber\": \"79991234567\",\n        \"mcc\": \"4121\"\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/merchant/legal-entity/LF0000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"address\": \"УЛИЦА ТАТАРСКАЯ Б. ДОМ 11\",\n        \"city\": \"Москва\",\n        \"countryCode\": \"RU\",\n        \"countrySubDivisionCode\": \"45\",\n        \"zipCode\": \"115184\",\n        \"brandName\": \"Название торговой точки\",\n        \"capabilities\": \"001\",\n        \"contactPhoneNumber\": \"79991234567\",\n        \"mcc\": \"4121\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/merchant/legal-entity/LF0000000001\"\npayload = json.dumps({\n    \"Data\": {\n        \"address\": \"УЛИЦА ТАТАРСКАЯ Б. ДОМ 11\",\n        \"city\": \"Москва\",\n        \"countryCode\": \"RU\",\n        \"countrySubDivisionCode\": \"45\",\n        \"zipCode\": \"115184\",\n        \"brandName\": \"Название торговой точки\",\n        \"capabilities\": \"001\",\n        \"contactPhoneNumber\": \"79991234567\",\n        \"mcc\": \"4121\"\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"address\\\": \\\"УЛИЦА ТАТАРСКАЯ Б. ДОМ 11\\\",\\n        \\\"city\\\": \\\"Москва\\\",\\n        \\\"countryCode\\\": \\\"RU\\\",\\n        \\\"countrySubDivisionCode\\\": \\\"45\\\",\\n        \\\"zipCode\\\": \\\"115184\\\",\\n        \\\"brandName\\\": \\\"Название торговой точки\\\",\\n        \\\"capabilities\\\": \\\"011\\\",\\n        \\\"contactPhoneNumber\\\": \\\"79991234567\\\",\\n        \\\"mcc\\\": \\\"4121\\\"\\n    }\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/merchant/legal-entity/LF0000000001\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "get": {
        "tags": [
          "Сервис СБП: Работа с ТСП"
        ],
        "summary": "Get Merchants List",
        "description": "Метод для получения списка ТСП юрлица\n",
        "operationId": "get_merchants_list_sbp__apiVersion__merchant_legal_entity__legalId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "legalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
              "title": "Legalid"
            },
            "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "example": "LF0000000001"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/merchant/legal-entity/LF0000000001' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/merchant/legal-entity/LF0000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/merchant/legal-entity/LF0000000001\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/merchant/legal-entity/LF0000000001\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/merchant/{merchantId}": {
      "put": {
        "tags": [
          "Сервис СБП: Работа с ТСП"
        ],
        "summary": "Set Merchant Status",
        "description": "Метод устанавливает статус ТСП\n",
        "operationId": "set_merchant_status_sbp__apiVersion__merchant__merchantId__put",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "merchantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 12,
              "title": "Идентификатор ТСП"
            },
            "example": "MF0000000001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request PUT 'https://enter.tochka.com/uapi/sbp/v1.0/merchant/MF0000000001' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n        \"Data\": {\n        \"status\": \"Active\"\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/merchant/MF0000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PUT',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"status\": \"Active\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/merchant/MF0000000001\"\npayload = json.dumps({\n    \"Data\": {\n          \"status\": \"Active\"\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"status\\\": \\\"Active\\\"\\n    }\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/merchant/MF0000000001\")\n  .method(\"PUT\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "get": {
        "tags": [
          "Сервис СБП: Работа с ТСП"
        ],
        "summary": "Get Merchant",
        "description": "Метод для получения информации о ТСП\n",
        "operationId": "get_merchant_sbp__apiVersion__merchant__merchantId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "merchantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 12,
              "title": "Идентификатор ТСП"
            },
            "example": "MF0000000001"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/merchant/MF0000000001' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/merchant/MF0000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/merchant/MF0000000001\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/merchant/MF0000000001\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/qr-code/legal-entity/{legalId}": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с QR-кодами"
        ],
        "summary": "Get Qr Codes List",
        "description": "Метод для получения списка QR-кодов\n",
        "operationId": "get_qr_codes_list_sbp__apiVersion__qr_code_legal_entity__legalId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "legalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
              "title": "Legalid"
            },
            "description": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "example": "LF0000000001"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QRCodeListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/qr-code/legal-entity/LF0000000001' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/qr-code/legal-entity/LF0000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/qr-code/legal-entity/LF0000000001\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/qr-code/legal-entity/LF0000000001\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/qr-code/merchant/{merchantId}/{accountId}": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с QR-кодами"
        ],
        "summary": "Register Qr Code",
        "description": "Метод для регистрации статического или динамического QR-кода в Системе быстрых платежей\n",
        "operationId": "register_qr_code_sbp__apiVersion__qr_code_merchant__merchantId___accountId__post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 40,
              "title": "Уникальный и неизменный идентификатор счёта юрлица"
            },
            "example": "40817810802000000008/044525104"
          },
          {
            "name": "merchantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 12,
              "description": "Идентификатор ТСП",
              "title": "Merchantid"
            },
            "description": "Идентификатор ТСП",
            "example": "MF0000000001"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterQRCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QRCodeModelResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/sbp/v1.0/qr-code/merchant/MF0000000001/40817810802000000008/044525104' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"amount\": 1,\n        \"currency\": \"RUB\",\n        \"paymentPurpose\": \"string\",\n        \"qrcType\": \"02\",\n        \"imageParams\": {\n        \"width\": 200,\n        \"height\": 200,\n        \"mediaType\": \"image/png\"\n    },\n        \"sourceName\": \"string\",\n        \"ttl\": \"1\",\n        \"redirectUrl\": \"http://example.com\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/qr-code/merchant/MF0000000001/40817810802000000008/044525104',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"amount\": 1,\n        \"currency\": \"RUB\",\n        \"paymentPurpose\": \"string\",\n        \"qrcType\": \"02\",\n        \"imageParams\": {\n        \"width\": 200,\n        \"height\": 200,\n        \"mediaType\": \"image/png\"\n    },\n        \"sourceName\": \"string\",\n        \"ttl\": \"1\",\n        \"redirectUrl\": \"http://example.com\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/qr-code/merchant/MF0000000001/40817810802000000008/044525104\"\npayload = json.dumps({\n    \"Data\": {\n         \"amount\": 1,\n         \"currency\": \"RUB\",\n         \"paymentPurpose\": \"Bill\",\n         \"qrcType\": \"02\",\n         \"imageParams\": {\n           \"width\": 200,\n           \"height\": 200,\n           \"mediaType\": \"image/png\"\n},\n         \"sourceName\": \"string\",\n         \"ttl\": \"1\",\n         \"redirectUrl\": \"http://example.com\"\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"amount\\\": 1,\\n        \\\"currency\\\": \\\"RUB\\\",\\n        \\\"paymentPurpose\\\": \\\"Bill\\\",\\n        \\\"qrcType\\\": \\\"02\\\",\\n        \\\"imageParams\\\": {\\n            \\\"width\\\": 200,\\n            \\\"height\\\": 200,\\n            \\\"mediaType\\\": \\\"image/png\\\"\\n        },\\n        \\\"sourceName\\\": \\\"string\\\",\\n        \\\"ttl\\\": \\\"1\\\",\\n        \\\"redirectUrl\\\": \\\"http://example.com\\\"\\n    }\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/qr-code/merchant/MF0000000001/40817810802000000008/044525104\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/qr-code/{qrcId}": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с QR-кодами"
        ],
        "summary": "Get Qr Code",
        "description": "Метод для получения информации о QR-коде\n",
        "operationId": "get_qr_code_sbp__apiVersion__qr_code__qrcId__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrcId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Идентификатор QR-кода в СБП",
              "title": "Qrcid"
            },
            "description": "Идентификатор QR-кода в СБП",
            "example": "AS000000000000000000000000000001"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QRCodeResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/qr-code/AS000000000000000000000000000001' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/qr-code/AS000000000000000000000000000001',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/qr-code/AS000000000000000000000000000001\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/qr-code/AS000000000000000000000000000001\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/qr-codes/{qrc_ids}/payment-status": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с QR-кодами"
        ],
        "summary": "Get Qr Codes Payment Status",
        "description": "Метод для получения статусов операций по динамическим QR-кодам",
        "operationId": "get_qr_codes_payment_status_sbp__apiVersion__qr_codes__qrc_ids__payment_status_get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "qrc_ids",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Список qr-кодов для запроса статусов, разделенных через запятую",
              "title": "Qrc Ids"
            },
            "description": "Список qr-кодов для запроса статусов, разделенных через запятую",
            "example": "AS10004QQGLUC0HR9MQRC3KBPO40772J,AD10000K4LALRP1E9SPB3H6PB55KBNL7"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QRCodePaymentStatusListResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/qr-codes/AS000000000000000000000000000001/payment-status' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/qr-codes/AS000000000000000000000000000001/payment-status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/qr-codes/AS000000000000000000000000000001/payment-status\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/qr-codes/AS000000000000000000000000000001/payment-status\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/refund": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с возвратами"
        ],
        "summary": "Start Refund",
        "description": "Метод запрашивает возврат платежа через Систему быстрых платежей\n\nЕсли нужно вернуть деньги нерезиденту, назначение платежа должно начинаться с _«{VO99020} Возврат ошибочно полученной суммы transactionId»,_ где `transactionId` — это идентификатор оригинальной операции.\n",
        "operationId": "start_refund_sbp__apiVersion__refund_post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SBPRefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SBPRefundRequestResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/sbp/v1.0/refund' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"bankCode\": \"044525104\",\n        \"accountCode\": \"40817810802000000008\",\n        \"amount\": \"10\",\n        \"currency\": \"RUB\",\n        \"purpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n        \"refTransactionId\": \"48232c9a-ce82-1593-3cb6-5c85a1ffef8f\",\n        \"qrcId\": \"AS10007GLJ1216F4905A1MTT3CP7GK3N\"\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/refund',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"bankCode\": \"044525104\",\n        \"accountCode\": \"40817810802000000008\",\n        \"amount\": \"10\",\n        \"currency\": \"RUB\",\n        \"purpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n        \"refTransactionId\": \"48232c9a-ce82-1593-3cb6-5c85a1ffef8f\",\n        \"qrcId\": \"AS10007GLJ1216F4905A1MTT3CP7GK3N\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/refund\"\npayload = json.dumps({\n    \"Data\": {\n        \"bankCode\": \"044525104\",\n        \"accountCode\": \"40817810802000000008\",\n        \"amount\": \"10\",\n        \"currency\": \"RUB\",\n        \"purpose\": \"Оплата по счету № 1 от 01.01.2021. Без НДС\",\n        \"refTransactionId\": \"48232c9a-ce82-1593-3cb6-5c85a1ffef8f\",\n        \"qrcId\": \"AS10007GLJ1216F4905A1MTT3CP7GK3N\"\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"bankCode\\\": \\\"044525104\\\",\\n        \\\"accountCode\\\": \\\"40817810802000000008\\\",\\n        \\\"amount\\\": \\\"10\\\",\\n        \\\"currency\\\": \\\"RUB\\\",\\n        \\\"purpose\\\": \\\"Оплата по счету № 1 от 01.01.2021. Без НДС\\\",\\n        \\\"refTransactionId\\\": \\\"48232c9a-ce82-1593-3cb6-5c85a1ffef8f\\\",\\n        \\\"qrcId\\\": \\\"AS10007GLJ1216F4905A1MTT3CP7GK3N\\\"\\n    }\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/refund\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/refund/{request_id}": {
      "get": {
        "tags": [
          "Сервис СБП: Работа с возвратами"
        ],
        "summary": "Get Refund Data",
        "description": "Метод для получения информация о платеже-возврате по Системе быстрых платежей\n",
        "operationId": "get_refund_data_sbp__apiVersion__refund__request_id__get",
        "security": [
          {
            "Необходимые разрешения": [
              "ReadSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID запроса",
              "title": "Request Id"
            },
            "description": "ID запроса",
            "example": "Идентификатор запроса"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SBPRefundStatusModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/sbp/v1.0/refund/openapi-b96d770e-769f-49ce-9630-890e00d47720' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/refund/openapi-b96d770e-769f-49ce-9630-890e00d47720',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/refund/openapi-b96d770e-769f-49ce-9630-890e00d47720\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/refund/openapi-b96d770e-769f-49ce-9630-890e00d47720\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/sbp/{apiVersion}/register-sbp-legal-entity": {
      "post": {
        "tags": [
          "Сервис СБП: Работа с ЮЛ"
        ],
        "summary": "Register Legal Entity",
        "description": "Метод для регистрации юрлица в Системе быстрых платежей\n",
        "operationId": "register_legal_entity_sbp__apiVersion__register_sbp_legal_entity_post",
        "security": [
          {
            "Необходимые разрешения": [
              "EditSBPData"
            ]
          }
        ],
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCodeAndBankCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterLegalEntityResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/sbp/v1.0/register-sbp-legal-entity' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"bankCode\": \"044525104\"\n    }\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/sbp/v1.0/register-sbp-legal-entity',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"bankCode\": \"044525104\"\n    }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/sbp/v1.0/register-sbp-legal-entity\"\npayload = json.dumps({\n    \"Data\": {\n        \"customerCode\": \"300000092\",\n        \"bankCode\": \"044525104\"\n    }\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\n    \\\"Data\\\": {\\n        \\\"customerCode\\\": \\\"300000092\\\",\\n        \\\"bankCode\\\": \\\"044525104\\\"\\n    }\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/sbp/v1.0/register-sbp-legal-entity\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/webhook/{apiVersion}/{client_id}": {
      "put": {
        "tags": [
          "Работа с вебхуками"
        ],
        "summary": "Create Webhook",
        "description": "Метод для создания вебхуков\n",
        "operationId": "create_webhook_webhook__apiVersion___client_id__put",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор приложения",
              "title": "Client Id"
            },
            "description": "Уникальный идентификатор приложения",
            "example": "4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook-Input"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request PUT 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n        \"webhooksList\": [\"incomingPayment\"],\n        \"url\": \"https://test.com\"\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PUT',\n  CURLOPT_POSTFIELDS =>'{\n        \"webhooksList\": [\"incomingPayment\"],\n        \"url\": \"https://test.com\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI\"\npayload = json.dumps({\n        \"webhooksList\": [\n          \"incomingPayment\"\n        ],\n        \"url\": \"https://test.com\"\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\r\\n    \\\"webhooksList\\\": [\\\"incomingPayment\\\"],\\r\\n    \\\"url\\\":\\\"https://test.com\\\"\\r\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI\")\n  .method(\"PUT\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "post": {
        "tags": [
          "Работа с вебхуками"
        ],
        "summary": "Edit Webhook",
        "description": "Метод для изменения _URL_ и типа вебхука",
        "operationId": "edit_webhook_webhook__apiVersion___client_id__post",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор приложения",
              "title": "Client Id"
            },
            "description": "Уникальный идентификатор приложения",
            "example": "4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookEditRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n        \"webhooksList\": [\"incomingPayment\"],\n        \"url\": \"https://test.com\"\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n        \"webhooksList\": [\"incomingPayment\"],\n        \"url\": \"https://test.com\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI\"\npayload = json.dumps({\n        \"webhooksList\": [\n          \"incomingPayment\"\n        ],\n        \"url\": \"https://test.com\"\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\r\\n    \\\"webhooksList\\\": [\\\"incomingPayment\\\"],\\r\\n    \\\"url\\\":\\\"https://test.com\\\"\\r\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "get": {
        "tags": [
          "Работа с вебхуками"
        ],
        "summary": "Get Webhooks",
        "description": "Метод для получения списка вебхуков приложения\n",
        "operationId": "get_webhooks_webhook__apiVersion___client_id__get",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор приложения",
              "title": "Client Id"
            },
            "description": "Уникальный идентификатор приложения",
            "example": "4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request GET 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI\")\n  .method(\"GET\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      },
      "delete": {
        "tags": [
          "Работа с вебхуками"
        ],
        "summary": "Delete Webhook",
        "description": "Метод для удаления вебхука\n",
        "operationId": "delete_webhook_webhook__apiVersion___client_id__delete",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор приложения",
              "title": "Client Id"
            },
            "description": "Уникальный идентификатор приложения",
            "example": "4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request DELETE 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI' \\\n--header 'Authorization: Bearer <token>'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'DELETE',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nurl = \"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI\"\npayload = {}\nheaders = {\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"text/plain\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI\")\n  .method(\"DELETE\", body)\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    },
    "/webhook/{apiVersion}/{client_id}/test_send": {
      "post": {
        "tags": [
          "Работа с вебхуками"
        ],
        "summary": "Send Webhook",
        "description": "Метод для проверки отправки вебхука",
        "operationId": "send_webhook_webhook__apiVersion___client_id__test_send_post",
        "parameters": [
          {
            "name": "apiVersion",
            "in": "path",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ApiVersion"
                }
              ],
              "description": "Версия API",
              "title": "Apiversion"
            },
            "description": "Версия API"
          },
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Уникальный идентификатор приложения",
              "title": "Client Id"
            },
            "description": "Уникальный идентификатор приложения",
            "example": "4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookTestSendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanResponseModel"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -g --request POST 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI/test_send' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n        \"webhookType\": \"incomingPayment\"\n}'\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n$curl = curl_init();\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI/test_send',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n        \"webhookType\": \"incomingPayment\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Authorization: Bearer <token>',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\nurl = \"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI/test_send\"\npayload = json.dumps({\n        \"webhookType\": \"incomingPayment\"\n})\nheaders = {\n'Content-Type': 'application/json',\n'Authorization': 'Bearer <token>'\n}\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\nprint(response.text)\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n.build();\n  MediaType mediaType = MediaType.parse(\"application/json\");\n    RequestBody body = RequestBody.create(mediaType, \"{\\r\\n  \\\"webhookType\\\": \\\"incomingPayment\\\"\\r\\n}\");\n  Request request = new Request.Builder()\n  .url(\"https://enter.tochka.com/uapi/webhook/v1.0/4ZY5qFuPsWdz3BfcG1RR5F4ZWOOCwLFI/test_send\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", \"Bearer <token>\")\n  .build();\nResponse response = client.newCall(request).execute();"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "properties": {
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "Статус объекта",
            "examples": [
              "Active"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Время регистрации",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "status",
          "createdAt",
          "legalId"
        ],
        "title": "Account"
      },
      "AccountDetailModel": {
        "properties": {
          "schemeName": {
            "type": "string",
            "title": "Наименование схемы идентификации счёта",
            "examples": [
              "RU.CBR.AccountNumber"
            ]
          },
          "identification": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "name": {
            "type": "string",
            "title": "Название идентификатора счёта",
            "examples": [
              "Основной текущий счёт"
            ]
          }
        },
        "type": "object",
        "required": [
          "schemeName",
          "identification",
          "name"
        ],
        "title": "AccountDetailModel"
      },
      "AccountIdentificationEnum": {
        "type": "string",
        "enum": [
          "RU.CBR.PAN",
          "RU.CBR.CellphoneNumber",
          "RU.CBR.BBAN"
        ],
        "title": "AccountIdentificationEnum"
      },
      "AccountListModel": {
        "properties": {
          "Account": {
            "items": {
              "$ref": "#/components/schemas/AccountModel"
            },
            "type": "array",
            "title": "Account"
          }
        },
        "type": "object",
        "required": [
          "Account"
        ],
        "title": "AccountListModel"
      },
      "AccountListResponse": {
        "properties": {
          "AccountList": {
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "type": "array",
            "title": "Accountlist"
          }
        },
        "type": "object",
        "required": [
          "AccountList"
        ],
        "title": "AccountListResponse"
      },
      "AccountModel": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "accountId": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "transitAccount": {
            "type": "string",
            "title": "Идентификатор транзитного счета"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAccountStatusEnum"
              }
            ],
            "title": "Статус счёта в форме кода",
            "examples": [
              "Enabled"
            ]
          },
          "statusUpdateDateTime": {
            "type": "string",
            "title": "Дата и время изменения статуса счёта. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "currency": {
            "type": "string",
            "title": "Валюта ведения счёта. Используется стандарт ISO 4217",
            "examples": [
              "RUB"
            ]
          },
          "accountType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalTypeEnum"
              }
            ],
            "title": "Тип счёта (физическое или юридическое лицо)",
            "examples": [
              "Personal"
            ]
          },
          "accountSubType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAccountSubTypeEnum"
              }
            ],
            "title": "Подтип счёта ",
            "examples": [
              "CurrentAccount"
            ]
          },
          "registrationDate": {
            "type": "string",
            "format": "date",
            "title": "Дата регистрации счета",
            "examples": [
              "2020-10-20"
            ]
          },
          "accountDetails": {
            "items": {
              "$ref": "#/components/schemas/AccountDetailModel"
            },
            "type": "array",
            "title": "Accountdetails"
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "accountId",
          "status",
          "statusUpdateDateTime",
          "currency",
          "accountType",
          "accountSubType",
          "registrationDate"
        ],
        "title": "AccountModel"
      },
      "AccountResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AccountModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AccountResponseModel",
        "description": "Метод получения информации по счёту"
      },
      "AcquiringChargeSubscriptionRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringChargeSubscriptionRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "AcquiringChargeSubscriptionRequestDataModel"
      },
      "AcquiringChargeSubscriptionRequestModel": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              "1234.00"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "title": "AcquiringChargeSubscriptionRequestModel"
      },
      "AcquiringChargeSubscriptionResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/BooleanResponse"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "AcquiringChargeSubscriptionResponseDataModel"
      },
      "AcquiringCreatePaymentOperationRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringCreatePaymentOperationRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "AcquiringCreatePaymentOperationRequestDataModel"
      },
      "AcquiringCreatePaymentOperationRequestModel": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "amount": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Сумма платежа",
            "examples": [
              "1234.00"
            ]
          },
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес, куда будет переправлен клиент после оплаты услуги",
            "examples": [
              "https://example.com"
            ]
          },
          "failRedirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес, куда будет переправлен клиент в случае неуспешной оплаты",
            "examples": [
              "https://example.com/fail"
            ]
          },
          "paymentMode": {
            "items": {
              "$ref": "#/components/schemas/AcquiringPaymentMode"
            },
            "type": "array",
            "minItems": 1,
            "title": "Способ оплаты",
            "examples": [
              [
                "sbp",
                "card",
                "tinkoff"
              ]
            ]
          },
          "saveCard": {
            "type": "boolean",
            "title": "Предложить покупателю сохранить карту",
            "examples": [
              true
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "merchantId": {
            "type": "string",
            "maxLength": 15,
            "minLength": 15,
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "ttl": {
            "type": "integer",
            "maximum": 44640.0,
            "minimum": 1.0,
            "title": "Время жизни платёжной ссылки в минутах",
            "default": 10080
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "amount",
          "purpose",
          "paymentMode"
        ],
        "title": "AcquiringCreatePaymentOperationRequestModel"
      },
      "AcquiringCreatePaymentOperationResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringCreatePaymentOperationResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringCreatePaymentOperationResponseDataModel"
      },
      "AcquiringCreatePaymentOperationResponseModel": {
        "properties": {
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringCreatedStatus"
              }
            ],
            "title": "Статус платежа",
            "default": "CREATED",
            "examples": [
              "CREATED"
            ]
          },
          "amount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              "1234.00"
            ]
          },
          "operationId": {
            "type": "string",
            "title": "Идентификатор платежа",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "paymentLink": {
            "type": "string",
            "title": "Ссылка на оплату",
            "examples": [
              "https://merch.example.com/order/?uuid=16ea4c54-bf1d-4e6a-a1ef-53ad55666e43"
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "merchantId": {
            "type": "string",
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "ttl": {
            "type": "integer",
            "maximum": 44640.0,
            "minimum": 1.0,
            "title": "Время жизни платёжной ссылки в минутах",
            "default": 10080
          }
        },
        "type": "object",
        "required": [
          "purpose",
          "amount",
          "operationId",
          "paymentLink"
        ],
        "title": "AcquiringCreatePaymentOperationResponseModel"
      },
      "AcquiringCreatePaymentOperationWithReceiptRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringCreatePaymentOperationWithReceiptRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "AcquiringCreatePaymentOperationWithReceiptRequestDataModel"
      },
      "AcquiringCreatePaymentOperationWithReceiptRequestModel": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "amount": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Сумма платежа",
            "examples": [
              "1234.00"
            ]
          },
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес, куда будет переправлен клиент после оплаты услуги",
            "examples": [
              "https://example.com"
            ]
          },
          "failRedirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес, куда будет переправлен клиент в случае неуспешной оплаты",
            "examples": [
              "https://example.com/fail"
            ]
          },
          "paymentMode": {
            "items": {
              "$ref": "#/components/schemas/AcquiringPaymentMode"
            },
            "type": "array",
            "minItems": 1,
            "title": "Способ оплаты",
            "examples": [
              [
                "sbp",
                "card",
                "tinkoff"
              ]
            ]
          },
          "saveCard": {
            "type": "boolean",
            "title": "Предложить покупателю сохранить карту",
            "examples": [
              true
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "merchantId": {
            "type": "string",
            "maxLength": 15,
            "minLength": 15,
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "ttl": {
            "type": "integer",
            "maximum": 44640.0,
            "minimum": 1.0,
            "title": "Время жизни платёжной ссылки в минутах",
            "default": 10080
          },
          "taxSystemCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxSystemCodeInput"
              }
            ],
            "title": "Система налогообложения",
            "examples": [
              "osn"
            ]
          },
          "Client": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceiptClientModel"
              }
            ],
            "title": "Данные покупателя"
          },
          "Items": {
            "items": {
              "$ref": "#/components/schemas/ReceiptItemModel-Input"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список товаров в заказе"
          },
          "Supplier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupplierModel"
              }
            ],
            "title": "Данные поставщика"
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "amount",
          "purpose",
          "paymentMode",
          "Client",
          "Items"
        ],
        "title": "AcquiringCreatePaymentOperationWithReceiptRequestModel"
      },
      "AcquiringCreatePaymentOperationWithReceiptResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringCreatePaymentOperationWithReceiptResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringCreatePaymentOperationWithReceiptResponseDataModel"
      },
      "AcquiringCreatePaymentOperationWithReceiptResponseModel": {
        "properties": {
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringCreatedStatus"
              }
            ],
            "title": "Статус платежа",
            "default": "CREATED",
            "examples": [
              "CREATED"
            ]
          },
          "amount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              "1234.00"
            ]
          },
          "operationId": {
            "type": "string",
            "title": "Идентификатор платежа",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "paymentLink": {
            "type": "string",
            "title": "Ссылка на оплату",
            "examples": [
              "https://merch.example.com/order/?uuid=16ea4c54-bf1d-4e6a-a1ef-53ad55666e43"
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "merchantId": {
            "type": "string",
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "ttl": {
            "type": "integer",
            "maximum": 44640.0,
            "minimum": 1.0,
            "title": "Время жизни платёжной ссылки в минутах",
            "default": 10080
          },
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "title": "URL адрес, куда будет переправлен клиент после оплаты услуги",
            "examples": [
              "https://example.com"
            ]
          },
          "failRedirectUrl": {
            "type": "string",
            "title": "URL адрес, куда будет переправлен клиент в случае неуспешной оплаты",
            "examples": [
              "https://example.com/fail"
            ]
          },
          "paymentMode": {
            "items": {
              "$ref": "#/components/schemas/AcquiringPaymentMode"
            },
            "type": "array",
            "minItems": 1,
            "title": "Способ оплаты",
            "examples": [
              [
                "sbp",
                "card",
                "tinkoff"
              ]
            ]
          },
          "taxSystemCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxSystemCodeInput"
              }
            ],
            "title": "Система налогообложения",
            "examples": [
              "osn"
            ]
          },
          "Client": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceiptClientModel"
              }
            ],
            "title": "Данные покупателя"
          },
          "Items": {
            "items": {
              "$ref": "#/components/schemas/ReceiptItemModel-Output"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список товаров в заказе"
          },
          "Supplier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupplierModel"
              }
            ],
            "title": "Данные поставщика"
          }
        },
        "type": "object",
        "required": [
          "purpose",
          "amount",
          "operationId",
          "paymentLink",
          "customerCode",
          "paymentMode",
          "Client",
          "Items"
        ],
        "title": "AcquiringCreatePaymentOperationWithReceiptResponseModel"
      },
      "AcquiringCreateSubscriptionRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringCreateSubscriptionRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "AcquiringCreateSubscriptionRequestDataModel"
      },
      "AcquiringCreateSubscriptionRequestModel": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "amount": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Сумма платежа, которая будет списываться в указанный клиентом период",
            "examples": [
              "1234.00"
            ]
          },
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес, куда будет переправлен клиент после оплаты услуги",
            "examples": [
              "https://example.com"
            ]
          },
          "failRedirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес, куда будет переправлен клиент в случае неуспешной оплаты",
            "examples": [
              "https://example.com/fail"
            ]
          },
          "saveCard": {
            "type": "boolean",
            "title": "Предложить покупателю сохранить карту",
            "examples": [
              true
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "merchantId": {
            "type": "string",
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "recurring": {
            "type": "boolean",
            "title": "Создание рекуррентной оплаты"
          },
          "Options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringSubscriptionInputOptions"
              }
            ],
            "title": "Опции подписки"
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "amount",
          "purpose"
        ],
        "title": "AcquiringCreateSubscriptionRequestModel"
      },
      "AcquiringCreateSubscriptionResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringCreateSubscriptionResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringCreateSubscriptionResponseDataModel"
      },
      "AcquiringCreateSubscriptionResponseModel": {
        "properties": {
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "amount": {
            "type": "number",
            "title": "Сумма платежа, которая будет списываться в указанный клиентом период",
            "examples": [
              "1234.00"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringCreatedStatus"
              }
            ],
            "title": "Статус платежа",
            "default": "CREATED",
            "examples": [
              "CREATED"
            ]
          },
          "operationId": {
            "type": "string",
            "title": "Идентификатор платежа",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "paymentLink": {
            "type": "string",
            "title": "Ссылка на оплату",
            "examples": [
              "https://merch.example.com/order/?uuid=16ea4c54-bf1d-4e6a-a1ef-53ad55666e43"
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "recurring": {
            "type": "boolean",
            "title": "Рекуррентная подписка"
          },
          "Options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringSubscriptionOutputOptions"
              }
            ],
            "title": "Опции подписки"
          }
        },
        "type": "object",
        "required": [
          "purpose",
          "amount",
          "operationId",
          "paymentLink"
        ],
        "title": "AcquiringCreateSubscriptionResponseModel"
      },
      "AcquiringCreateSubscriptionWithReceiptRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringCreateSubscriptionWithReceiptRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "AcquiringCreateSubscriptionWithReceiptRequestDataModel"
      },
      "AcquiringCreateSubscriptionWithReceiptRequestModel": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "amount": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Сумма платежа, которая будет списываться в указанный клиентом период",
            "examples": [
              "1234.00"
            ]
          },
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес, куда будет переправлен клиент после оплаты услуги",
            "examples": [
              "https://example.com"
            ]
          },
          "failRedirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес, куда будет переправлен клиент в случае неуспешной оплаты",
            "examples": [
              "https://example.com/fail"
            ]
          },
          "saveCard": {
            "type": "boolean",
            "title": "Предложить покупателю сохранить карту",
            "examples": [
              true
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "merchantId": {
            "type": "string",
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "recurring": {
            "type": "boolean",
            "title": "Создание рекуррентной оплаты"
          },
          "Options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringSubscriptionInputOptions"
              }
            ],
            "title": "Опции подписки"
          },
          "taxSystemCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxSystemCodeInput"
              }
            ],
            "title": "Система налогообложения",
            "examples": [
              "osn"
            ]
          },
          "Client": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceiptClientModel"
              }
            ],
            "title": "Данные покупателя"
          },
          "Items": {
            "items": {
              "$ref": "#/components/schemas/ReceiptItemModel-Input"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список товаров в заказе"
          },
          "Supplier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupplierModel"
              }
            ],
            "title": "Данные поставщика"
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "amount",
          "purpose",
          "Client",
          "Items"
        ],
        "title": "AcquiringCreateSubscriptionWithReceiptRequestModel"
      },
      "AcquiringCreateSubscriptionWithReceiptResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringCreateSubscriptionWithReceiptResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringCreateSubscriptionWithReceiptResponseDataModel"
      },
      "AcquiringCreateSubscriptionWithReceiptResponseModel": {
        "properties": {
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "amount": {
            "type": "number",
            "title": "Сумма платежа, которая будет списываться в указанный клиентом период",
            "examples": [
              "1234.00"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringCreatedStatus"
              }
            ],
            "title": "Статус платежа",
            "default": "CREATED",
            "examples": [
              "CREATED"
            ]
          },
          "operationId": {
            "type": "string",
            "title": "Идентификатор платежа",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "paymentLink": {
            "type": "string",
            "title": "Ссылка на оплату",
            "examples": [
              "https://merch.example.com/order/?uuid=16ea4c54-bf1d-4e6a-a1ef-53ad55666e43"
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "recurring": {
            "type": "boolean",
            "title": "Рекуррентная подписка"
          },
          "Options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringSubscriptionOutputOptions"
              }
            ],
            "title": "Опции подписки"
          },
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "title": "URL адрес, куда будет переправлен клиент после оплаты услуги",
            "examples": [
              "https://example.com"
            ]
          },
          "failRedirectUrl": {
            "type": "string",
            "title": "URL адрес, куда будет переправлен клиент в случае неуспешной оплаты",
            "examples": [
              "https://example.com/fail"
            ]
          },
          "merchantId": {
            "type": "string",
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "taxSystemCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxSystemCodeInput"
              }
            ],
            "title": "Система налогообложения",
            "examples": [
              "osn"
            ]
          },
          "Client": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceiptClientModel"
              }
            ],
            "title": "Данные покупателя"
          },
          "Items": {
            "items": {
              "$ref": "#/components/schemas/ReceiptItemModel-Output"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список товаров в заказе"
          },
          "Supplier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupplierModel"
              }
            ],
            "title": "Данные поставщика"
          }
        },
        "type": "object",
        "required": [
          "purpose",
          "amount",
          "operationId",
          "paymentLink",
          "customerCode",
          "Client",
          "Items"
        ],
        "title": "AcquiringCreateSubscriptionWithReceiptResponseModel"
      },
      "AcquiringCreatedStatus": {
        "type": "string",
        "enum": [
          "CREATED"
        ],
        "const": "CREATED",
        "title": "AcquiringCreatedStatus"
      },
      "AcquiringGetPaymentOperationInfoResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringGetPaymentOperationListResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringGetPaymentOperationInfoResponseDataModel"
      },
      "AcquiringGetPaymentOperationListItemModel": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "taxSystemCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxSystemCodeOutput"
              }
            ],
            "title": "Система налогообложения",
            "examples": [
              "osn"
            ]
          },
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAcquiringPaymentTypeEnum"
              }
            ],
            "title": "Тип оплаты",
            "description": "Присутствует, если оплата произведена",
            "examples": [
              "card"
            ]
          },
          "paymentId": {
            "type": "string",
            "title": "Идентификатор платежа в процессинге или СБП",
            "examples": [
              "A22031016256670100000533E625FCB3"
            ]
          },
          "transactionId": {
            "type": "string",
            "title": "Идентификатор транзакции в СБП",
            "description": "Используется для возврата при оплате по СБП",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Дата и время создания операции. Используется стандарт ISO8601",
            "examples": [
              "2022-10-18T08:28:59+00:00"
            ]
          },
          "paymentMode": {
            "items": {
              "$ref": "#/components/schemas/AcquiringPaymentMode"
            },
            "type": "array",
            "minItems": 1,
            "title": "Способ оплаты",
            "examples": [
              [
                "sbp",
                "card",
                "tinkoff"
              ]
            ]
          },
          "redirectUrl": {
            "type": "string",
            "title": "URL адрес, куда будет переправлен клиент после оплаты услуги",
            "examples": [
              "https://example.com"
            ]
          },
          "failRedirectUrl": {
            "type": "string",
            "title": "URL адрес, куда будет переправлен клиент в случае неуспешной оплаты",
            "examples": [
              "https://example.com/fail"
            ]
          },
          "Client": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceiptClientModel"
              }
            ],
            "title": "Данные покупателя"
          },
          "Items": {
            "items": {
              "$ref": "#/components/schemas/ReceiptItemResponseModel"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список товаров в заказе"
          },
          "purpose": {
            "type": "string",
            "title": "Назначение платежа",
            "description": "Отсутствует, если при создании платежа назначение не было указано",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "amount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              "1234.00"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringPaymentStatus"
              }
            ],
            "title": "Статус платежа",
            "examples": [
              "CREATED"
            ]
          },
          "operationId": {
            "type": "string",
            "title": "Идентификатор платежа",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "paymentLink": {
            "type": "string",
            "title": "Ссылка на оплату",
            "examples": [
              "https://merch.example.com/order/?uuid=16ea4c54-bf1d-4e6a-a1ef-53ad55666e43"
            ]
          },
          "merchantId": {
            "type": "string",
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "Order": {
            "items": {
              "$ref": "#/components/schemas/OrderModel"
            },
            "type": "array",
            "title": "Список операций, связанных с платежом."
          },
          "Supplier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupplierModel"
              }
            ],
            "title": "Данные поставщика"
          },
          "paidAt": {
            "type": "string",
            "title": "Дата и время оплаты"
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "createdAt",
          "amount",
          "status",
          "operationId",
          "paymentLink",
          "Order"
        ],
        "title": "AcquiringGetPaymentOperationListItemModel"
      },
      "AcquiringGetPaymentOperationListResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringGetPaymentOperationListResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/PaginatedLinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringGetPaymentOperationListResponseDataModel"
      },
      "AcquiringGetPaymentOperationListResponseModel": {
        "properties": {
          "Operation": {
            "items": {
              "$ref": "#/components/schemas/AcquiringGetPaymentOperationListItemModel"
            },
            "type": "array",
            "title": "Operation"
          }
        },
        "type": "object",
        "required": [
          "Operation"
        ],
        "title": "AcquiringGetPaymentOperationListResponseModel"
      },
      "AcquiringGetSubscriptionStatusResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringGetSubscriptionStatusResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringGetSubscriptionStatusResponseDataModel"
      },
      "AcquiringGetSubscriptionStatusResponseModel": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AcquiringSubscriptionStatus"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "AcquiringGetSubscriptionStatusResponseModel"
      },
      "AcquiringPaymentMode": {
        "type": "string",
        "enum": [
          "sbp",
          "card",
          "tinkoff"
        ],
        "title": "AcquiringPaymentMode"
      },
      "AcquiringPaymentOperationRefundModel": {
        "properties": {
          "isRefund": {
            "type": "boolean",
            "title": "Оформлен ли возврат",
            "examples": [
              true
            ]
          },
          "operationId": {
            "type": "string",
            "title": "Идентификатор платежа",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "amount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              "1234.00"
            ]
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Дата запроса на возврат",
            "examples": [
              "2025-04-11"
            ]
          },
          "orderId": {
            "type": "string",
            "title": "Идентификатор операции возрата",
            "examples": [
              1
            ]
          }
        },
        "type": "object",
        "required": [
          "isRefund",
          "operationId",
          "amount",
          "date",
          "orderId"
        ],
        "title": "AcquiringPaymentOperationRefundModel"
      },
      "AcquiringPaymentOperationRefundResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringPaymentOperationRefundModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringPaymentOperationRefundResponseModel"
      },
      "AcquiringPaymentOrderRefundRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringPaymentOrderRefundRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "AcquiringPaymentOrderRefundRequestDataModel"
      },
      "AcquiringPaymentOrderRefundRequestModel": {
        "properties": {
          "amount": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Сумма платежа",
            "description": "Не больше суммы оплаты",
            "examples": [
              "1234.00"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "title": "AcquiringPaymentOrderRefundRequestModel"
      },
      "AcquiringPaymentStatus": {
        "type": "string",
        "enum": [
          "CREATED",
          "APPROVED",
          "ON-REFUND",
          "REFUNDED",
          "EXPIRED",
          "REFUNDED_PARTIALLY"
        ],
        "title": "AcquiringPaymentStatus"
      },
      "AcquiringRetailerListModel": {
        "properties": {
          "Retailer": {
            "items": {
              "$ref": "#/components/schemas/AcquiringRetailerModel"
            },
            "type": "array",
            "title": "Retailer"
          }
        },
        "type": "object",
        "required": [
          "Retailer"
        ],
        "title": "AcquiringRetailerListModel"
      },
      "AcquiringRetailerListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringRetailerListModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringRetailerListResponseModel"
      },
      "AcquiringRetailerModel": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringRetailerStatus"
              }
            ],
            "title": "Статус регистрации",
            "examples": [
              "REG"
            ]
          },
          "isActive": {
            "type": "boolean",
            "title": "Статус готовности к работе",
            "examples": [
              true
            ]
          },
          "mcc": {
            "type": "string",
            "title": "Код МСС",
            "examples": [
              "5111"
            ]
          },
          "rate": {
            "type": "number",
            "title": "Комиссия",
            "examples": [
              2,
              2.6
            ]
          },
          "name": {
            "type": "string",
            "title": "Наименование",
            "examples": [
              "ООО Альтер"
            ]
          },
          "url": {
            "type": "string",
            "title": "Сайт регистрации",
            "examples": [
              "https://alter.ru"
            ]
          },
          "merchantId": {
            "type": "string",
            "title": "ID мерчанта",
            "description": "Может отсутствовать при значениях поля status: NEW, ADDRESS_DADATA и OPEN_ACCOUNT",
            "examples": [
              "200000000001056"
            ]
          },
          "terminalId": {
            "type": "string",
            "title": "ID терминала",
            "description": "Будет заполнен при значениях поля status: TERMINAL_CREATED, FILE_SENT, REG",
            "examples": [
              "20000032"
            ]
          },
          "paymentModes": {
            "items": {
              "$ref": "#/components/schemas/AcquiringPaymentMode"
            },
            "type": "array",
            "minItems": 0,
            "title": "Способ оплаты",
            "examples": [
              [
                "sbp",
                "card",
                "tinkoff"
              ]
            ]
          },
          "cashbox": {
            "type": "string",
            "title": "Название подключённой кассы",
            "examples": [
              "businessRu"
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "isActive",
          "mcc",
          "rate",
          "name",
          "paymentModes"
        ],
        "title": "AcquiringRetailerModel"
      },
      "AcquiringRetailerStatus": {
        "type": "string",
        "enum": [
          "NEW",
          "ADDRESS_DADATA",
          "OPEN_ACCOUNT",
          "TWPG_SENDED",
          "RETAILER_CREATED",
          "TERMINAL_CREATED",
          "FILE_SENT",
          "REG",
          "CLOSE"
        ],
        "title": "AcquiringRetailerStatus"
      },
      "AcquiringSetSubscriptionStatusRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringSetSubscriptionStatusRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "AcquiringSetSubscriptionStatusRequestDataModel"
      },
      "AcquiringSetSubscriptionStatusRequestModel": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringSubscriptionStatusInput"
              }
            ],
            "title": "Статус подписки"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "AcquiringSetSubscriptionStatusRequestModel"
      },
      "AcquiringSetSubscriptionStatusResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/BooleanResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringSetSubscriptionStatusResponseDataModel"
      },
      "AcquiringSubscriptionInputOptions": {
        "properties": {
          "trancheCount": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Количество списаний по подписке",
            "default": 12,
            "examples": [
              12
            ]
          },
          "period": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringSubscriptionPeriodInput"
              }
            ],
            "title": "Периодичность списания",
            "default": "Month",
            "examples": [
              "Month"
            ]
          },
          "daysInPeriod": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Длина периодичности в днях. Работает только с периодом Day",
            "examples": [
              14
            ]
          }
        },
        "type": "object",
        "title": "AcquiringSubscriptionInputOptions"
      },
      "AcquiringSubscriptionListItemModel": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "taxSystemCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxSystemCodeOutput"
              }
            ],
            "title": "Система налогообложения",
            "examples": [
              "osn"
            ]
          },
          "paymentId": {
            "type": "string",
            "title": "Идентификатор платежа в процессинге или СБП",
            "examples": [
              "A22031016256670100000533E625FCB3"
            ]
          },
          "transactionId": {
            "type": "string",
            "title": "Идентификатор транзакции в СБП",
            "description": "Используется для возврата при оплате по СБП",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Дата и время создания операции. Используется стандарт ISO8601",
            "examples": [
              "2022-10-18T08:28:59+00:00"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "title": "URL адрес, куда будет переправлен клиент после оплаты услуги",
            "examples": [
              "https://example.com"
            ]
          },
          "failRedirectUrl": {
            "type": "string",
            "title": "URL адрес, куда будет переправлен клиент в случае неуспешной оплаты",
            "examples": [
              "https://example.com/fail"
            ]
          },
          "Client": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceiptClientModel"
              }
            ],
            "title": "Данные покупателя"
          },
          "Items": {
            "items": {
              "$ref": "#/components/schemas/ReceiptItemResponseModel"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список товаров в заказе"
          },
          "purpose": {
            "type": "string",
            "title": "Назначение платежа",
            "description": "Отсутствует, если при создании платежа назначение не было указано",
            "examples": [
              "Перевод за оказанные услуги"
            ]
          },
          "amount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              "1234.00"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringPaymentStatus"
              }
            ],
            "title": "Статус платежа",
            "examples": [
              "CREATED"
            ]
          },
          "operationId": {
            "type": "string",
            "title": "Идентификатор платежа",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "paymentLink": {
            "type": "string",
            "title": "Ссылка на оплату",
            "examples": [
              "https://merch.example.com/order/?uuid=16ea4c54-bf1d-4e6a-a1ef-53ad55666e43"
            ]
          },
          "merchantId": {
            "type": "string",
            "title": "Идентификатор торговой точки в интернет-эквайринге",
            "examples": [
              "200000000001056"
            ]
          },
          "consumerId": {
            "type": "string",
            "title": "Идентификатор покупателя",
            "examples": [
              "fedac807-078d-45ac-a43b-5c01c57edbf8"
            ]
          },
          "Options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringSubscriptionOutputOptions"
              }
            ],
            "title": "Опции подписки"
          },
          "Supplier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupplierModel"
              }
            ],
            "title": "Данные поставщика"
          },
          "recurring": {
            "type": "boolean",
            "title": "Создание рекуррентной оплаты"
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "createdAt",
          "Items",
          "amount",
          "status",
          "operationId",
          "paymentLink"
        ],
        "title": "AcquiringSubscriptionListItemModel"
      },
      "AcquiringSubscriptionListResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AcquiringSubscriptionListResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/PaginatedLinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AcquiringSubscriptionListResponseDataModel"
      },
      "AcquiringSubscriptionListResponseModel": {
        "properties": {
          "Subscription": {
            "items": {
              "$ref": "#/components/schemas/AcquiringSubscriptionListItemModel"
            },
            "type": "array",
            "title": "Subscription"
          }
        },
        "type": "object",
        "required": [
          "Subscription"
        ],
        "title": "AcquiringSubscriptionListResponseModel"
      },
      "AcquiringSubscriptionOutputOptions": {
        "properties": {
          "trancheCount": {
            "type": "integer",
            "title": "Количество списаний по подписке",
            "examples": [
              12
            ]
          },
          "period": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquiringSubscriptionPeriodOutput"
              }
            ],
            "title": "Периодичность списания",
            "examples": [
              "Month"
            ]
          },
          "daysInPeriod": {
            "type": "integer",
            "title": "Длина периодичности в днях. Работает только с периодом Day"
          }
        },
        "type": "object",
        "title": "AcquiringSubscriptionOutputOptions"
      },
      "AcquiringSubscriptionPeriodInput": {
        "type": "string",
        "enum": [
          "Day",
          "Month",
          "Year"
        ],
        "title": "AcquiringSubscriptionPeriodInput"
      },
      "AcquiringSubscriptionPeriodOutput": {
        "type": "string",
        "enum": [
          "Day",
          "Month",
          "Year",
          "Quarter"
        ],
        "title": "AcquiringSubscriptionPeriodOutput"
      },
      "AcquiringSubscriptionStatus": {
        "type": "string",
        "enum": [
          "Active",
          "Cancelled",
          "Completed",
          "Expired",
          "Failed",
          "PastDue",
          "Preparing",
          "Refused",
          "Rejected",
          "Suspended",
          "Trial"
        ],
        "title": "AcquiringSubscriptionStatus"
      },
      "AcquiringSubscriptionStatusInput": {
        "type": "string",
        "enum": [
          "Cancelled"
        ],
        "const": "Cancelled",
        "title": "AcquiringSubscriptionStatusInput"
      },
      "ActModel": {
        "properties": {
          "Positions": {
            "items": {
              "$ref": "#/components/schemas/PositionModel"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список позиций"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Дата выставления счета, приведенная к часовому поясу Москвы. Если не передана, то текущая дата.",
            "examples": [
              "2010-10-29"
            ]
          },
          "totalAmount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма всех позиций с НДС",
            "examples": [
              "1234.56"
            ]
          },
          "totalNds": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма НДС",
            "examples": [
              "1234.56"
            ]
          },
          "number": {
            "type": "string",
            "title": "Номер акта",
            "examples": [
              "1"
            ]
          },
          "basedOn": {
            "type": "string",
            "title": "Документ, на основании которого вы выставляете акт",
            "examples": [
              "Основание платежа"
            ]
          }
        },
        "type": "object",
        "required": [
          "Positions",
          "totalAmount",
          "number"
        ],
        "title": "ActModel"
      },
      "ActivateCashboxQrCodeRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/ActivateCashboxQrCodeRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "ActivateCashboxQrCodeRequestDataModel"
      },
      "ActivateCashboxQrCodeRequestModel": {
        "properties": {
          "amount": {
            "type": "integer",
            "exclusiveMaximum": 1000000000000.0,
            "exclusiveMinimum": 0.0,
            "title": "Сумма в копейках.",
            "examples": [
              "500000"
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Валюта операции",
            "default": "RUB"
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "ttl": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 5.0,
            "title": "Период использования QR-кода в минутах",
            "default": 5,
            "examples": [
              7
            ]
          }
        },
        "type": "object",
        "required": [
          "amount"
        ],
        "title": "ActivateCashboxQrCodeRequestModel"
      },
      "ActivateCashboxQrCodeResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/ActivateCashboxQrCodeResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "ActivateCashboxQrCodeResponseDataModel"
      },
      "ActivateCashboxQrCodeResponseModel": {
        "properties": {
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Сумма в копейках",
            "examples": [
              0
            ]
          },
          "currency": {
            "type": "string",
            "title": "Валюта операции",
            "default": "RUB",
            "examples": [
              "RUB"
            ]
          },
          "paramsId": {
            "type": "string",
            "title": "Идентификатор активных значений параметров QR-кода"
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          }
        },
        "type": "object",
        "required": [
          "qrcId",
          "amount",
          "paramsId"
        ],
        "title": "ActivateCashboxQrCodeResponseModel"
      },
      "ApiVersion": {
        "type": "string",
        "enum": [
          "v1.0"
        ],
        "const": "v1.0",
        "title": "ApiVersion"
      },
      "B2BQRCodeModelResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/RegisteredB2BQrCode"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "B2BQRCodeModelResponseModel"
      },
      "B2BQrCode": {
        "properties": {
          "payload": {
            "type": "string",
            "title": "Payload зарегистрированного QR-кода в СБП",
            "examples": [
              "https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B"
            ]
          },
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Время регистрации",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "merchantId": {
            "type": "string",
            "maxLength": 12,
            "title": "Идентификатор ТСП",
            "examples": [
              "MF0000000001"
            ]
          },
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          },
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Сумма в копейках",
            "examples": [
              0
            ]
          },
          "ttl": {
            "type": "string",
            "title": "Период использования в минутах",
            "examples": [
              "60"
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrCodeContent"
              }
            ]
          },
          "redirectUrl": {
            "type": "string",
            "title": "Ссылка для автоматического возврата плательщика из приложения банка в приложение или на сайт ТСП",
            "examples": [
              "https://tsp.ru/path"
            ]
          },
          "takeTax": {
            "type": "boolean",
            "title": "Taketax",
            "description": "Наличие НДС"
          },
          "totalTaxAmount": {
            "type": "integer",
            "title": "Totaltaxamount",
            "description": "Сумма НДС в копейках"
          },
          "uip": {
            "type": "string",
            "title": "Уникальный идентификатор платежа, назначаемый получателем"
          }
        },
        "type": "object",
        "required": [
          "payload",
          "accountId",
          "createdAt",
          "merchantId",
          "legalId",
          "qrcId",
          "takeTax"
        ],
        "title": "B2BQrCode"
      },
      "B2BQrCodeResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/B2BQrCode"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "B2BQrCodeResponseModel"
      },
      "BadRequestError": {
        "properties": {
          "errorCode": {
            "type": "string",
            "title": "Низкоуровневое текстовое описание ошибки",
            "examples": [
              "HTTPBadRequest"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 603,
            "title": "Описание ошибки. Обрезается если длина ошибки превышает максимальное значение",
            "examples": [
              "Something going wrong"
            ]
          },
          "url": {
            "type": "string",
            "title": "URL для помощи в устранении проблемы",
            "examples": [
              "\"http://enter.tochka.com/open-banking/docs\""
            ]
          }
        },
        "type": "object",
        "required": [
          "errorCode",
          "message",
          "url"
        ],
        "title": "BadRequestError"
      },
      "BadRequestErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 40,
            "title": "Высокоуровневый текстовый код ошибки, необходимый для классификации.",
            "examples": [
              "400"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный идентификатор ошибки, для целей аудита",
            "examples": [
              "c397b21a-d998-4c4d-9471-e60eaf816b87"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 600,
            "title": "Краткое сообщение об ошибке.",
            "examples": [
              "Что-то пошло не так"
            ]
          },
          "Errors": {
            "items": {
              "$ref": "#/components/schemas/BadRequestError"
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "code",
          "id",
          "message",
          "Errors"
        ],
        "title": "BadRequestErrorResponse"
      },
      "BalanceAmountModel": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Сумма",
            "examples": [
              1234.56
            ]
          },
          "currency": {
            "type": "string",
            "title": "Валюта ведения счета. Используется стандарт ISO 4217",
            "examples": [
              "RUB"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "title": "BalanceAmountModel"
      },
      "BalanceListModel": {
        "properties": {
          "Balance": {
            "items": {
              "$ref": "#/components/schemas/BalanceModel"
            },
            "type": "array",
            "title": "Balance"
          }
        },
        "type": "object",
        "required": [
          "Balance"
        ],
        "title": "BalanceListModel"
      },
      "BalanceListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/BalanceListModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "BalanceListResponseModel",
        "description": "Метод получения баланса"
      },
      "BalanceModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "creditDebitIndicator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalBalanceTypeEnum"
              }
            ],
            "title": "Определяет является баланс кредитовым или дебетовым",
            "examples": [
              "Credit"
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalBalanceStaticTypeEnum"
              }
            ],
            "title": "Тип баланса, заполняется согласно ISO 20022",
            "examples": [
              "OpeningAvailable"
            ]
          },
          "dateTime": {
            "type": "string",
            "title": "Дата и время построения отчета. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "Amount": {
            "$ref": "#/components/schemas/BalanceAmountModel"
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "creditDebitIndicator",
          "type",
          "dateTime",
          "Amount"
        ],
        "title": "BalanceModel"
      },
      "BooleanResponse": {
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Статус операции",
            "examples": [
              true
            ]
          }
        },
        "type": "object",
        "required": [
          "result"
        ],
        "title": "BooleanResponse"
      },
      "BooleanResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/BooleanResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "BooleanResponseModel"
      },
      "CapabilitiesEnum": {
        "type": "string",
        "enum": [
          "001",
          "010",
          "011",
          "100",
          "101",
          "110",
          "111"
        ],
        "title": "CapabilitiesEnum",
        "description": "`001` - только QR Static\n`010` - только QR Dynamic\n`011` - QR Static и QR Dynamic\n`100` - Только QR Subscription\n`101` - QR Subscription и QR Static\n`110` - QR Subscription и QR Dynamic\n`111` - QR Static, QR Dynamic и QR Subscription"
      },
      "CardTransactionAmountModel": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Amount",
            "description": "Сумма транзакции",
            "examples": [
              1234.56
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Валюта транзакции, используется ISO 4217",
            "examples": [
              "RUB"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "title": "CardTransactionAmountModel"
      },
      "CardTransactionListModel": {
        "properties": {
          "Transactions": {
            "items": {
              "$ref": "#/components/schemas/CardTransactionModel"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "Transactions"
        ],
        "title": "CardTransactionListModel"
      },
      "CardTransactionModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "pan": {
            "type": "string",
            "title": "Pan",
            "description": "Маскированный номер карты транзакции"
          },
          "dateTime": {
            "type": "string",
            "title": "Дата и время транзакции. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "Amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionAmountModel"
              }
            ],
            "description": "Оригинальная сумма и валюта"
          },
          "AccountAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardTransactionAmountModel"
              }
            ],
            "description": "Сумма и валюта в валюте счета"
          },
          "TerminalData": {
            "$ref": "#/components/schemas/CardTransactionTerminalData"
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "pan",
          "dateTime",
          "Amount",
          "AccountAmount",
          "TerminalData"
        ],
        "title": "CardTransactionModel"
      },
      "CardTransactionTerminalData": {
        "properties": {
          "city": {
            "type": "string",
            "title": "City",
            "description": "Город терминала",
            "examples": [
              "Perm"
            ]
          },
          "location": {
            "type": "string",
            "title": "Location",
            "description": "Адрес терминала",
            "examples": [
              "Ekaterinburg"
            ]
          },
          "owner": {
            "type": "string",
            "title": "Owner",
            "description": "Название торговой точки"
          }
        },
        "type": "object",
        "title": "CardTransactionTerminalData"
      },
      "CardTransactionsListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/CardTransactionListModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "CardTransactionsListResponseModel"
      },
      "CashAccountInfoModel": {
        "properties": {
          "schemeName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountIdentificationEnum"
              }
            ],
            "title": "Название схемы",
            "examples": [
              "RU.CBR.PAN"
            ]
          },
          "identification": {
            "type": "string",
            "maxLength": 256,
            "title": "Идентификатор счета(может отсутствовать в валютном платеже)",
            "examples": [
              "60000000000000000001"
            ]
          }
        },
        "type": "object",
        "required": [
          "schemeName"
        ],
        "title": "CashAccountInfoModel"
      },
      "CashboxQrCodeOutputCommission": {
        "properties": {
          "mcc": {
            "type": "string",
            "title": "MCC код"
          },
          "percent": {
            "type": "number",
            "title": "Размер комиссии в процентах"
          },
          "description": {
            "type": "string",
            "title": "Описание"
          }
        },
        "type": "object",
        "title": "CashboxQrCodeOutputCommission"
      },
      "CashboxQrCodeResponseModel": {
        "properties": {
          "payload": {
            "type": "string",
            "title": "Payload зарегистрированного QR-кода в СБП",
            "examples": [
              "https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B"
            ]
          },
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "merchantId": {
            "type": "string",
            "maxLength": 12,
            "title": "Идентификатор ТСП",
            "examples": [
              "MF0000000001"
            ]
          },
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Время регистрации",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Сумма в копейках",
            "examples": [
              0
            ]
          },
          "currency": {
            "type": "string",
            "title": "Валюта операции",
            "default": "RUB",
            "examples": [
              "RUB"
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "paramsId": {
            "type": "string",
            "title": "Идентификатор активных значений параметров QR-кода"
          },
          "ttl": {
            "type": "integer",
            "title": "Период использования в минутах",
            "examples": [
              20
            ]
          },
          "commission": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CashboxQrCodeOutputCommission"
              }
            ]
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrCodeContent"
              }
            ]
          },
          "redirectUrl": {
            "type": "string",
            "title": "Ссылка для автоматического возврата плательщика из приложения банка в приложение или на сайт ТСП"
          }
        },
        "type": "object",
        "required": [
          "payload",
          "accountId",
          "merchantId",
          "legalId",
          "createdAt",
          "qrcId"
        ],
        "title": "CashboxQrCodeResponseModel"
      },
      "ChangeCashboxQRCodeAccountRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/ChangeCashboxQRCodeAccountRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "ChangeCashboxQRCodeAccountRequestDataModel"
      },
      "ChangeCashboxQRCodeAccountRequestModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          }
        },
        "type": "object",
        "required": [
          "accountId"
        ],
        "title": "ChangeCashboxQRCodeAccountRequestModel"
      },
      "ChangeCashboxQRCodeAccountResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/ChangeCashboxQRCodeAccountResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "ChangeCashboxQRCodeAccountResponseDataModel"
      },
      "ChangeCashboxQRCodeAccountResponseModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "qrcId"
        ],
        "title": "ChangeCashboxQRCodeAccountResponseModel"
      },
      "ClosingDocumentCreateRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/ClosingDocumentCreateRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "ClosingDocumentCreateRequestDataModel"
      },
      "ClosingDocumentCreateRequestModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "customerCode": {
            "type": "string",
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "SecondSide": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecondSideModel"
              }
            ],
            "title": "Сторона заказчика/покупателя в сделке в документе"
          },
          "documentId": {
            "type": "string",
            "title": "ID родительского документа",
            "examples": [
              "1cf95c4f-e794-4407-bac4-0829f19bd2be"
            ]
          },
          "Content": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ContentAct"
              },
              {
                "$ref": "#/components/schemas/ContentPackingList"
              },
              {
                "$ref": "#/components/schemas/ContentInvoicef"
              }
            ],
            "title": "Содержимое закрывающего документа"
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "customerCode",
          "SecondSide",
          "Content"
        ],
        "title": "ClosingDocumentCreateRequestModel"
      },
      "ConsentCreateRequest": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/ConsentCreateRequestModel"
          },
          "Risks": {
            "type": "object",
            "title": "Risks"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "ConsentCreateRequest"
      },
      "ConsentCreateRequestModel": {
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "AwaitingAuthorisation"
            ],
            "const": "AwaitingAuthorisation",
            "title": "Статус разрешения",
            "default": "AwaitingAuthorisation",
            "examples": [
              "AwaitingAuthorisation"
            ]
          },
          "creationDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "Дата и время создания статуса ресурса. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "statusUpdateDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "Дата и время обновления статуса ресурса. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/ExternalConsentTypeEnum"
            },
            "type": "array",
            "title": "Указание типов данных доступа.",
            "examples": [
              [
                "ReadAccountsBasic"
              ]
            ]
          },
          "expirationDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "Дата и время истечения срока действия разрешений. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          }
        },
        "type": "object",
        "required": [
          "permissions"
        ],
        "title": "ConsentCreateRequestModel"
      },
      "ConsentListModel": {
        "properties": {
          "Consent": {
            "items": {
              "$ref": "#/components/schemas/ConsentResponseModel"
            },
            "type": "array",
            "title": "Consent"
          }
        },
        "type": "object",
        "required": [
          "Consent"
        ],
        "title": "ConsentListModel"
      },
      "ConsentListResponse": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/ConsentListModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "ConsentListResponse"
      },
      "ConsentModel": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentStatusEnum"
              }
            ],
            "title": "Статус разрешения",
            "default": "AwaitingAuthorisation",
            "examples": [
              "AwaitingAuthorisation"
            ]
          },
          "creationDateTime": {
            "type": "string",
            "title": "Дата и время создания статуса ресурса. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "statusUpdateDateTime": {
            "type": "string",
            "title": "Дата и время обновления статуса ресурса. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/ExternalConsentTypeEnum"
            },
            "type": "array",
            "title": "Указание типов данных доступа.",
            "examples": [
              [
                "ReadAccountsBasic"
              ]
            ]
          },
          "expirationDateTime": {
            "type": "string",
            "title": "Дата и время истечения срока действия разрешений. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "consentId": {
            "type": "string",
            "maxLength": 128,
            "title": "Уникальный идентификатор, предназначенный для идентификации разрешения",
            "examples": [
              "tochka-intent-88379"
            ]
          },
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "applicationName": {
            "type": "string",
            "maxLength": 60,
            "title": "Название приложения",
            "examples": [
              "Test"
            ]
          },
          "clientId": {
            "type": "string",
            "maxLength": 60,
            "title": "ID приложения в oAuth",
            "examples": [
              "Test"
            ]
          }
        },
        "type": "object",
        "required": [
          "permissions",
          "consentId"
        ],
        "title": "ConsentModel"
      },
      "ConsentResponse": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/ConsentModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "ConsentResponse"
      },
      "ConsentResponseModel": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConsentStatusEnum"
              }
            ],
            "title": "Статус разрешения",
            "default": "AwaitingAuthorisation",
            "examples": [
              "AwaitingAuthorisation"
            ]
          },
          "creationDateTime": {
            "type": "string",
            "title": "Дата и время создания статуса ресурса. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "statusUpdateDateTime": {
            "type": "string",
            "title": "Дата и время обновления статуса ресурса. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/ConsentTypeEnum"
            },
            "type": "array",
            "title": "Указание типов данных доступа.",
            "examples": [
              [
                "ReadAccountsBasic"
              ]
            ]
          },
          "expirationDateTime": {
            "type": "string",
            "title": "Дата и время истечения срока действия разрешений. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "consentId": {
            "type": "string",
            "maxLength": 128,
            "title": "Уникальный идентификатор, предназначенный для идентификации разрешения",
            "examples": [
              "tochka-intent-88379"
            ]
          },
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "applicationName": {
            "type": "string",
            "maxLength": 60,
            "title": "Название приложения",
            "examples": [
              "Test"
            ]
          },
          "clientId": {
            "type": "string",
            "maxLength": 60,
            "title": "ID приложения в oAuth",
            "examples": [
              "Test"
            ]
          },
          "isValid": {
            "type": "boolean",
            "title": "Isvalid",
            "description": "Показывает истек срок разрешения или нет"
          }
        },
        "type": "object",
        "required": [
          "permissions",
          "consentId"
        ],
        "title": "ConsentResponseModel"
      },
      "ConsentStatusEnum": {
        "type": "string",
        "enum": [
          "AwaitingAuthorisation",
          "Authorised",
          "Rejected",
          "Revoked"
        ],
        "title": "ConsentStatusEnum"
      },
      "ConsentTypeEnum": {
        "type": "string",
        "enum": [
          "ReadAccountsBasic",
          "ReadAccountsDetail",
          "ReadBalances",
          "ReadStatements",
          "ReadTransactionsBasic",
          "ReadTransactionsCredits",
          "ReadTransactionsDebits",
          "ReadTransactionsDetail",
          "ReadCustomerData",
          "ReadSBPData",
          "EditSBPData",
          "ReadSBPData1C",
          "EditSBPData1C",
          "CreatePaymentForSign",
          "CreatePaymentOrder",
          "ReadAcquiringData",
          "MakeAcquiringOperation",
          "ManageInvoiceData",
          "ManageWebhookData"
        ],
        "title": "ConsentTypeEnum"
      },
      "ContentAct": {
        "properties": {
          "Act": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActModel"
              }
            ],
            "title": "Содержимое акта"
          }
        },
        "type": "object",
        "required": [
          "Act"
        ],
        "title": "ContentAct"
      },
      "ContentInvoice": {
        "properties": {
          "Invoice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceModel"
              }
            ],
            "title": "Содержимое счета на оплату"
          }
        },
        "type": "object",
        "required": [
          "Invoice"
        ],
        "title": "ContentInvoice"
      },
      "ContentInvoicef": {
        "properties": {
          "Invoicef": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoicefModel"
              }
            ],
            "title": "Содержимое счета-фактуры"
          }
        },
        "type": "object",
        "required": [
          "Invoicef"
        ],
        "title": "ContentInvoicef"
      },
      "ContentPackingList": {
        "properties": {
          "PackingList": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PackingListModel"
              }
            ],
            "title": "Содержимое товарной накладной"
          }
        },
        "type": "object",
        "required": [
          "PackingList"
        ],
        "title": "ContentPackingList"
      },
      "ContractorBankInfoModel": {
        "properties": {
          "schemeName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FinancialInstitutionIdentificationEnum"
              }
            ],
            "title": "БИК/SWIFT банка агента",
            "examples": [
              "RU.CBR.BIK"
            ]
          },
          "identification": {
            "type": "string",
            "maxLength": 35,
            "title": "БИК/SWIFT банка агента",
            "examples": [
              "000555777"
            ]
          },
          "accountIdentification": {
            "type": "string",
            "title": "Номер кор. счета банка агента",
            "examples": [
              "000555777"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 160,
            "title": "Наименование банка агента",
            "examples": [
              "ПАО..."
            ]
          }
        },
        "type": "object",
        "title": "ContractorBankInfoModel"
      },
      "ContractorInfoModel": {
        "properties": {
          "inn": {
            "type": "string",
            "maxLength": 12,
            "title": "ИНН контрагента",
            "examples": [
              "660000000000"
            ]
          },
          "name": {
            "type": "string",
            "title": "Наименование контрагента",
            "examples": [
              "Индивидуальный Предприниматель Тест"
            ]
          },
          "kpp": {
            "type": "string",
            "maxLength": 9,
            "title": "КПП контрагента",
            "examples": [
              "660000000"
            ]
          }
        },
        "type": "object",
        "title": "ContractorInfoModel"
      },
      "CounterpartTypeEnum": {
        "type": "string",
        "enum": [
          "ip",
          "company"
        ],
        "title": "CounterpartTypeEnum"
      },
      "CustomerCodeAndBankCode": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "bankCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "БИК банка",
            "examples": [
              "044525104"
            ]
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "bankCode"
        ],
        "title": "CustomerCodeAndBankCode"
      },
      "CustomerCodeAndBankCodeRequest": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/CustomerCodeAndBankCode"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "CustomerCodeAndBankCodeRequest"
      },
      "CustomerInfoResponseV3": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "Статус объекта",
            "examples": [
              "Active"
            ]
          },
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Время регистрации",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "address": {
            "type": "string",
            "title": "Юридический адрес",
            "examples": [
              "УЛИЦА ТАТАРСКАЯ Б. ДОМ 11"
            ]
          },
          "city": {
            "type": "string",
            "title": "Город",
            "examples": [
              "Москва"
            ]
          },
          "countryCode": {
            "type": "string",
            "title": "код страны-регистрации юридического лица, в формате \"ISO 3166, Alpha-2\"",
            "examples": [
              "RU"
            ]
          },
          "countrySubDivisionCode": {
            "type": "string",
            "title": "Код региона-регистрации юридического лица, первые две цифры кода ОКТМО",
            "examples": [
              "45"
            ]
          },
          "zipCode": {
            "type": "string",
            "title": "Индекс",
            "examples": [
              "115184"
            ]
          },
          "customerCode": {
            "type": "string",
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "entityType": {
            "type": "string",
            "title": "Организационно-правовая форма юридического лица",
            "examples": [
              "АО"
            ]
          },
          "inn": {
            "type": "string",
            "title": "ИНН",
            "examples": [
              "7706812159"
            ]
          },
          "kpp": {
            "type": "string",
            "title": "КПП",
            "examples": [
              "770501001"
            ]
          },
          "name": {
            "type": "string",
            "title": "Полное наименование юридического лица",
            "examples": [
              "АКЦИОНЕРНОЕ ОБЩЕСТВО \"НАЦИОНАЛЬНАЯ СИСТЕМА ПЛАТЕЖНЫХ КАРТ\""
            ]
          },
          "ogrn": {
            "type": "string",
            "title": "ОГРН",
            "examples": [
              "1147746831352"
            ]
          },
          "bankCode": {
            "type": "string",
            "title": "БИК банка клиента",
            "examples": [
              "041234678"
            ]
          },
          "MerchantList": {
            "items": {
              "$ref": "#/components/schemas/Merchant"
            },
            "type": "array",
            "title": "Merchantlist"
          },
          "AccountList": {
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "type": "array",
            "title": "Accountlist"
          }
        },
        "type": "object",
        "required": [
          "status",
          "legalId",
          "createdAt",
          "countryCode",
          "customerCode",
          "inn",
          "name",
          "ogrn",
          "bankCode"
        ],
        "title": "CustomerInfoResponseV3"
      },
      "CustomerListModel": {
        "properties": {
          "Customer": {
            "items": {
              "$ref": "#/components/schemas/CustomerModel"
            },
            "type": "array",
            "title": "Customer"
          }
        },
        "type": "object",
        "required": [
          "Customer"
        ],
        "title": "CustomerListModel"
      },
      "CustomerListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/CustomerListModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "CustomerListResponseModel",
        "description": "Метод получения списка доступных клиентов"
      },
      "CustomerModel": {
        "properties": {
          "customerCode": {
            "type": "string",
            "maxLength": 9,
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "customerType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalTypeEnum"
              }
            ],
            "title": "Тип клиент (физическое или юридическое лицо)",
            "examples": [
              "Personal"
            ]
          },
          "isResident": {
            "type": "boolean",
            "title": "Признак резидента",
            "examples": [
              true
            ]
          },
          "taxCode": {
            "type": "string",
            "title": "ИНН",
            "examples": [
              "660000000000"
            ]
          },
          "fullName": {
            "type": "string",
            "title": "Полное наименование",
            "examples": [
              "Индивидуальный Предприниматель Тест"
            ]
          },
          "shortName": {
            "type": "string",
            "title": "Краткое наименование",
            "examples": [
              "ИП Тест"
            ]
          },
          "kpp": {
            "type": "string",
            "title": "КПП",
            "examples": [
              "668501001"
            ]
          },
          "customerOgrn": {
            "type": "string",
            "title": "ОГРН или ОГРНИП",
            "examples": [
              "319665800211661"
            ]
          }
        },
        "type": "object",
        "required": [
          "customerCode",
          "customerType",
          "isResident",
          "fullName"
        ],
        "title": "CustomerModel"
      },
      "CustomerResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/CustomerModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "CustomerResponseModel",
        "description": "Метод получения информации по клиенту"
      },
      "DeactivateCashboxQrCodeResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/BooleanResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "DeactivateCashboxQrCodeResponseDataModel"
      },
      "DocumentCreateResponse": {
        "properties": {
          "documentId": {
            "type": "string",
            "title": "Уникальный идентификатор документа",
            "examples": [
              "1cf95c4f-e794-4407-bac4-0829f19bd2be"
            ]
          }
        },
        "type": "object",
        "required": [
          "documentId"
        ],
        "title": "DocumentCreateResponse"
      },
      "DocumentCreateResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/DocumentCreateResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "DocumentCreateResponseModel"
      },
      "ErrorModel": {
        "properties": {
          "errorCode": {
            "type": "string",
            "title": "Низкоуровневое текстовое описание ошибки",
            "examples": [
              "HTTPInternalError"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 603,
            "title": "Описание ошибки. Обрезается если длина ошибки превышает максимальное значение",
            "examples": [
              "Something going wrong"
            ]
          },
          "url": {
            "type": "string",
            "title": "URL для помощи в устранении проблемы",
            "examples": [
              "\"http://enter.tochka.com/open-banking/docs\""
            ]
          }
        },
        "type": "object",
        "required": [
          "errorCode",
          "message",
          "url"
        ],
        "title": "ErrorModel"
      },
      "ErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 40,
            "title": "Высокоуровневый текстовый код ошибки, необходимый для классификации.",
            "examples": [
              "500"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный идентификатор ошибки, для целей аудита",
            "examples": [
              "c397b21a-d998-4c4d-9471-e60eaf816b87"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 600,
            "title": "Краткое сообщение об ошибке.",
            "examples": [
              "Что-то пошло не так"
            ]
          },
          "Errors": {
            "items": {
              "$ref": "#/components/schemas/ErrorModel"
            },
            "type": "array",
            "title": "Подробное описание ошибок"
          }
        },
        "type": "object",
        "required": [
          "code",
          "id",
          "message",
          "Errors"
        ],
        "title": "ErrorResponse"
      },
      "ExternalAccountStatusEnum": {
        "type": "string",
        "enum": [
          "Enabled",
          "Disabled",
          "Deleted",
          "ProForma",
          "Pending"
        ],
        "title": "ExternalAccountStatusEnum"
      },
      "ExternalAccountSubTypeEnum": {
        "type": "string",
        "enum": [
          "CreditCard",
          "CurrentAccount",
          "Loan",
          "Mortgage",
          "PrePaidCard",
          "Savings",
          "Special"
        ],
        "title": "ExternalAccountSubTypeEnum"
      },
      "ExternalAcquiringPaymentTypeEnum": {
        "type": "string",
        "enum": [
          "sbp",
          "card",
          "tinkoff"
        ],
        "title": "ExternalAcquiringPaymentTypeEnum"
      },
      "ExternalBalanceStaticTypeEnum": {
        "type": "string",
        "enum": [
          "OpeningAvailable",
          "ClosingAvailable",
          "Expected",
          "OverdraftAvailable"
        ],
        "title": "ExternalBalanceStaticTypeEnum",
        "description": "**Описание типов балансов**\n\n  - `OpeningAvailable` - Начальный остаток\n  - `ClosingAvailable` - Доступный баланс\n  - `Expected` - Сумма заблокированных средств\n  - `OverdraftAvailable` - Доступный лимит по овердрафту"
      },
      "ExternalBalanceTypeEnum": {
        "type": "string",
        "enum": [
          "Credit",
          "Debit"
        ],
        "title": "ExternalBalanceTypeEnum"
      },
      "ExternalConsentTypeEnum": {
        "type": "string",
        "enum": [
          "ReadAccountsBasic",
          "ReadAccountsDetail",
          "ReadBalances",
          "ReadStatements",
          "ReadTransactionsBasic",
          "ReadTransactionsCredits",
          "ReadTransactionsDebits",
          "ReadTransactionsDetail",
          "ReadCustomerData",
          "ReadSBPData",
          "EditSBPData",
          "CreatePaymentForSign",
          "CreatePaymentOrder",
          "ReadAcquiringData",
          "MakeAcquiringOperation",
          "ManageInvoiceData",
          "ManageWebhookData"
        ],
        "title": "ExternalConsentTypeEnum"
      },
      "ExternalCreditDebitIndicatorEnum": {
        "type": "string",
        "enum": [
          "Credit",
          "Debit"
        ],
        "title": "ExternalCreditDebitIndicatorEnum"
      },
      "ExternalTransactionStatusEnum": {
        "type": "string",
        "enum": [
          "Booked",
          "Pending"
        ],
        "title": "ExternalTransactionStatusEnum"
      },
      "ExternalTransationTypeEnum": {
        "type": "string",
        "enum": [
          "Неопределенное значение",
          "Платежное поручение",
          "Платежное требование",
          "Денежный чек, РКО",
          "Объявление на взнос наличными, ПКО",
          "Требование-поручение",
          "Инкассовое поручение",
          "Расчетный чек",
          "Аккредитив",
          "Мемориальный ордер",
          "Погашение кредита",
          "Выдача кредита",
          "Авизо",
          "Банковские карты",
          "Платежный ордер",
          "Банковский ордер",
          "Ордер по передаче ценностей",
          "Программный ордер",
          "Импортированная запись"
        ],
        "title": "ExternalTransationTypeEnum"
      },
      "ExternalTypeEnum": {
        "type": "string",
        "enum": [
          "Business",
          "Personal"
        ],
        "title": "ExternalTypeEnum"
      },
      "FinancialInstitutionIdentificationEnum": {
        "type": "string",
        "enum": [
          "RU.CBR.BICFI",
          "RU.CBR.BIK"
        ],
        "title": "FinancialInstitutionIdentificationEnum"
      },
      "ForbiddenError": {
        "properties": {
          "errorCode": {
            "type": "string",
            "title": "Низкоуровневое текстовое описание ошибки",
            "examples": [
              "HTTPForbidden"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 603,
            "title": "Описание ошибки. Обрезается если длина ошибки превышает максимальное значение",
            "examples": [
              "Something going wrong"
            ]
          },
          "url": {
            "type": "string",
            "title": "URL для помощи в устранении проблемы",
            "examples": [
              "\"http://enter.tochka.com/open-banking/docs\""
            ]
          }
        },
        "type": "object",
        "required": [
          "errorCode",
          "message",
          "url"
        ],
        "title": "ForbiddenError"
      },
      "ForbiddenErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 40,
            "title": "Высокоуровневый текстовый код ошибки, необходимый для классификации.",
            "examples": [
              "403"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный идентификатор ошибки, для целей аудита",
            "examples": [
              "c397b21a-d998-4c4d-9471-e60eaf816b87"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 600,
            "title": "Краткое сообщение об ошибке.",
            "examples": [
              "Что-то пошло не так"
            ]
          },
          "Errors": {
            "items": {
              "$ref": "#/components/schemas/ForbiddenError"
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "code",
          "id",
          "message",
          "Errors"
        ],
        "title": "ForbiddenErrorResponse"
      },
      "GetCashboxQRCodeListResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/GetCashboxQRCodeListResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "GetCashboxQRCodeListResponseDataModel"
      },
      "GetCashboxQRCodeListResponseItemModel": {
        "properties": {
          "payload": {
            "type": "string",
            "title": "Payload зарегистрированного QR-кода в СБП",
            "examples": [
              "https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B"
            ]
          },
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "merchantId": {
            "type": "string",
            "maxLength": 12,
            "title": "Идентификатор ТСП",
            "examples": [
              "MF0000000001"
            ]
          },
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Время регистрации",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Сумма в копейках",
            "examples": [
              0
            ]
          },
          "currency": {
            "type": "string",
            "title": "Валюта операции",
            "examples": [
              "RUB"
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "paramsId": {
            "type": "string",
            "title": "Идентификатор активных значений параметров QR-кода",
            "examples": [
              "AS331309594501970709180285778247"
            ]
          },
          "ttl": {
            "type": "integer",
            "title": "Период использования в минутах",
            "examples": [
              20
            ]
          },
          "commission": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CashboxQrCodeOutputCommission"
              }
            ],
            "title": "Комиссия"
          },
          "redirectUrl": {
            "type": "string",
            "title": "Ссылка для автоматического возврата плательщика из приложения банка в приложение или на сайт ТСП",
            "examples": [
              "https://example.com/success"
            ]
          }
        },
        "type": "object",
        "required": [
          "payload",
          "accountId",
          "merchantId",
          "legalId",
          "createdAt",
          "qrcId"
        ],
        "title": "GetCashboxQRCodeListResponseItemModel"
      },
      "GetCashboxQRCodeListResponseModel": {
        "properties": {
          "qrCodes": {
            "items": {
              "$ref": "#/components/schemas/GetCashboxQRCodeListResponseItemModel"
            },
            "type": "array",
            "title": "Список QR-кодов"
          }
        },
        "type": "object",
        "required": [
          "qrCodes"
        ],
        "title": "GetCashboxQRCodeListResponseModel"
      },
      "GetCashboxQRCodeRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/GetCashboxQRCodeRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "GetCashboxQRCodeRequestDataModel"
      },
      "GetCashboxQRCodeRequestModel": {
        "properties": {
          "imageParams": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrCodeImageParams"
              }
            ]
          }
        },
        "type": "object",
        "title": "GetCashboxQRCodeRequestModel"
      },
      "GetCashboxQrCodeOperationInfoResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/GetCashboxQrCodeOperationInfoResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "GetCashboxQrCodeOperationInfoResponseDataModel"
      },
      "GetCashboxQrCodeOperationInfoResponseModel": {
        "properties": {
          "qrCodeStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBPCashboxOperationQrCodeStatus"
              }
            ],
            "title": "Статус кассовой ссылки",
            "examples": [
              "WAITING_PAYMENT"
            ]
          },
          "trxStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBPCashboxTrxStatus"
              }
            ],
            "title": "Статус операции по кассовой ссылке",
            "examples": [
              "ACWP"
            ]
          },
          "trxId": {
            "type": "string",
            "title": "Идентификатор операции",
            "examples": [
              "A1A2S3D5F6G7H8J9K0C4S5C6D7V5D1K2"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Сумма Операции в копейках",
            "description": "Целое, положительное число. Валюта операции – рубли РФ",
            "examples": [
              100000
            ]
          },
          "dateTime": {
            "type": "string",
            "title": "Дата и время выполнения операции",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "payerId": {
            "type": "string",
            "title": "Маскированный номер телефона клиента-плательщика",
            "examples": [
              "*********6731"
            ]
          },
          "kzo": {
            "type": "string",
            "title": "Контрольное значение операции СБП",
            "examples": [
              "FDOS4JUETLYT639ADAFZ4GAUY9VSM2TG2Y595LQ20EKQF3JM1CIV4ZTZYA1EYIMFMEJSRB2UR7KATMA29Q"
            ]
          }
        },
        "type": "object",
        "required": [
          "qrCodeStatus",
          "trxStatus"
        ],
        "title": "GetCashboxQrCodeOperationInfoResponseModel"
      },
      "GetCashboxQrCodeResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/CashboxQrCodeResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "GetCashboxQrCodeResponseDataModel"
      },
      "GetCashboxQrCodeStatusResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/GetCashboxQrCodeStatusResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "GetCashboxQrCodeStatusResponseDataModel"
      },
      "GetCashboxQrCodeStatusResponseModel": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBPCashboxQrCodeStatus"
              }
            ],
            "title": "Статус операции"
          },
          "paramsId": {
            "type": "string",
            "title": "Идентификатор активных значений параметров QR-кода"
          }
        },
        "type": "object",
        "required": [
          "status",
          "paramsId"
        ],
        "title": "GetCashboxQrCodeStatusResponseModel"
      },
      "GetCustomerInfoResponseModelV3": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/CustomerInfoResponseV3"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "GetCustomerInfoResponseModelV3"
      },
      "InitStatementModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "statementId": {
            "type": "string",
            "maxLength": 40,
            "title": "Идентификатор ресурса выписки",
            "examples": [
              "23489"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementStatus"
              }
            ],
            "title": "Статус готовности выписки",
            "examples": [
              "Ready"
            ]
          },
          "startDateTime": {
            "type": "string",
            "format": "date",
            "title": "Дата начала выписки. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01"
            ]
          },
          "endDateTime": {
            "type": "string",
            "format": "date",
            "title": "Дата окончания выписки. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01"
            ]
          },
          "creationDateTime": {
            "type": "string",
            "title": "Дата и время создания ресурса. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "status",
          "startDateTime",
          "endDateTime",
          "creationDateTime"
        ],
        "title": "InitStatementModel"
      },
      "InvoiceCreateRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/InvoiceCreateRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "InvoiceCreateRequestDataModel"
      },
      "InvoiceCreateRequestModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "customerCode": {
            "type": "string",
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "SecondSide": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SecondSideModel"
              }
            ],
            "title": "Сторона заказчика/покупателя в сделке в документе"
          },
          "Content": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContentInvoice"
              }
            ],
            "title": "Содержимое счета на оплату"
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "customerCode",
          "SecondSide",
          "Content"
        ],
        "title": "InvoiceCreateRequestModel"
      },
      "InvoiceModel": {
        "properties": {
          "Positions": {
            "items": {
              "$ref": "#/components/schemas/PositionModel"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список позиций"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Дата выставления счета, приведенная к часовому поясу Москвы. Если не передана, то текущая дата.",
            "examples": [
              "2010-10-29"
            ]
          },
          "totalAmount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма всех позиций с НДС",
            "examples": [
              "1234.56"
            ]
          },
          "totalNds": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма НДС",
            "examples": [
              "1234.56"
            ]
          },
          "number": {
            "type": "string",
            "title": "Номер выставляемого счёта",
            "examples": [
              "1"
            ]
          },
          "basedOn": {
            "type": "string",
            "title": "Документ, на основании которого выставляется счёт",
            "examples": [
              "Основание платежа"
            ]
          },
          "comment": {
            "type": "string",
            "title": "Комментарий",
            "examples": [
              "Комментарий к платежу"
            ]
          },
          "paymentExpiryDate": {
            "type": "string",
            "format": "date",
            "title": "Срок оплаты в виде даты, приведенной к часовому поясу Москвы",
            "examples": [
              "2020-01-20"
            ]
          }
        },
        "type": "object",
        "required": [
          "Positions",
          "totalAmount",
          "number"
        ],
        "title": "InvoiceModel"
      },
      "InvoicePaymentStatusResponse": {
        "properties": {
          "paymentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/application__invoice__models__enums__PaymentStatusEnum"
              }
            ],
            "title": "Статус оплаты документа",
            "examples": [
              "payment_paid"
            ]
          }
        },
        "type": "object",
        "required": [
          "paymentStatus"
        ],
        "title": "InvoicePaymentStatusResponse"
      },
      "InvoicePaymentStatusResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/InvoicePaymentStatusResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "InvoicePaymentStatusResponseModel"
      },
      "InvoicefModel": {
        "properties": {
          "Positions": {
            "items": {
              "$ref": "#/components/schemas/PositionModel"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список позиций"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Дата выставления счета, приведенная к часовому поясу Москвы. Если не передана, то текущая дата.",
            "examples": [
              "2010-10-29"
            ]
          },
          "totalAmount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма всех позиций с НДС",
            "examples": [
              "1234.56"
            ]
          },
          "totalNds": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма НДС",
            "examples": [
              "1234.56"
            ]
          },
          "number": {
            "type": "string",
            "title": "Номер счёт-фактуры",
            "examples": [
              "1"
            ]
          },
          "basedOn": {
            "type": "string",
            "title": "Документ, на основании которого выставляется счёт",
            "examples": [
              "Основание платежа"
            ]
          },
          "shipmentDocuments": {
            "items": {
              "$ref": "#/components/schemas/ShipmentDocumentModel"
            },
            "type": "array",
            "minItems": 1,
            "title": "Реквизиты документа, подтверждающего отгрузку товаров, работ или услуг"
          }
        },
        "type": "object",
        "required": [
          "Positions",
          "totalAmount",
          "number"
        ],
        "title": "InvoicefModel"
      },
      "LegalEntity": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "Статус объекта",
            "examples": [
              "Active"
            ]
          },
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Время регистрации",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "address": {
            "type": "string",
            "title": "Юридический адрес",
            "examples": [
              "УЛИЦА ТАТАРСКАЯ Б. ДОМ 11"
            ]
          },
          "city": {
            "type": "string",
            "title": "Город",
            "examples": [
              "Москва"
            ]
          },
          "countryCode": {
            "type": "string",
            "title": "код страны-регистрации юридического лица, в формате \"ISO 3166, Alpha-2\"",
            "examples": [
              "RU"
            ]
          },
          "countrySubDivisionCode": {
            "type": "string",
            "title": "Код региона-регистрации юридического лица, первые две цифры кода ОКТМО",
            "examples": [
              "45"
            ]
          },
          "zipCode": {
            "type": "string",
            "title": "Индекс",
            "examples": [
              "115184"
            ]
          },
          "customerCode": {
            "type": "string",
            "title": "Уникальный код клиента",
            "examples": [
              "300000092"
            ]
          },
          "entityType": {
            "type": "string",
            "title": "Организационно-правовая форма юридического лица",
            "examples": [
              "АО"
            ]
          },
          "inn": {
            "type": "string",
            "title": "ИНН",
            "examples": [
              "7706812159"
            ]
          },
          "kpp": {
            "type": "string",
            "title": "КПП",
            "examples": [
              "770501001"
            ]
          },
          "name": {
            "type": "string",
            "title": "Полное наименование юридического лица",
            "examples": [
              "АКЦИОНЕРНОЕ ОБЩЕСТВО \"НАЦИОНАЛЬНАЯ СИСТЕМА ПЛАТЕЖНЫХ КАРТ\""
            ]
          },
          "ogrn": {
            "type": "string",
            "title": "ОГРН",
            "examples": [
              "1147746831352"
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "legalId",
          "createdAt",
          "countryCode",
          "customerCode",
          "inn",
          "name",
          "ogrn"
        ],
        "title": "LegalEntity"
      },
      "LegalEntityResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/LegalEntity"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "LegalEntityResponseModel"
      },
      "LinkModel": {
        "properties": {
          "self": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Self",
            "examples": [
              "https://enter.tochka.com/uapi"
            ]
          }
        },
        "type": "object",
        "required": [
          "self"
        ],
        "title": "LinkModel"
      },
      "Measure": {
        "type": "string",
        "enum": [
          "г.",
          "кг.",
          "т.",
          "см.",
          "дм.",
          "м.",
          "см2.",
          "дм2.",
          "м2.",
          "мл.",
          "л.",
          "м3",
          "кВт.ч.",
          "Гкал.",
          "дн.",
          "ч.",
          "мин.",
          "сек.",
          "Кб.",
          "Мб.",
          "Гб.",
          "Тб.",
          "шт."
        ],
        "title": "Measure"
      },
      "MediaTypeEnum": {
        "type": "string",
        "enum": [
          "image/png",
          "image/svg+xml"
        ],
        "title": "MediaTypeEnum"
      },
      "Merchant": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "Статус объекта",
            "examples": [
              "Active"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Время регистрации",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "address": {
            "type": "string",
            "title": "Юридический адрес",
            "examples": [
              "УЛИЦА ТАТАРСКАЯ Б. ДОМ 11"
            ]
          },
          "city": {
            "type": "string",
            "title": "Город",
            "examples": [
              "Москва"
            ]
          },
          "countryCode": {
            "type": "string",
            "title": "код страны-регистрации юридического лица, в формате \"ISO 3166, Alpha-2\"",
            "examples": [
              "RU"
            ]
          },
          "countrySubDivisionCode": {
            "type": "string",
            "title": "Код региона-регистрации юридического лица, первые две цифры кода ОКТМО",
            "examples": [
              "45"
            ]
          },
          "zipCode": {
            "type": "string",
            "title": "Индекс",
            "examples": [
              "115184"
            ]
          },
          "merchantId": {
            "type": "string",
            "maxLength": 12,
            "title": "Идентификатор ТСП",
            "examples": [
              "MF0000000001"
            ]
          },
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          },
          "brandName": {
            "type": "string",
            "title": "Название ТСП (имя по вывеске)",
            "examples": [
              "Кофейня у Артема"
            ]
          },
          "capabilities": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CapabilitiesEnum"
              }
            ],
            "title": "Возможности ТСП по взаимодействию с покупателем",
            "examples": [
              "001"
            ]
          },
          "contactPhoneNumber": {
            "type": "string",
            "title": "\"Контактный номер телефона ТСП",
            "examples": [
              "79991234567"
            ]
          },
          "mcc": {
            "type": "string",
            "title": "MCC код",
            "examples": [
              "4121"
            ]
          },
          "additionalContacts": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Дополнительные контакты"
          }
        },
        "type": "object",
        "required": [
          "status",
          "createdAt",
          "countryCode",
          "merchantId",
          "legalId",
          "brandName",
          "capabilities",
          "mcc"
        ],
        "title": "Merchant"
      },
      "MerchantId": {
        "properties": {
          "merchantId": {
            "type": "string",
            "maxLength": 12,
            "title": "Идентификатор ТСП",
            "examples": [
              "MF0000000001"
            ]
          }
        },
        "type": "object",
        "required": [
          "merchantId"
        ],
        "title": "MerchantId"
      },
      "MerchantIdResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/MerchantId"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "MerchantIdResponseModel"
      },
      "MerchantListResponse": {
        "properties": {
          "MerchantList": {
            "items": {
              "$ref": "#/components/schemas/Merchant"
            },
            "type": "array",
            "title": "Merchantlist"
          }
        },
        "type": "object",
        "required": [
          "MerchantList"
        ],
        "title": "MerchantListResponse"
      },
      "MerchantListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/MerchantListResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "MerchantListResponseModel"
      },
      "MerchantResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/Merchant"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "MerchantResponseModel"
      },
      "MetaModel": {
        "properties": {
          "totalPages": {
            "type": "integer",
            "title": "Totalpages",
            "examples": [
              1
            ]
          }
        },
        "type": "object",
        "required": [
          "totalPages"
        ],
        "title": "MetaModel"
      },
      "NdsKindEnum": {
        "type": "string",
        "enum": [
          "nds_0",
          "nds_5",
          "nds_7",
          "nds_10",
          "nds_20",
          "without_nds"
        ],
        "title": "NdsKindEnum"
      },
      "NotFoundError": {
        "properties": {
          "errorCode": {
            "type": "string",
            "title": "Низкоуровневое текстовое описание ошибки",
            "examples": [
              "HTTPNotFound"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 603,
            "title": "Описание ошибки. Обрезается если длина ошибки превышает максимальное значение",
            "examples": [
              "Something going wrong"
            ]
          },
          "url": {
            "type": "string",
            "title": "URL для помощи в устранении проблемы",
            "examples": [
              "\"http://enter.tochka.com/open-banking/docs\""
            ]
          }
        },
        "type": "object",
        "required": [
          "errorCode",
          "message",
          "url"
        ],
        "title": "NotFoundError"
      },
      "NotFoundErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 40,
            "title": "Высокоуровневый текстовый код ошибки, необходимый для классификации.",
            "examples": [
              "404"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный идентификатор ошибки, для целей аудита",
            "examples": [
              "c397b21a-d998-4c4d-9471-e60eaf816b87"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 600,
            "title": "Краткое сообщение об ошибке.",
            "examples": [
              "Что-то пошло не так"
            ]
          },
          "Errors": {
            "items": {
              "$ref": "#/components/schemas/NotFoundError"
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "code",
          "id",
          "message",
          "Errors"
        ],
        "title": "NotFoundErrorResponse"
      },
      "OptionalLegalId": {
        "properties": {
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          }
        },
        "type": "object",
        "required": [
          "legalId"
        ],
        "title": "OptionalLegalId"
      },
      "OrderModel": {
        "properties": {
          "orderId": {
            "type": "string",
            "title": "Идентификатор платежа"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderType"
              }
            ],
            "title": "Тип операции"
          },
          "amount": {
            "type": "number",
            "title": "Сумма операции"
          },
          "time": {
            "type": "string",
            "title": "Время операции"
          }
        },
        "type": "object",
        "required": [
          "orderId",
          "type",
          "amount",
          "time"
        ],
        "title": "OrderModel"
      },
      "OrderType": {
        "type": "string",
        "enum": [
          "refund",
          "approval"
        ],
        "title": "OrderType"
      },
      "PackingListModel": {
        "properties": {
          "Positions": {
            "items": {
              "$ref": "#/components/schemas/PositionModel"
            },
            "type": "array",
            "minItems": 1,
            "title": "Список позиций"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Дата выставления счета, приведенная к часовому поясу Москвы. Если не передана, то текущая дата.",
            "examples": [
              "2010-10-29"
            ]
          },
          "totalAmount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма всех позиций с НДС",
            "examples": [
              "1234.56"
            ]
          },
          "totalNds": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма НДС",
            "examples": [
              "1234.56"
            ]
          },
          "number": {
            "type": "string",
            "title": "Номер товарной накладной",
            "examples": [
              "1"
            ]
          },
          "basedOn": {
            "type": "string",
            "title": "Документ, на основании которого вы выставляете накладную",
            "examples": [
              "Основание платежа"
            ]
          }
        },
        "type": "object",
        "required": [
          "Positions",
          "totalAmount",
          "number"
        ],
        "title": "PackingListModel"
      },
      "PaginatedLinkModel": {
        "properties": {
          "self": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Self",
            "examples": [
              "https://enter.tochka.com/uapi"
            ]
          },
          "first": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "First",
            "examples": [
              "https://enter.tochka.com/uapi"
            ]
          },
          "prev": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Prev",
            "examples": [
              "https://enter.tochka.com/uapi"
            ]
          },
          "next": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Next",
            "examples": [
              "https://enter.tochka.com/uapi"
            ]
          },
          "last": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Last",
            "examples": [
              "https://enter.tochka.com/uapi"
            ]
          }
        },
        "type": "object",
        "required": [
          "self"
        ],
        "title": "PaginatedLinkModel"
      },
      "PaymentForSignListItemModel": {
        "properties": {
          "accountCode": {
            "type": "string",
            "maxLength": 20,
            "minLength": 20,
            "title": "Номер счёта отправителя",
            "examples": [
              "40702810840020002503"
            ]
          },
          "bankCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "БИК отправителя",
            "examples": [
              "044525104"
            ]
          },
          "counterpartyBankBic": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "БИК получателя",
            "examples": [
              "044525104"
            ]
          },
          "counterpartyAccountNumber": {
            "type": "string",
            "maxLength": 20,
            "minLength": 20,
            "title": "Счёт получателя",
            "examples": [
              "40702810840020002504"
            ]
          },
          "counterpartyINN": {
            "type": "string",
            "title": "ИНН получателя длинна строки",
            "description": "Допустимые значения \"0\", 10 или 12 значное число",
            "examples": [
              "5001038736"
            ]
          },
          "counterpartyKPP": {
            "type": "string",
            "title": "КПП получателя",
            "description": "Допустимые значения \"0\" или 9 значное число",
            "examples": [
              "500101001"
            ]
          },
          "counterpartyName": {
            "type": "string",
            "title": "Наименование получателя платежа",
            "examples": [
              "ООО \"БАЙКАЛ-СЕРВИС ТК\""
            ]
          },
          "paymentAmount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              700.33
            ]
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time",
            "title": "Дата последней смены статуса платежа",
            "examples": [
              "2018-03-29"
            ]
          },
          "paymentNumber": {
            "type": "string",
            "maxLength": 6,
            "minLength": 1,
            "title": "Номер платежа",
            "examples": [
              "9195"
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 210,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "payerINN": {
            "type": "string",
            "title": "ИНН за кого платят",
            "description": "Допустимые значения \"0\", 10 или 12 значное число",
            "examples": [
              "5001038736"
            ]
          },
          "payerKPP": {
            "type": "string",
            "title": "КПП за кого платят",
            "description": "Допустимые значения \"0\" или 9 значное число",
            "examples": [
              "500101001"
            ]
          },
          "counterpartyBankCorrAccount": {
            "type": "string",
            "maxLength": 20,
            "minLength": 20,
            "title": "Кор. счёт банка получателя",
            "examples": [
              "30101810745374525104"
            ]
          },
          "paymentPriority": {
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "title": "Приоритет платежа",
            "default": "5",
            "examples": [
              "5"
            ]
          },
          "codePurpose": {
            "type": "string",
            "maxLength": 1,
            "title": "Поле 20",
            "examples": [
              "1"
            ]
          },
          "supplierBillId": {
            "type": "string",
            "title": "Код УИН (поле 22)",
            "examples": [
              "1"
            ]
          },
          "budgetPaymentCode": {
            "type": "string",
            "title": "Код выплат из бюджета на ФЛ (поле 110)",
            "examples": [
              "1"
            ]
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email для отправки платежного поручения",
            "examples": [
              "ivanov@mail.com"
            ]
          },
          "taxInfoDocumentDate": {
            "type": "string",
            "title": "Дата документа (поле 109). Используется стандарт ISO8601. Допустимо значение \"0\"",
            "examples": [
              "2018-03-29"
            ]
          },
          "taxInfoDocumentNumber": {
            "type": "string",
            "minLength": 1,
            "title": "Номера документа (поле 108)",
            "examples": [
              "12"
            ]
          },
          "taxInfoKBK": {
            "type": "string",
            "title": "КБК (поле 104)",
            "examples": [
              "18210202020061000160"
            ]
          },
          "taxInfoOKATO": {
            "type": "string",
            "title": "ОКАТО (поле 105)",
            "examples": [
              "65401364000"
            ]
          },
          "taxInfoPeriod": {
            "type": "string",
            "title": "Налоговый период (поле 107). Допустимо значение \"0\"",
            "examples": [
              "МС.08.2009"
            ]
          },
          "taxInfoReasonCode": {
            "type": "string",
            "title": "Основание (поле 106)",
            "examples": [
              "ТП"
            ]
          },
          "taxInfoStatus": {
            "type": "string",
            "title": "Статус (поле 101)",
            "examples": [
              "08"
            ]
          }
        },
        "type": "object",
        "required": [
          "counterpartyBankBic",
          "counterpartyAccountNumber",
          "counterpartyName",
          "paymentAmount",
          "paymentDate",
          "paymentPurpose"
        ],
        "title": "PaymentForSignListItemModel"
      },
      "PaymentForSignListResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/PaymentForSignListResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "PaymentForSignListResponseDataModel"
      },
      "PaymentForSignListResponseModel": {
        "properties": {
          "Payment": {
            "items": {
              "$ref": "#/components/schemas/PaymentForSignListItemModel"
            },
            "type": "array",
            "title": "Payment"
          }
        },
        "type": "object",
        "required": [
          "Payment"
        ],
        "title": "PaymentForSignListResponseModel"
      },
      "PaymentForSignRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/PaymentForSignRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "PaymentForSignRequestDataModel"
      },
      "PaymentForSignRequestModel": {
        "properties": {
          "accountCode": {
            "type": "string",
            "maxLength": 20,
            "minLength": 20,
            "title": "Номер счёта отправителя",
            "examples": [
              "40702810840020002503"
            ]
          },
          "bankCode": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "БИК отправителя",
            "examples": [
              "044525104"
            ]
          },
          "payerINN": {
            "type": "string",
            "title": "ИНН за кого платят",
            "description": "Заполняется только при платеже за 3 лицо. Допустимые значения \"0\", 10 или 12 значное число",
            "examples": [
              "5001038736"
            ]
          },
          "payerKPP": {
            "type": "string",
            "title": "КПП за кого платят",
            "description": "Заполняется только за 3 лицо при платеже в бюджет. Допустимые значение \"0\" или 9 значное число",
            "examples": [
              "500101001"
            ]
          },
          "counterpartyBankBic": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "БИК получателя",
            "examples": [
              "044525104"
            ]
          },
          "counterpartyAccountNumber": {
            "type": "string",
            "maxLength": 20,
            "minLength": 20,
            "title": "Счёт получателя",
            "examples": [
              "40702810840020002504"
            ]
          },
          "counterpartyINN": {
            "type": "string",
            "maxLength": 12,
            "minLength": 10,
            "title": "ИНН получателя",
            "examples": [
              "5001038736"
            ]
          },
          "counterpartyKPP": {
            "type": "string",
            "maxLength": 9,
            "title": "КПП получателя",
            "description": "Допустимые значения \"0\" или 9 значное число",
            "examples": [
              "500101001"
            ]
          },
          "counterpartyName": {
            "type": "string",
            "title": "Получатель платежа",
            "examples": [
              "ООО \"БАЙКАЛ-СЕРВИС ТК\""
            ]
          },
          "counterpartyBankCorrAccount": {
            "type": "string",
            "maxLength": 20,
            "minLength": 20,
            "title": "Кор. счёт банка получателя",
            "examples": [
              "30101810745374525104"
            ]
          },
          "paymentAmount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              700.33
            ]
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "title": "Дата платежа. Используется стандарт ISO8601",
            "description": "Дата платежа, приведенная к часовому поясу Москвы",
            "examples": [
              "2018-03-29"
            ]
          },
          "paymentNumber": {
            "type": "integer",
            "exclusiveMaximum": 1000000.0,
            "exclusiveMinimum": 0.0,
            "title": "Номер платежа",
            "examples": [
              9195
            ]
          },
          "paymentPriority": {
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "title": "Приоритет платежа",
            "default": "5",
            "examples": [
              "5"
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 210,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "codePurpose": {
            "type": "string",
            "maxLength": 1,
            "title": "Поле 20",
            "description": "Заполняется только при платеже физ лицам на счета:('40810', '40817', '40823', '40824', '40826', '423', '30232', '40803', '40813', '40820', '426'). Допустимые значения 1,2,3,4,5 и пусто",
            "examples": [
              "1"
            ]
          },
          "supplierBillId": {
            "type": "string",
            "title": "Код УИН (поле 22)",
            "examples": [
              "1"
            ]
          },
          "taxInfoDocumentDate": {
            "type": "string",
            "title": "Дата документа (поле 109). Используется стандарт ISO8601. Допустимо значение \"0\"",
            "examples": [
              "2018-03-29"
            ]
          },
          "taxInfoDocumentNumber": {
            "type": "string",
            "maxLength": 15,
            "minLength": 1,
            "title": "Номера документа (поле 108)",
            "examples": [
              "12"
            ]
          },
          "taxInfoKBK": {
            "type": "string",
            "title": "КБК (поле 104)",
            "examples": [
              "18210202020061000160"
            ]
          },
          "taxInfoOKATO": {
            "type": "string",
            "title": "ОКАТО (поле 105)",
            "examples": [
              "65401364000"
            ]
          },
          "taxInfoPeriod": {
            "type": "string",
            "title": "Налоговый период (поле 107). Допустимо значение \"0\"",
            "examples": [
              "МС.08.2009"
            ]
          },
          "taxInfoReasonCode": {
            "type": "string",
            "maxLength": 2,
            "minLength": 1,
            "title": "Основание (поле 106)",
            "examples": [
              "ТП"
            ]
          },
          "taxInfoStatus": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "title": "Статус (поле 101)",
            "examples": [
              "08"
            ]
          },
          "budgetPaymentCode": {
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "title": "Код выплат из бюджета на ФЛ (поле 110)",
            "examples": [
              "1"
            ]
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email для отправки платежного поручения",
            "examples": [
              "ivanov@mail.com"
            ]
          }
        },
        "type": "object",
        "required": [
          "accountCode",
          "bankCode",
          "counterpartyBankBic",
          "counterpartyAccountNumber",
          "counterpartyName",
          "paymentAmount",
          "paymentDate",
          "paymentPurpose"
        ],
        "title": "PaymentForSignRequestModel"
      },
      "PaymentForSignResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/PaymentForSignResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "PaymentForSignResponseDataModel"
      },
      "PaymentForSignResponseModel": {
        "properties": {
          "requestId": {
            "type": "string",
            "title": "ID запроса",
            "examples": [
              "openapi-b96d770e-769f-49ce-9630-890e00d47720"
            ]
          }
        },
        "type": "object",
        "required": [
          "requestId"
        ],
        "title": "PaymentForSignResponseModel"
      },
      "PaymentMethod": {
        "type": "string",
        "enum": [
          "full_payment",
          "full_prepayment"
        ],
        "title": "PaymentMethod"
      },
      "PaymentObject": {
        "type": "string",
        "enum": [
          "goods",
          "service",
          "work"
        ],
        "title": "PaymentObject"
      },
      "PaymentOrderRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/PaymentOrderRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "PaymentOrderRequestDataModel"
      },
      "PaymentOrderRequestModel": {
        "properties": {
          "accountCode": {
            "type": "string",
            "title": "Номер счёта отправителя",
            "examples": [
              "40702810840020002503"
            ]
          },
          "bankCode": {
            "type": "string",
            "title": "БИК отправителя",
            "examples": [
              "044525104"
            ]
          },
          "payerINN": {
            "type": "string",
            "title": "ИНН за кого платят",
            "description": "Заполняется только при платеже за 3 лицо. Допустимые значения \"0\", 10 или 12 значное число",
            "examples": [
              "5001038736"
            ]
          },
          "payerKPP": {
            "type": "string",
            "title": "КПП за кого платят",
            "description": "Заполняется при платеже в бюджет (за себя или 3 лицо). Допустимые значение \"0\" или 9 значное число",
            "examples": [
              "500101001"
            ]
          },
          "counterpartyBankBic": {
            "type": "string",
            "maxLength": 9,
            "minLength": 9,
            "title": "БИК получателя",
            "examples": [
              "044525104"
            ]
          },
          "counterpartyAccountNumber": {
            "type": "string",
            "maxLength": 20,
            "minLength": 20,
            "title": "Счёт получателя",
            "examples": [
              "40702810840020002504"
            ]
          },
          "counterpartyINN": {
            "type": "string",
            "maxLength": 12,
            "minLength": 10,
            "title": "ИНН получателя",
            "examples": [
              "5001038736"
            ]
          },
          "counterpartyKPP": {
            "type": "string",
            "maxLength": 9,
            "title": "КПП получателя",
            "description": "Допустимые значения \"0\" или 9 значное число",
            "examples": [
              "500101001"
            ]
          },
          "counterpartyName": {
            "type": "string",
            "title": "Получатель платежа",
            "examples": [
              "ООО \"БАЙКАЛ-СЕРВИС ТК\""
            ]
          },
          "counterpartyBankCorrAccount": {
            "type": "string",
            "maxLength": 20,
            "minLength": 20,
            "title": "Кор. счёт банка получателя",
            "examples": [
              "30101810745374525104"
            ]
          },
          "paymentAmount": {
            "type": "number",
            "title": "Сумма платежа",
            "examples": [
              700.33
            ]
          },
          "paymentDate": {
            "type": "string",
            "format": "date",
            "title": "Дата платежа. Используется стандарт ISO8601",
            "description": "Дата платежа, приведенная к часовому поясу Москвы",
            "examples": [
              "2018-03-29"
            ]
          },
          "paymentNumber": {
            "type": "integer",
            "exclusiveMaximum": 1000000.0,
            "exclusiveMinimum": 0.0,
            "title": "Номер платежа",
            "examples": [
              9195
            ]
          },
          "paymentPriority": {
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "title": "Приоритет платежа",
            "default": "5",
            "examples": [
              "5"
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 210,
            "minLength": 1,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "codePurpose": {
            "type": "string",
            "maxLength": 1,
            "title": "Поле 20",
            "description": "Заполняется только при платеже физ лицам на счета:('40810', '40817', '40823', '40824', '40826', '423', '30232', '40803', '40813', '40820', '426'). Допустимые значения 1,2,3,4,5 и пусто",
            "examples": [
              "1"
            ]
          },
          "supplierBillId": {
            "type": "string",
            "title": "Код УИН (поле 22)",
            "examples": [
              "1"
            ]
          },
          "taxInfoDocumentDate": {
            "type": "string",
            "title": "Дата документа (поле 109). Используется стандарт ISO8601. Допустимо значение \"0\"",
            "examples": [
              "2018-03-29"
            ]
          },
          "taxInfoDocumentNumber": {
            "type": "string",
            "maxLength": 15,
            "minLength": 1,
            "title": "Номера документа (поле 108)",
            "examples": [
              "12"
            ]
          },
          "taxInfoKBK": {
            "type": "string",
            "title": "КБК (поле 104)",
            "examples": [
              "18210202020061000160"
            ]
          },
          "taxInfoOKATO": {
            "type": "string",
            "title": "ОКАТО (поле 105)",
            "examples": [
              "65401364000"
            ]
          },
          "taxInfoPeriod": {
            "type": "string",
            "title": "Налоговый период (поле 107). Допустимо значение \"0\"",
            "examples": [
              "МС.08.2009"
            ]
          },
          "taxInfoReasonCode": {
            "type": "string",
            "maxLength": 2,
            "minLength": 1,
            "title": "Основание (поле 106)",
            "examples": [
              "ТП"
            ]
          },
          "taxInfoStatus": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "title": "Статус (поле 101)",
            "examples": [
              "08"
            ]
          },
          "budgetPaymentCode": {
            "type": "string",
            "maxLength": 1,
            "minLength": 1,
            "title": "Код выплат из бюджета на ФЛ (поле 110)",
            "examples": [
              "1"
            ]
          }
        },
        "type": "object",
        "required": [
          "counterpartyBankBic",
          "counterpartyAccountNumber",
          "counterpartyName",
          "paymentAmount",
          "paymentDate",
          "paymentPurpose"
        ],
        "title": "PaymentOrderRequestModel"
      },
      "PaymentOrderResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/PaymentOrderResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "PaymentOrderResponseDataModel"
      },
      "PaymentOrderResponseModel": {
        "properties": {
          "requestId": {
            "type": "string",
            "title": "ID запроса",
            "examples": [
              "openapi-b96d770e-769f-49ce-9630-890e00d47720"
            ]
          },
          "redirectURL": {
            "type": "string",
            "title": "Ссылка на страницу для редиректа. В query-параметрах указываются поля платежа.",
            "examples": [
              "https://enter.tochka.com/payment/?requestId=openapi-b96d770e-769f-49ce-9630-890e00d47720&clientId=test"
            ]
          }
        },
        "type": "object",
        "required": [
          "requestId",
          "redirectURL"
        ],
        "title": "PaymentOrderResponseModel"
      },
      "PaymentOrderStatusEnum": {
        "type": "string",
        "enum": [
          "Initiated",
          "Wait For Owner Requisites",
          "NotAllowed",
          "Allowed",
          "WaitingForSign",
          "WaitingForCreate",
          "Created",
          "Paid",
          "Canceled",
          "Rejected"
        ],
        "title": "PaymentOrderStatusEnum",
        "description": "**Описание статусов платежа**\n\n  - `Initiated` - Все необходимые реквизиты для платежа получены, платёж готов к проверке на возможность проведения\n  - `Wait For Owner Requisites` - Часть реквизитов для платежа получена, кроме реквизитов плательщика\n  - `NotAllowed` - Платёж нельзя провести: либо у пользователя нет прав для подписи, либо платёж заблокирован\n  комплаенсом\n  - `Allowed` - Платёж готов к подписанию, все проверки пройдены\n  - `WaitingForSign` - Платёж ждёт подписи\n  - `WaitingForCreate` - Платёж подписан, ждёт создания внутри систем банка\n  - `Created` - Платёж создан\n  - `Paid` - Платёж оплачен\n  - `Canceled` - Платёж отменен\n  - `Rejected` - Платёж отменён"
      },
      "PaymentStatusResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/PaymentStatusResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "PaymentStatusResponseDataModel"
      },
      "PaymentStatusResponseModel": {
        "properties": {
          "requestId": {
            "type": "string",
            "title": "ID запроса",
            "examples": [
              "openapi-b96d770e-769f-49ce-9630-890e00d47720"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentOrderStatusEnum"
              }
            ],
            "title": "Статус",
            "examples": [
              "WaitingForCreate"
            ]
          },
          "errors": {
            "items": {},
            "type": "array",
            "title": "Ошибки",
            "default": [],
            "examples": []
          }
        },
        "type": "object",
        "required": [
          "requestId",
          "status"
        ],
        "title": "PaymentStatusResponseModel"
      },
      "PositionModel": {
        "properties": {
          "positionName": {
            "type": "string",
            "title": "Название товара или услуги",
            "examples": [
              "Название товара"
            ]
          },
          "unitCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitCodeEnum"
              }
            ],
            "title": "Код единицы измерения",
            "examples": [
              "шт."
            ]
          },
          "ndsKind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NdsKindEnum"
              }
            ],
            "title": "Ставка НДС",
            "examples": [
              "nds_0"
            ]
          },
          "price": {
            "type": "number",
            "minimum": 0.0,
            "title": "Цена единицы с НДС",
            "examples": [
              "1234.56"
            ]
          },
          "quantity": {
            "type": "number",
            "exclusiveMaximum": 10000000.0,
            "exclusiveMinimum": 0.0,
            "title": "Количество",
            "examples": [
              "1234.567"
            ]
          },
          "totalAmount": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма позиции с НДС",
            "examples": [
              "1234.56"
            ]
          },
          "totalNds": {
            "type": "number",
            "minimum": 0.0,
            "title": "Сумма НДС",
            "examples": [
              "1234.56"
            ]
          }
        },
        "type": "object",
        "required": [
          "positionName",
          "unitCode",
          "ndsKind",
          "price",
          "quantity",
          "totalAmount"
        ],
        "title": "PositionModel"
      },
      "QRCodeListResponse": {
        "properties": {
          "qrCodeList": {
            "items": {
              "$ref": "#/components/schemas/QrCode"
            },
            "type": "array",
            "title": "Qrcodelist"
          }
        },
        "type": "object",
        "required": [
          "qrCodeList"
        ],
        "title": "QRCodeListResponse"
      },
      "QRCodeListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/QRCodeListResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "QRCodeListResponseModel"
      },
      "QRCodeModelResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/RegisteredQrCode"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "QRCodeModelResponseModel"
      },
      "QRCodePaymentStatusExternal": {
        "type": "string",
        "enum": [
          "NotStarted",
          "Received",
          "InProgress",
          "Accepted",
          "Rejected"
        ],
        "title": "QRCodePaymentStatusExternal",
        "description": "**Описание возможных статусов платежа**\n\n  - `NotStarted` - операции по QR-коду не существует\n  - `Received` - операция в обработке\n  - `InProgress` - операция в обработке\n  - `Accepted` - операция завершена успешно\n  - `Rejected` - операция отклонена"
      },
      "QRCodePaymentStatusListResponse": {
        "properties": {
          "paymentList": {
            "items": {
              "$ref": "#/components/schemas/QrCodePaymentStatus"
            },
            "type": "array",
            "title": "Paymentlist"
          }
        },
        "type": "object",
        "required": [
          "paymentList"
        ],
        "title": "QRCodePaymentStatusListResponse"
      },
      "QRCodePaymentStatusListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/QRCodePaymentStatusListResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "QRCodePaymentStatusListResponseModel"
      },
      "QRCodeRequestParams": {
        "properties": {
          "width": {
            "type": "integer",
            "maximum": 2000.0,
            "minimum": 200.0,
            "title": "Ширина изображения (>=200, по умолчанию: 300)"
          },
          "height": {
            "type": "integer",
            "maximum": 2000.0,
            "minimum": 200.0,
            "title": "Высота изображения (>=200, по умолчанию: 300)"
          },
          "mediaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MediaTypeEnum"
              }
            ],
            "title": "Тип контента (\"image/png\" или \"image/svg+xml\" )",
            "default": "image/png"
          }
        },
        "type": "object",
        "required": [
          "width",
          "height"
        ],
        "title": "QRCodeRequestParams"
      },
      "QRCodeResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/QrCode"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "QRCodeResponseModel"
      },
      "QrCode": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "Статус объекта",
            "examples": [
              "Active"
            ]
          },
          "payload": {
            "type": "string",
            "title": "Payload зарегистрированного QR-кода в СБП",
            "examples": [
              "https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B"
            ]
          },
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "createdAt": {
            "type": "string",
            "title": "Время регистрации",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "merchantId": {
            "type": "string",
            "maxLength": 12,
            "title": "Идентификатор ТСП",
            "examples": [
              "MF0000000001"
            ]
          },
          "legalId": {
            "type": "string",
            "title": "Идентификатор зарегистрированного юрлица в СБП (12 символов)",
            "examples": [
              "LF0000000001"
            ]
          },
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "amount": {
            "type": "integer",
            "title": "Сумма в копейках",
            "examples": [
              0
            ]
          },
          "ttl": {
            "type": "string",
            "title": "Период использования в минутах",
            "examples": [
              "60"
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrCodeContent"
              }
            ]
          },
          "commissionPercent": {
            "type": "number",
            "title": "Размер комиссии в процентах",
            "examples": [
              0
            ]
          },
          "currency": {
            "type": "string",
            "title": "Валюта операции",
            "examples": [
              "RUB"
            ]
          },
          "qrcType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrTypeEnum"
              }
            ],
            "title": "Тип QR-кода",
            "examples": [
              "01"
            ]
          },
          "templateVersion": {
            "type": "string",
            "title": "Версия payload QR-кода",
            "examples": [
              "01"
            ]
          },
          "sourceName": {
            "type": "string",
            "title": "название источника (системы создавшей QR-код)",
            "examples": [
              "tochka.com"
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "payload",
          "accountId",
          "createdAt",
          "merchantId",
          "legalId",
          "qrcId",
          "commissionPercent",
          "qrcType",
          "templateVersion"
        ],
        "title": "QrCode"
      },
      "QrCodeContent": {
        "properties": {
          "width": {
            "type": "integer",
            "title": "Ширина изображения (>=200, по умолчанию: 300)"
          },
          "height": {
            "type": "integer",
            "title": "Высота изображения (>=200, по умолчанию: 300)"
          },
          "mediaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MediaTypeEnum"
              }
            ],
            "title": "Тип контента",
            "default": "image/png"
          },
          "content": {
            "type": "string",
            "title": "содержимое изображения (для image/png - в кодировке base64)",
            "examples": [
              "iVBORw0KGgoAAAANSUhEUgAAASwAAAEs..."
            ]
          }
        },
        "type": "object",
        "required": [
          "width",
          "height",
          "content"
        ],
        "title": "QrCodeContent"
      },
      "QrCodeImageParams": {
        "properties": {
          "width": {
            "type": "integer",
            "minimum": 200.0,
            "title": "Ширина изображения (>=200, по умолчанию: 300)"
          },
          "height": {
            "type": "integer",
            "minimum": 200.0,
            "title": "Высота изображения (>=200, по умолчанию: 300)"
          },
          "mediaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MediaTypeEnum"
              }
            ],
            "title": "Тип контента",
            "default": "image/png"
          }
        },
        "type": "object",
        "required": [
          "width",
          "height"
        ],
        "title": "QrCodeImageParams"
      },
      "QrCodePaymentStatus": {
        "properties": {
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "code": {
            "type": "string",
            "title": "Код операции",
            "examples": [
              "RQ00000"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QRCodePaymentStatusExternal"
              }
            ],
            "title": "Статус операции, инициированной Dynamic QR-кодом",
            "examples": [
              "InProgress"
            ]
          },
          "message": {
            "type": "string",
            "title": "Текстовое представление статуса",
            "examples": [
              "Запрос обработан успешно"
            ]
          },
          "trxId": {
            "type": "string",
            "title": "Идентификатор операции, инициированной Dynamic QR-кодом",
            "examples": [
              "X1A2S3D5F6G7H8J9K0C4S5C6D7V5D1K2"
            ]
          }
        },
        "type": "object",
        "required": [
          "qrcId",
          "code",
          "message"
        ],
        "title": "QrCodePaymentStatus"
      },
      "QrTypeEnum": {
        "type": "string",
        "enum": [
          "01",
          "02"
        ],
        "title": "QrTypeEnum",
        "description": "01 - QR-Static (QR наклейка)\n02 - QR-Dynamic (QR на кассе)"
      },
      "ReceiptClientModel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Для юрлица — название организации, для ИП и физического лица — ФИО",
            "examples": [
              "Иванов Иван Иванович"
            ]
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email покупателя, на который будет отправлен чек",
            "examples": [
              "ivanov@mail.com"
            ]
          },
          "phone": {
            "type": "string",
            "title": "Телефон пользователя для отправки чека.",
            "examples": [
              "+7999999999"
            ]
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "ReceiptClientModel"
      },
      "ReceiptItemModel-Input": {
        "properties": {
          "vatType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VatType"
              }
            ],
            "title": "Ставка НДС"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Название товара"
          },
          "amount": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Цена за единицу товара",
            "examples": [
              "1234.00"
            ]
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Количество товара",
            "examples": [
              1
            ]
          },
          "paymentMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "title": "Тип оплаты",
            "examples": [
              "full_payment"
            ]
          },
          "paymentObject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentObject"
              }
            ],
            "title": "Признак предмета расчёта",
            "examples": [
              "service"
            ]
          },
          "measure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Measure"
              }
            ],
            "title": "Единица измерения. По умолчанию - штуки",
            "default": "шт.",
            "examples": [
              "шт."
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "amount",
          "quantity"
        ],
        "title": "ReceiptItemModel"
      },
      "ReceiptItemModel-Output": {
        "properties": {
          "vatType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VatType"
              }
            ],
            "title": "Ставка НДС"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Название товара"
          },
          "amount": {
            "type": "number",
            "title": "Цена за единицу товара",
            "examples": [
              "1234.00"
            ]
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Количество товара",
            "examples": [
              1
            ]
          },
          "paymentMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "title": "Тип оплаты",
            "examples": [
              "full_payment"
            ]
          },
          "paymentObject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentObject"
              }
            ],
            "title": "Признак предмета расчёта",
            "examples": [
              "service"
            ]
          },
          "measure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Measure"
              }
            ],
            "title": "Единица измерения. По умолчанию - штуки",
            "default": "шт.",
            "examples": [
              "шт."
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "amount",
          "quantity"
        ],
        "title": "ReceiptItemModel"
      },
      "ReceiptItemResponseModel": {
        "properties": {
          "vatType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VatType"
              }
            ],
            "title": "Ставка НДС"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Название товара"
          },
          "amount": {
            "type": "number",
            "title": "Цена за единицу товара",
            "examples": [
              "1234.00"
            ]
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Количество товара",
            "examples": [
              1
            ]
          },
          "paymentMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              }
            ],
            "title": "Тип оплаты",
            "examples": [
              "full_payment"
            ]
          },
          "paymentObject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentObject"
              }
            ],
            "title": "Признак предмета расчёта",
            "examples": [
              "service"
            ]
          },
          "measure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Measure"
              }
            ],
            "title": "Единица измерения. По умолчанию - штуки",
            "default": "шт.",
            "examples": [
              "шт."
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "amount",
          "quantity"
        ],
        "title": "ReceiptItemResponseModel"
      },
      "RegisterB2BQRCode": {
        "properties": {
          "amount": {
            "type": "integer",
            "maximum": 100000000.0,
            "minimum": 1.0,
            "title": "Сумма в копейках",
            "examples": [
              0
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "sourceName": {
            "type": "string",
            "maxLength": 50,
            "title": "Название источника (системы создавшей QR-код)",
            "description": "Система, создавшая QR-код"
          },
          "takeTax": {
            "type": "boolean",
            "title": "Taketax",
            "description": "Наличие НДС"
          },
          "totalTaxAmount": {
            "type": "integer",
            "title": "Totaltaxamount",
            "description": "Сумма НДС в копейках"
          },
          "ttl": {
            "type": "integer",
            "maximum": 129600.0,
            "minimum": 1.0,
            "title": "Период использования в минутах",
            "default": 4320,
            "examples": [
              60
            ]
          },
          "redirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес",
            "description": "Ссылка для автоматического возврата плательщика из приложения банка в приложение или на сайт ТСП"
          },
          "uip": {
            "type": "string",
            "maxLength": 35,
            "title": "Уникальный идентификатор платежа, назначаемый получателем"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "paymentPurpose",
          "sourceName",
          "takeTax"
        ],
        "title": "RegisterB2BQRCode"
      },
      "RegisterB2BQRCodeRequest": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/RegisterB2BQRCode"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "RegisterB2BQRCodeRequest"
      },
      "RegisterCashboxQrCodeRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/RegisterCashboxQrCodeRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "RegisterCashboxQrCodeRequestDataModel"
      },
      "RegisterCashboxQrCodeRequestModel": {
        "properties": {
          "merchantId": {
            "type": "string",
            "maxLength": 12,
            "title": "Идентификатор ТСП",
            "examples": [
              "MF0000000001"
            ]
          },
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "redirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Ссылка для автоматического возврата плательщика из приложения банка в приложение или на сайт ТСП"
          },
          "imageParams": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrCodeImageParams"
              }
            ],
            "title": "Параметры изображения"
          }
        },
        "type": "object",
        "required": [
          "merchantId",
          "accountId"
        ],
        "title": "RegisterCashboxQrCodeRequestModel"
      },
      "RegisterCashboxQrCodeResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/RegisterCashboxQrCodeResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "RegisterCashboxQrCodeResponseDataModel"
      },
      "RegisterCashboxQrCodeResponseModel": {
        "properties": {
          "payload": {
            "type": "string",
            "title": "Payload зарегистрированного QR-кода в СБП",
            "examples": [
              "https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B"
            ]
          },
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrCodeContent"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "payload",
          "qrcId"
        ],
        "title": "RegisterCashboxQrCodeResponseModel"
      },
      "RegisterLegalEntityResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/OptionalLegalId"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "RegisterLegalEntityResponseModel"
      },
      "RegisterMerchant": {
        "properties": {
          "address": {
            "type": "string",
            "maxLength": 140,
            "title": "Юридический адрес",
            "examples": [
              "УЛИЦА ТАТАРСКАЯ Б. ДОМ 11"
            ]
          },
          "city": {
            "type": "string",
            "maxLength": 140,
            "title": "Город",
            "examples": [
              "Москва"
            ]
          },
          "countryCode": {
            "type": "string",
            "maxLength": 2,
            "title": "код страны-регистрации юридического лица, в формате \"ISO 3166, Alpha-2\"",
            "examples": [
              "RU"
            ]
          },
          "countrySubDivisionCode": {
            "type": "string",
            "maxLength": 2,
            "title": "Код региона-регистрации юридического лица, первые две цифры кода ОКТМО",
            "examples": [
              "45"
            ]
          },
          "zipCode": {
            "type": "string",
            "maxLength": 6,
            "title": "Индекс",
            "examples": [
              "115184"
            ]
          },
          "brandName": {
            "type": "string",
            "maxLength": 35,
            "title": "Название ТСП (имя по вывеске)",
            "examples": [
              "Кофейня у Артема"
            ]
          },
          "capabilities": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CapabilitiesEnum"
              }
            ],
            "title": "Возможности ТСП по взаимодействию с покупателем",
            "examples": [
              "001"
            ]
          },
          "contactPhoneNumber": {
            "type": "string",
            "maxLength": 13,
            "title": "\"Контактный номер телефона ТСП",
            "examples": [
              "79991234567"
            ]
          },
          "mcc": {
            "type": "string",
            "maxLength": 4,
            "title": "MCC код",
            "examples": [
              "4121"
            ]
          }
        },
        "type": "object",
        "required": [
          "address",
          "city",
          "countryCode",
          "countrySubDivisionCode",
          "zipCode",
          "brandName",
          "capabilities",
          "mcc"
        ],
        "title": "RegisterMerchant"
      },
      "RegisterMerchantRequest": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/RegisterMerchant"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "RegisterMerchantRequest"
      },
      "RegisterQRCode": {
        "properties": {
          "amount": {
            "type": "integer",
            "title": "Сумма в копейках",
            "description": "Поле обязательно для заполнения, если тип QR = QR-Dynamic"
          },
          "currency": {
            "type": "string",
            "title": "Валюта операции",
            "examples": [
              "RUB"
            ]
          },
          "paymentPurpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "qrcType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrTypeEnum"
              }
            ],
            "title": "Тип QR-кода",
            "examples": [
              "01"
            ]
          },
          "imageParams": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QRCodeRequestParams"
              }
            ],
            "title": "Параметры изображения"
          },
          "sourceName": {
            "type": "string",
            "title": "Название источника",
            "description": "Cистема, создавшая QR-код"
          },
          "ttl": {
            "type": "integer",
            "title": "Период использования QR-кода в минутах",
            "description": "Задается, только если тип QR = QR-Dynamic"
          },
          "redirectUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "URL адрес",
            "description": "Ссылка для автоматического возврата плательщика из приложения банка в приложение или на сайт ТСП"
          }
        },
        "type": "object",
        "required": [
          "paymentPurpose",
          "qrcType"
        ],
        "title": "RegisterQRCode"
      },
      "RegisterQRCodeRequest": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/RegisterQRCode"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "RegisterQRCodeRequest"
      },
      "RegisteredB2BQrCode": {
        "properties": {
          "payload": {
            "type": "string",
            "title": "Payload зарегистрированного QR-кода в СБП",
            "examples": [
              "https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B"
            ]
          },
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          }
        },
        "type": "object",
        "required": [
          "payload",
          "qrcId"
        ],
        "title": "RegisteredB2BQrCode"
      },
      "RegisteredQrCode": {
        "properties": {
          "payload": {
            "type": "string",
            "title": "Payload зарегистрированного QR-кода в СБП",
            "examples": [
              "https://qr.nspk.ru/AS1000670LSS7DN18SJQDNP4B05KLJL2?type=01&bank=100000000001&sum=10000&cur=RUB&crc=C08B"
            ]
          },
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QrCodeContent"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "payload",
          "qrcId"
        ],
        "title": "RegisteredQrCode"
      },
      "SBPCashboxOperationQrCodeStatus": {
        "type": "string",
        "enum": [
          "DEACTIVATED",
          "WAITING_PAYMENT",
          "IN_PROGRESS"
        ],
        "title": "SBPCashboxOperationQrCodeStatus"
      },
      "SBPCashboxQrCodeStatus": {
        "type": "string",
        "enum": [
          "INACTIVATED",
          "WAITING_PAYMENT",
          "IN_PROGRESS"
        ],
        "title": "SBPCashboxQrCodeStatus"
      },
      "SBPCashboxTrxStatus": {
        "type": "string",
        "enum": [
          "ACWP",
          "RJCT",
          "RCVD",
          "NTST"
        ],
        "title": "SBPCashboxTrxStatus",
        "description": "* ACWP - Операция завершена успешно\n* RJCT - Операция отклонена\n* RCVD - Операция в обработке\n* NTST - Операции по QR-коду не существует"
      },
      "SBPPayment": {
        "properties": {
          "qrcId": {
            "type": "string",
            "title": "Идентификатор QR-кода в СБП",
            "examples": [
              "AS000000000000000000000000000001"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/application__sbp__models__enums__PaymentStatusEnum"
              }
            ],
            "title": "Статус операции, инициированной Dynamic QR-кодом",
            "examples": [
              "InProgress"
            ]
          },
          "message": {
            "type": "string",
            "title": "Текстовое представление статуса",
            "examples": [
              "Запрос обработан успешно"
            ]
          },
          "refTransactionId": {
            "type": "string",
            "title": "Идентификатор операции, инициированной Dynamic QR-кодом",
            "examples": [
              "56746525-2768-5023-97aa-21a09c49d4d0"
            ]
          }
        },
        "type": "object",
        "required": [
          "qrcId",
          "status",
          "message",
          "refTransactionId"
        ],
        "title": "SBPPayment"
      },
      "SBPPaymentList": {
        "properties": {
          "Payments": {
            "items": {
              "$ref": "#/components/schemas/SBPPayment"
            },
            "type": "array",
            "title": "Payments"
          }
        },
        "type": "object",
        "required": [
          "Payments"
        ],
        "title": "SBPPaymentList"
      },
      "SBPPaymentStatus": {
        "type": "string",
        "enum": [
          "WaitingForClientConfirm",
          "Initiated",
          "WaitingForConfirm",
          "Confirmed",
          "WaitingForAccept",
          "Accepted",
          "Rejected"
        ],
        "title": "SBPPaymentStatus"
      },
      "SBPPaymentsResponse": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/SBPPaymentList"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "SBPPaymentsResponse"
      },
      "SBPRefund": {
        "properties": {
          "bankCode": {
            "type": "string",
            "maxLength": 9,
            "title": "Bankcode",
            "description": "БИК отправителя",
            "examples": [
              "044525104"
            ]
          },
          "accountCode": {
            "type": "string",
            "maxLength": 20,
            "title": "Accountcode",
            "description": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008"
            ]
          },
          "amount": {
            "type": "string",
            "title": "Amount",
            "description": "Cумма операции в рублях",
            "examples": [
              "10"
            ]
          },
          "currency": {
            "type": "string",
            "title": "Currency",
            "description": "Валюта операции",
            "default": "RUB"
          },
          "qrcId": {
            "type": "string",
            "title": "Qrcid",
            "description": "ID qr-кода, по которому был сделан платеж",
            "examples": [
              "AS10007GLJ1216F4905A1MTT3CP7GK3N"
            ]
          },
          "purpose": {
            "type": "string",
            "maxLength": 140,
            "title": "Purpose",
            "description": "Назначение платежа",
            "examples": [
              "Оплата по счету № 1 от 01.01.2021. Без НДС"
            ]
          },
          "refTransactionId": {
            "type": "string",
            "title": "Reftransactionid",
            "description": "Идентификатор транзакции, по которой осуществляется возврат",
            "examples": [
              "48232c9a-ce82-1593-3cb6-5c85a1ffef8f"
            ]
          },
          "trxId": {
            "type": "string",
            "title": "Trxid",
            "description": "Идентификатор операции в НСПК, по которой можно осуществить возврат",
            "examples": [
              "A1A2S3D5F6G7H8J9K0C4S5C6D7V5D1K2"
            ]
          }
        },
        "type": "object",
        "required": [
          "bankCode",
          "accountCode",
          "amount",
          "qrcId"
        ],
        "title": "SBPRefund"
      },
      "SBPRefundRequest": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/SBPRefund"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "SBPRefundRequest"
      },
      "SBPRefundRequestResponse": {
        "properties": {
          "requestId": {
            "type": "string",
            "title": "ID запроса",
            "examples": [
              "openapi-b96d770e-769f-49ce-9630-890e00d47720"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBPPaymentStatus"
              }
            ],
            "title": "Статус по процессу возрата",
            "examples": [
              "Confirmed"
            ]
          }
        },
        "type": "object",
        "required": [
          "requestId",
          "status"
        ],
        "title": "SBPRefundRequestResponse"
      },
      "SBPRefundRequestResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/SBPRefundRequestResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "SBPRefundRequestResponseModel"
      },
      "SBPRefundStatus": {
        "properties": {
          "requestId": {
            "type": "string",
            "title": "ID запроса",
            "examples": [
              "openapi-b96d770e-769f-49ce-9630-890e00d47720"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SBPPaymentStatus"
              }
            ],
            "title": "Статус по процессу возрата",
            "examples": [
              "Confirmed"
            ]
          },
          "statusDescription": {
            "type": "string",
            "title": "Statusdescription",
            "description": "Описание статуса (причина ошибки или сообщение об успехе)"
          }
        },
        "type": "object",
        "required": [
          "requestId",
          "status"
        ],
        "title": "SBPRefundStatus"
      },
      "SBPRefundStatusModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/SBPRefundStatus"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "SBPRefundStatusModel"
      },
      "SecondSideModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "legalAddress": {
            "type": "string",
            "title": "Юридический адрес",
            "examples": [
              "624205, РОССИЯ, СВЕРДЛОВСКАЯ обл, ЛЕСНОЙ г, ЛЕНИНА ул, ДОМ 96, офис КВ. 19"
            ]
          },
          "kpp": {
            "type": "string",
            "title": "КПП",
            "examples": [
              "668101001"
            ]
          },
          "bankName": {
            "type": "string",
            "title": "Название банка",
            "examples": [
              "ООО БАНК ТОЧКА"
            ]
          },
          "bankCorrAccount": {
            "type": "string",
            "title": "Корреспондентский счет банка",
            "examples": [
              "30101810745374525104"
            ]
          },
          "taxCode": {
            "type": "string",
            "title": "ИНН покупателя или заказчика",
            "examples": [
              "660000000000"
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CounterpartTypeEnum"
              }
            ],
            "title": "Тип покупателя или заказчика",
            "examples": [
              "company"
            ]
          },
          "secondSideName": {
            "type": "string",
            "title": "Наименование покупателя или заказчика",
            "examples": [
              "ООО Студия дизайна М-АРТ"
            ]
          }
        },
        "type": "object",
        "required": [
          "taxCode",
          "type"
        ],
        "title": "SecondSideModel"
      },
      "SendDocumentToEmailRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/SendDocumentToEmailRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "SendDocumentToEmailRequestDataModel"
      },
      "SendDocumentToEmailRequestModel": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Электронная почта, на которую нужно отправить"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "SendDocumentToEmailRequestModel"
      },
      "ShipmentDocumentModel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Наименование документа об отгрузке"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Дата документа об отгрузке",
            "examples": [
              "2010-10-29"
            ]
          },
          "number": {
            "type": "string",
            "title": "Номер документа об отгрузке"
          }
        },
        "type": "object",
        "required": [
          "name",
          "date",
          "number"
        ],
        "title": "ShipmentDocumentModel"
      },
      "StatementInitReqModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "startDateTime": {
            "type": "string",
            "format": "date",
            "title": "Дата начала выписки. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01"
            ]
          },
          "endDateTime": {
            "type": "string",
            "format": "date",
            "title": "Дата окончания выписки. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01"
            ]
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "startDateTime",
          "endDateTime"
        ],
        "title": "StatementInitReqModel"
      },
      "StatementInitRequestDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/StatementInitRequestModel"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "StatementInitRequestDataModel",
        "description": "Метод создания выписки по счету"
      },
      "StatementInitRequestModel": {
        "properties": {
          "Statement": {
            "$ref": "#/components/schemas/StatementInitReqModel"
          }
        },
        "type": "object",
        "required": [
          "Statement"
        ],
        "title": "StatementInitRequestModel"
      },
      "StatementInitResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/StatementInitResponseModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "StatementInitResponseDataModel",
        "description": "Метод создания выписки по счету"
      },
      "StatementInitResponseModel": {
        "properties": {
          "Statement": {
            "$ref": "#/components/schemas/InitStatementModel"
          }
        },
        "type": "object",
        "required": [
          "Statement"
        ],
        "title": "StatementInitResponseModel"
      },
      "StatementListModel": {
        "properties": {
          "Statement": {
            "items": {
              "$ref": "#/components/schemas/StatementModel"
            },
            "type": "array",
            "title": "Statement"
          }
        },
        "type": "object",
        "required": [
          "Statement"
        ],
        "title": "StatementListModel"
      },
      "StatementModel": {
        "properties": {
          "accountId": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный и неизменный идентификатор счёта",
            "examples": [
              "40817810802000000008/044525104"
            ]
          },
          "statementId": {
            "type": "string",
            "maxLength": 40,
            "title": "Идентификатор ресурса выписки",
            "examples": [
              "23489"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatementStatus"
              }
            ],
            "title": "Статус готовности выписки",
            "examples": [
              "Ready"
            ]
          },
          "startDateTime": {
            "type": "string",
            "format": "date",
            "title": "Дата начала выписки. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01"
            ]
          },
          "endDateTime": {
            "type": "string",
            "format": "date",
            "title": "Дата окончания выписки. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01"
            ]
          },
          "creationDateTime": {
            "type": "string",
            "title": "Дата и время создания ресурса. Используется стандарт ISO8601",
            "examples": [
              "2019-01-01T06:06:06.364+00:00"
            ]
          },
          "startDateBalance": {
            "type": "number",
            "title": "Баланс на начало запрашиваемого периода выписки в валюте счета",
            "examples": [
              1234.5
            ]
          },
          "endDateBalance": {
            "type": "number",
            "title": "Баланс на конец запрашиваемого периода выписки в валюте счета",
            "examples": [
              1234.5
            ]
          },
          "Transaction": {
            "items": {
              "$ref": "#/components/schemas/TransactionModel"
            },
            "type": "array",
            "title": "Transaction"
          }
        },
        "type": "object",
        "required": [
          "accountId",
          "status",
          "startDateTime",
          "endDateTime",
          "creationDateTime"
        ],
        "title": "StatementModel"
      },
      "StatementResponseDataModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/StatementListModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "StatementResponseDataModel",
        "description": "Метод получения выписки по счету"
      },
      "StatementStatus": {
        "type": "string",
        "enum": [
          "Created",
          "Processing",
          "Error",
          "Ready"
        ],
        "title": "StatementStatus"
      },
      "Status": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "Статус объекта",
            "examples": [
              "Active"
            ]
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "Status"
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "Active",
          "Suspended"
        ],
        "title": "StatusEnum"
      },
      "StatusRequest": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/Status"
          }
        },
        "type": "object",
        "required": [
          "Data"
        ],
        "title": "StatusRequest"
      },
      "SupplierModel": {
        "properties": {
          "phone": {
            "type": "string",
            "maxLength": 15,
            "minLength": 11,
            "pattern": "^\\+?\\d+$",
            "title": "Номер телефона поставщика",
            "examples": [
              "+7999999999"
            ]
          },
          "name": {
            "type": "string",
            "title": "Наименование поставщика",
            "examples": [
              "ООО Альтер"
            ]
          },
          "taxCode": {
            "type": "string",
            "maxLength": 12,
            "minLength": 10,
            "pattern": "^\\d+$",
            "title": "ИНН поставщика",
            "examples": [
              "660000000000"
            ]
          }
        },
        "type": "object",
        "required": [
          "phone",
          "name",
          "taxCode"
        ],
        "title": "SupplierModel"
      },
      "TaxFieldsModel": {
        "properties": {
          "originatorStatus": {
            "type": "string",
            "title": "Статус плательщика бюджетного платежа"
          },
          "kbk": {
            "type": "string",
            "title": "КБК"
          },
          "oktmo": {
            "type": "string",
            "title": "ОКТМО"
          },
          "base": {
            "type": "string",
            "title": "Основание налогового платежа"
          },
          "documentNumber": {
            "type": "string",
            "title": "Номер налогового документа"
          },
          "documentDate": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "format": "date"
              }
            ],
            "title": "Дата налогового документа"
          },
          "type": {
            "type": "string",
            "title": "Вид платежа"
          },
          "field107": {
            "type": "string",
            "title": "Налоговой период / код таможенного органа"
          }
        },
        "type": "object",
        "title": "TaxFieldsModel"
      },
      "TaxSystemCodeInput": {
        "type": "string",
        "enum": [
          "osn",
          "usn_income",
          "usn_income_outcome",
          "esn",
          "patent"
        ],
        "title": "TaxSystemCodeInput"
      },
      "TaxSystemCodeOutput": {
        "type": "string",
        "enum": [
          "osn",
          "usn_income",
          "usn_income_outcome",
          "esn",
          "patent",
          "envd"
        ],
        "title": "TaxSystemCodeOutput",
        "description": "Перечисление для выдачи результатов из openapi."
      },
      "TransactionAmountModel": {
        "properties": {
          "amount": {
            "type": "number",
            "title": "Сумма транзакции запроса в валюте счета",
            "examples": [
              1234.56
            ]
          },
          "amountNat": {
            "type": "number",
            "title": "Сумма транзакции по счету запроса в рублях по курсу ЦБ на дату транзакции",
            "examples": [
              400.0
            ]
          },
          "currency": {
            "type": "string",
            "title": "Валюта ведения счета. Используется стандарт ISO 4217",
            "examples": [
              "RUB"
            ]
          }
        },
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "title": "TransactionAmountModel"
      },
      "TransactionModel": {
        "properties": {
          "transactionId": {
            "type": "string",
            "maxLength": 210,
            "title": "Уникальный идентификатор транзакции",
            "examples": [
              "23489"
            ]
          },
          "paymentId": {
            "type": "string",
            "title": "Уникальный идентификатор платежа, по которому произошла транзакция",
            "examples": [
              "abcd-11234"
            ]
          },
          "creditDebitIndicator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalCreditDebitIndicatorEnum"
              }
            ],
            "title": "Приход/Уход",
            "examples": [
              "Credit"
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalTransactionStatusEnum"
              }
            ],
            "title": "Статус транзакции",
            "examples": [
              "Booked"
            ]
          },
          "documentNumber": {
            "type": "string",
            "maxLength": 12,
            "title": "Номер платежного документа",
            "examples": [
              "123456"
            ]
          },
          "transactionTypeCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalTransationTypeEnum"
              }
            ],
            "title": "Код типа транзакции (Вид платежного документа)",
            "examples": [
              "Платежный ордер"
            ]
          },
          "documentProcessDate": {
            "type": "string",
            "format": "date",
            "title": "Дата отражения на балансе",
            "examples": [
              "2019-01-01"
            ]
          },
          "description": {
            "type": "string",
            "title": "Назначение платежа",
            "examples": [
              "string"
            ]
          },
          "Amount": {
            "$ref": "#/components/schemas/TransactionAmountModel"
          },
          "DebtorParty": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractorInfoModel"
              }
            ],
            "title": "Информация о контрагенте в случае кредитной операции"
          },
          "DebtorAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CashAccountInfoModel"
              }
            ],
            "title": "Идентификация счета дебитора, в случае кредитной операции"
          },
          "DebtorAgent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractorBankInfoModel"
              }
            ],
            "title": "Финансовое организация, обслуживающая счет дебитора"
          },
          "CreditorParty": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractorInfoModel"
              }
            ],
            "title": "Информация о контрагенте в случае дебетовой транзакции"
          },
          "CreditorAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CashAccountInfoModel"
              }
            ],
            "title": "Идентификация счета кредитора, в случае дебетовой транзакции"
          },
          "CreditorAgent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractorBankInfoModel"
              }
            ],
            "title": "Финансовое организация, обслуживающая счет кредитора"
          },
          "TaxFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxFieldsModel"
              }
            ],
            "title": "Налоговые поля"
          }
        },
        "type": "object",
        "required": [
          "creditDebitIndicator",
          "status",
          "Amount"
        ],
        "title": "TransactionModel"
      },
      "UnauthorizedError": {
        "properties": {
          "errorCode": {
            "type": "string",
            "title": "Низкоуровневое текстовое описание ошибки",
            "examples": [
              "HTTPUnauthorized"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 603,
            "title": "Описание ошибки. Обрезается если длина ошибки превышает максимальное значение",
            "examples": [
              "Something going wrong"
            ]
          },
          "url": {
            "type": "string",
            "title": "URL для помощи в устранении проблемы",
            "examples": [
              "\"http://enter.tochka.com/open-banking/docs\""
            ]
          }
        },
        "type": "object",
        "required": [
          "errorCode",
          "message",
          "url"
        ],
        "title": "UnauthorizedError"
      },
      "UnauthorizedErrorResponse": {
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 40,
            "title": "Высокоуровневый текстовый код ошибки, необходимый для классификации.",
            "examples": [
              "401"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 40,
            "title": "Уникальный идентификатор ошибки, для целей аудита",
            "examples": [
              "c397b21a-d998-4c4d-9471-e60eaf816b87"
            ]
          },
          "message": {
            "type": "string",
            "maxLength": 600,
            "title": "Краткое сообщение об ошибке.",
            "examples": [
              "Что-то пошло не так"
            ]
          },
          "Errors": {
            "items": {
              "$ref": "#/components/schemas/UnauthorizedError"
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "code",
          "id",
          "message",
          "Errors"
        ],
        "title": "UnauthorizedErrorResponse"
      },
      "UnitCodeEnum": {
        "type": "string",
        "enum": [
          "шт.",
          "тыс.шт.",
          "компл.",
          "пар.",
          "усл.ед.",
          "упак.",
          "услуга.",
          "пач.",
          "мин.",
          "ч.",
          "сут.",
          "г.",
          "кг.",
          "л.",
          "м.",
          "м2.",
          "м3.",
          "км.",
          "га.",
          "кВт.",
          "кВт.ч."
        ],
        "title": "UnitCodeEnum"
      },
      "VatType": {
        "type": "string",
        "enum": [
          "none",
          "vat0",
          "vat5",
          "vat7",
          "vat10",
          "vat20",
          "vat105",
          "vat107",
          "vat110",
          "vat120"
        ],
        "title": "VatType"
      },
      "Webhook-Input": {
        "properties": {
          "webhooksList": {
            "items": {
              "$ref": "#/components/schemas/WebhookTypeEnum"
            },
            "type": "array",
            "title": "Список событий, на которое подписано приложение",
            "examples": [
              [
                "incomingPayment"
              ]
            ]
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "url на который необходимо отправлять запрос"
          }
        },
        "type": "object",
        "required": [
          "webhooksList",
          "url"
        ],
        "title": "Webhook"
      },
      "Webhook-Output": {
        "properties": {
          "webhooksList": {
            "items": {
              "$ref": "#/components/schemas/WebhookTypeEnum"
            },
            "type": "array",
            "title": "Список событий, на которое подписано приложение",
            "examples": [
              [
                "incomingPayment"
              ]
            ]
          },
          "url": {
            "type": "string",
            "title": "url на который необходимо отправлять запрос"
          }
        },
        "type": "object",
        "required": [
          "webhooksList",
          "url"
        ],
        "title": "Webhook"
      },
      "WebhookEditRequest": {
        "properties": {
          "webhooksList": {
            "items": {
              "$ref": "#/components/schemas/WebhookTypeEnum"
            },
            "type": "array",
            "title": "Новый список событий, на которые нужно подписаться",
            "examples": [
              [
                "incomingPayment"
              ]
            ]
          },
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "url на который необходимо отправлять запрос"
          }
        },
        "type": "object",
        "required": [
          "webhooksList",
          "url"
        ],
        "title": "WebhookEditRequest"
      },
      "WebhookResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/Webhook-Output"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "WebhookResponseModel"
      },
      "WebhookTestSendRequest": {
        "properties": {
          "webhookType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookTypeEnum"
              }
            ],
            "title": "Тип вебхука"
          }
        },
        "type": "object",
        "required": [
          "webhookType"
        ],
        "title": "WebhookTestSendRequest"
      },
      "WebhookTypeEnum": {
        "type": "string",
        "enum": [
          "incomingPayment",
          "outgoingPayment",
          "incomingSbpPayment",
          "acquiringInternetPayment",
          "incomingSbpB2BPayment"
        ],
        "title": "WebhookTypeEnum"
      },
      "application__invoice__models__enums__PaymentStatusEnum": {
        "type": "string",
        "enum": [
          "payment_waiting",
          "payment_expired",
          "payment_paid"
        ],
        "title": "PaymentStatusEnum"
      },
      "application__open_banking__models__external_models__AccountListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AccountListModel"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AccountListResponseModel",
        "description": "Метод получения списка доступных счетов"
      },
      "application__sbp__models__enums__PaymentStatusEnum": {
        "type": "string",
        "enum": [
          "Confirming",
          "Confirmed",
          "Initiated",
          "Accepting",
          "Accepted",
          "InProgress",
          "Rejected",
          "Error",
          "Timeout"
        ],
        "title": "PaymentStatusEnum",
        "description": "**Описание возможных статусов платежа**\n  - `Confirming` - операция в процессе подтверждения ОПКЦ СБП\n  - `Confirmed` - операция подтверждена\n  - `Initiated` - операция отправлена на обработку\n  - `Accepting` - операция в обработке ОПКЦ СБП\n  - `Accepted` - операция успешно завершена\n  - `InProgress` - операция в обработке РЦ СБП\n  - `Rejected` - операция отклонена\n  - `Error` - ошибка выполнения операции\n  - `Timeout` - тайм-аут выполнения операции"
      },
      "application__sbp__models__response_models__sbp__AccountListResponseModel": {
        "properties": {
          "Data": {
            "$ref": "#/components/schemas/AccountListResponse"
          },
          "Links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "Meta": {
            "$ref": "#/components/schemas/MetaModel"
          }
        },
        "type": "object",
        "required": [
          "Data",
          "Links",
          "Meta"
        ],
        "title": "AccountListResponseModel"
      }
    },
    "securitySchemes": {
      "Необходимые разрешения": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {
              "ReadAccountsBasic": "Получение базовой информации о счёте",
              "ReadAccountsDetail": "Получение детальной информации о счёте",
              "ReadBalances": "Получение баланса",
              "ReadStatements": "Получение выписок по счету",
              "ReadCustomerData": "Получение информации о клиенте",
              "ReadSBPData": "Получение информации в сервисе СБП",
              "EditSBPData": "Изменение информации в сервисе СБП",
              "CreatePaymentForSign": "Создание платежа на подпись",
              "CreatePaymentOrder": "Подписание платежа",
              "ReadAcquiringData": "Получение информации о платёжной ссылке",
              "MakeAcquiringOperation": "Совершение операций через платёжные ссылки",
              "ManageInvoiceData": "Выставление счетов и создание закрывающих документов",
              "ManageWebhookData": "Получение вебхуков"
            },
            "tokenUrl": "https://enter.tochka.com/connect/token"
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Методы",
      "tags": [
        "Работа с балансами счетов",
        "Работа с вебхуками",
        "Работа с выписками",
        "Работа с выставлением счетов",
        "Работа с закрывающими документами",
        "Работа с клиентами",
        "Работа с платежами",
        "Работа с платёжными ссылками",
        "Работа с подписками",
        "Работа с разрешениями",
        "Работа со счетами",
        "Сервис СБП: Работа с QR-кодами",
        "Сервис СБП: Работа с ТСП",
        "Сервис СБП: Работа с ЮЛ",
        "Сервис СБП: Работа с возвратами",
        "Сервис СБП: Работа с кассовыми QR-кодами",
        "Сервис СБП: работа с B2B QR-кодами"
      ]
    }
  ]
}